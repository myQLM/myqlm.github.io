User guide
==========

.. parseonly:: qlm

    These part of the document clarifies main concepts, and the design of Qaptiva 800s. This **user guide** is divided in 3 main sections:

     - **writing quantum programs** provides the keys to creating quantum algorithms, using different quantum paradigm (gate-based, analog, quantum annealing)
     - **executing quantum programs** describe the design of this framework. It explains the procedure to execute quantum algorithms on a QPU, and describes how
       a QPU can be extended to support advanced computation (e.g. variational)
     - **compiling and rewriting quantum circuits** describes all the tool available to rewrite, reduce the gate count, and transpile a quantum circuit, to
       make it runnable on any quantum hardware


.. parseonly:: distributed

    These part of the document clarifies main concepts, and the design of Distributed Qaptiva. This **user guide** is divided in 3 main sections:

     - **writing quantum programs** provides the keys to creating quantum algorithms, using different quantum paradigm (gate-based, analog, quantum annealing)
     - **executing quantum programs** describe the design of this framework. It explains the procedure to execute quantum algorithms on a QPU, and describes how
       a QPU can be extended to support advanced computation (e.g. variational)

.. parseonly:: myqlm

    These part of the document clarifies main concepts, and the design of myQLM. This **user guide** is divided in 3 main sections:

     - **writing quantum programs** provides the keys to creating quantum algorithms, using different quantum paradigm (gate-based, analog, quantum annealing)
     - **executing quantum programs** describe the design of this framework. It explains the procedure to execute quantum algorithms on a QPU, and describes how
       a QPU can be extended to support advanced computation (e.g. variational)

.. autocard::


Libraries built upon Qaptiva
----------------------------

Some libraries have been built upon this framework, to extend its capabilities, and they are listed below.

.. toctree-filt::
    :hidden:
    :caption: Libraries built upon Qaptiva

    fermion
    :qlm::qlm:synthesis
    combinatorial_optim_applic
    :myqlm::myqlm:interoperability
    interoperability_annealing

.. parseonly:: qlm

    .. grid:: 1 2 2 3
        :gutter: 4

        .. grid-item-card:: Spin and fermionic systems
            :link: fermion.rst

        .. grid-item-card:: Synthesizing quantum circuits
            :link: :qlm:synthesis.rst

        .. grid-item-card:: Combinatorial Optimization
            :link: combinatorial_optim_applic.rst

        .. grid-item-card:: Interoperability - Annealing
            :link: interoperability_annealing.rst
            
        .. grid-item-card:: Qiskit Interoperability
            :link: qiskit_interoperability.rst

.. parseonly:: distributed

    .. grid:: 1 2 2 3
        :gutter: 4

        .. grid-item-card:: Spin and fermionic systems
            :link: fermion.rst

        .. grid-item-card:: Combinatorial Optimization
            :link: combinatorial_optim_applic.rst

        .. grid-item-card:: Interoperability - Annealing
            :link: interoperability_annealing.rst

        .. grid-item-card:: Qiskit Interoperability
            :link: qiskit_interoperability.rst

.. parseonly:: myqlm

    .. grid:: 1 2 2 3
        :gutter: 4

        .. grid-item-card:: Spin and fermionic systems
            :link: fermion.rst

        .. grid-item-card:: Combinatorial Optimization
            :link: combinatorial_optim_applic.rst

        .. grid-item-card:: Interoperability - Gate-based
            :link: :myqlm:interoperability.rst

        .. grid-item-card:: Interoperability - Annealing
            :link: interoperability_annealing.rst

        .. grid-item-card:: Qiskit Interoperability
            :link: qiskit_interoperability.rst
