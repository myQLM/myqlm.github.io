.. _getting_started:

.. |qaptiva| unicode:: Qaptiva U+2122

Getting started
===============

.. parseonly:: qlm

    The |qaptiva| Appliance contains tools for **writing**, **compiling**, **optimizing** and **simulating** quantum programs.
    These tools are packaged in a **Python library** named :mod:`qat`, for *Qaptiva Application Toolset*.

.. parseonly:: myqlm

    myQLM contains tools for **writing**, **optimizing** and **simulating** quantum programs. These tools are packaged
    in a **Python library** named :mod:`qat`, for *Qaptiva Application Toolset*.

    myQLM also interfaces with the |qaptiva| Appliance, the quantum programming appliance of Eviden.

.. parseonly:: distributed

    The Distributed |qaptiva| Framework contains tools for **writing**, **compiling**, **optimizing** and **simulating** quantum programs.
    The framework is meant to be deployed in a High Performance Computing (HPC) environment with distributed resources, offering
    a highly optimized quantum circuit simulation with multithreading and state vector distribution. These tools are packaged in
    a **Python library** named :mod:`qat`, for *Qaptiva Application Toolset*.

This library provides powerful semantics for creating quantum circuits, analog schedules, and quantum annealing jobs. These objects can be parametrized
with abstract parameters (for variational quantum computing) and composed of user defined items (custom gates in a circuit, custom time-dependent coefficients
in an analog schedule, etc.)


.. card:: Quantum Hello World

    The following code snippet creates and simulates a simple Bell pair circuit:

    .. figure:: images/bell_pair.png
       :scale: 100%

    .. tab-set::

        .. tab-item:: Functional mode

            .. run-block:: python

                from qat.lang import qrout, H, CNOT

                @qrout
                def bell_pair():
                    H(0)
                    CNOT(0, 1)

                result = bell_pair().run()

                for sample in result:
                    print(f"State {sample.state} amplitude {sample.amplitude}")

            The first line of code imports a decorator and two quantum gates. The decorator is used to declare
            a function that describes our quantum circuit. A detailed description of the quantum circuit
            generation tools can be found in the :ref:`programming section <writing>`.

            This function can be directly sampled via the `.run` method that will look for an available QPU and use it to
            execute the circuit. More information about this process can be found in the :ref:`executing section <executing>`.

        .. tab-item:: Sequential mode
            :sync: sequential_mode

            .. run-block:: python

                from qat.lang import Program, H, CNOT

                # Create a Program
                qprog = Program()
                # Number of qbits
                nbqbits = 2
                # Allocate some qbits
                qbits = qprog.qalloc(nbqbits)

                # Apply some quantum Gates
                H(qbits[0])
                CNOT(qbits[0], qbits[1])

                # Export this program into a quantum circuit
                circuit = qprog.to_circ()

                # Import a Quantum Processor Unit Factory (the default one)
                from qat.qpus import get_default_qpu

                # Create a Quantum Processor Unit
                qpu = get_default_qpu()

                # Create a job
                job = circuit.to_job()

                # Submit the job to the QPU
                result = qpu.submit(job)

                # Iterate over the final state vector to get all final components
                for sample in result:
                    print("State %s amplitude %s" % (sample.state, sample.amplitude))

            The first few lines of code are dedicated to the generation of a quantum circuit and a job,
            an atomic computation task in the |qaptiva| language. A detailed description of the quantum circuit
            generation tools can be found in the :ref:`programming section <writing>`.

            Then the remaining lines instantiate a simulator, submit the job, and print the simulation results.
            More information about this process can be found in the :ref:`executing section <executing>`.

.. autocard::
