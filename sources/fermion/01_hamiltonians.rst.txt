Creating and manipulating Hamiltonians
======================================
This page explains how to create and manipulate Hamiltonian using :mod:`qat.fermion`
module

.. contents:: Table of Contents
    :depth: 2
    :local:
    :backlinks: none

.. _qat-fermion_hamiltonian:

Defining a Hamiltonian
----------------------
Many problems in physics are defined by their Hamiltonians. The basic objects we will manipulate are
:class:`~qat.fermion.hamiltonians.SpinHamiltonian` and :class:`~qat.fermion.hamiltonians.FermionHamiltonian`.
These classes can be seen as an :class:`~qat.core.Observable` constructor, of which they inherit,
while containing additional methods.

Let us see in more details how to define a :class:`~qat.fermion.hamiltonians.SpinHamiltonian` and a
:class:`~qat.fermion.hamiltonians.FermionHamiltonian`.

Spin Hamiltonians
.................

The **spin Hamiltonian** acting on 2 qubits :math:`0` and :math:`1` defined by :math:`H = 0.3 X_{0} - 0.4 Z_{0}Y_{1}` can be written:

.. run-block:: python

    from qat.core import Term
    from qat.fermion.hamiltonians import SpinHamiltonian

    # Define the number of qubits
    nqbits = 2

    # Define the Hamiltonian
    H = SpinHamiltonian(nqbits, [Term(0.3, "X", [0]), Term(-0.4, "ZY", [0, 1])])
    print(f"H = {H}")

Fermionic Hamiltonians
......................

If we consider now a **fermionic Hamiltonian** :math:`H = 0.3 (C^{\dagger}_{0}C_{1} + C^{\dagger}_{1}C_{0}) + 1.4 C^{\dagger}_{0}C_{1}C^{\dagger}_{1}C_{0}`, we
should write:

.. run-block:: python

    from qat.core import Term
    from qat.fermion.hamiltonians import FermionHamiltonian

    # Define the number of qubits
    nqbits = 2

    # Define the Hamiltonian
    H = FermionHamiltonian(nqbits, [Term(0.3, "Cc", [0, 1]), Term(0.3, "Cc", [1, 0]), Term(1.4, "CcCc", [0, 1, 1, 0])])
    print(f"H = {H}")

.. note::

    When compatible, :class:`~qat.fermion.hamiltonians.FermionHamiltonian` can be transformed to
    :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` via the method
    :meth:`~qat.fermion.hamiltonians.FermionHamiltonian.to_electronic`.

.. _qat-fermion_electronicstructurehamiltonian:

Fermionic Hamiltonian using one and two-electrons integrals
...........................................................

In chemistry, problems are often more easily described using interaction terms instead of fermionic operators.

The electronic-structure Hamiltonian is defined by:

.. math::

    H = \sum_{pq} h_{pq}a_p^\dagger a_q + \frac{1}{2} \sum_{pqrs} h_{pqrs}a_p^\dagger a_q^\dagger a_r a_s + r \mathbb{I}

The definition of this Hamiltonian is done via the :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` class, which
accepts the one and two-body terms :math:`h_{pq}` and :math:`h_{pqrs}` as inputs.

.. run-block:: python

    import numpy as np
    from qat.fermion import ElectronicStructureHamiltonian

    # Define the interaction integrals
    h_pq = 0.2 * np.array([[0, 1], [1, 0]])

    h_pqrs = np.zeros((2, 2, 2, 2))
    h_pqrs[0, 1, 1, 0] = 0.7
    h_pqrs[1, 0, 0, 1] = 0.7

    # Define the ElectronicStructureHamiltonian
    H_elec = ElectronicStructureHamiltonian(h_pq, h_pqrs, -6)

:class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` can be transformed to
:class:`~qat.fermion.hamiltonians.FermionHamiltonian` via the method
:meth:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion`.

The :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` inherits from the
:class:`~qat.fermion.hamiltonians.FermionHamiltonian` class, and thus contains every method implemented in
:class:`~qat.fermion.hamiltonians.FermionHamiltonian`.

.. note::

    An alternative definition for the electronic-structure Hamiltonian is :

    .. math::

        H = \sum_{uv\sigma} I_{uv}c^{\dagger}_{u\sigma}c_{v\sigma} + \frac{1}{2}\sum_{uvwx}\sum_{\sigma \sigma'} I_{uvwx}c^{\dagger}_{u\sigma}c^{\dagger}_{v\sigma'}c_{k\sigma'}c_{l\sigma} + r\mathbb{I}

    Should you need to define an :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` using the one- and two-body integrals :math:`I_{uv}` and :math:`I_{uvwx}`, you have two options:

        * convert the :math:`I_{uv},I_{uvwx}` to :math:`h_{pq},h_{pqrs}` using the :func:`qat.fermion.chemistry.ucc.convert_to_h_integrals` function and define the :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` using :math:`h_{pq},h_{pqrs}`;
        * define a :class:`~qat.fermion.chemistry.wrapper.MolecularHamiltonian` using :math:`I_{uv},I_{uvwx}` and extract the :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` using its :meth:`~qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian` method.

    For more information on this type of body integrals, see the class :class:`~qat.fermion.chemistry.wrapper.MolecularHamiltonian` documentation.

You can also consult the Jupyter notebook on :notebook:`(spin-fermion transforms)[qat_fermion_spin_fermion_transforms.ipynb]`.

.. _qat-fermion_get_matrix:

The get_matrix() method
.......................

The objects :class:`~qat.fermion.hamiltonians.SpinHamiltonian`, :class:`~qat.fermion.hamiltonians.FermionHamiltonian` and
:class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` allow for the direct usage of the underlying Hamiltonian matrix.
Bare in mind that this method should not be used for big Hamiltonians, as the memory cost might be too much to handle on your machine.
You can access the Hamiltonian matrix by using the :meth:`~qat.fermion.hamiltonians.SpinHamiltonian.get_matrix` method of the
Hamiltonian classes.

.. run-block:: python

    from qat.core import Term
    from qat.fermion import SpinHamiltonian

    H = SpinHamiltonian(2, [Term(0.5, "Y", [0]), Term(0.5, "Y", [1])])
    print(H.get_matrix())

.. _qat-fermion_transforms:

Fermionic to spin representation
--------------------------------

A problem formulated in fermionic representation often needs to be converted to a spin representation, so that it can be handled by
a quantum computer. To do so, one can use the :meth:`~qat.fermion.hamiltonians.FermionHamiltonian.to_spin` method.

Three transforms are available:

     * the Jordan-Wigner transform (default),
     * the Bravyi-Kitaev transform,
     * the parity method.

Example
.......

Let us transform the previous :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` to a spin Hamiltonian:

.. run-block:: python

    import numpy as np
    from qat.fermion import ElectronicStructureHamiltonian

    # Define the fermionic Hamiltonian
    h_pq = 0.2 * np.array([[0, 1], [1, 0]])
    h_pqrs = np.zeros((2, 2, 2, 2))
    h_pqrs[0, 1, 1, 0] = 0.7
    h_pqrs[1, 0, 0, 1] = 0.7

    # Define the Hamiltonian
    H_fermion = ElectronicStructureHamiltonian(h_pq, h_pqrs, -6)

    # Transform it to a spin Hamiltonian using Bravyi-Kitaev transform
    H_spin = H_fermion.to_spin(method="bravyi-kitaev")

    # Similarly, we could have used "jordan-wigner" or "parity"
    print(f"H = {H_spin}")

Transforming a :class:`~qat.fermion.hamiltonians.ElectronicStructureHamiltonian` into a spin Hamiltonian
relies on functions located in the :mod:`qat.fermion.transforms` module:

    * Jordan-Wigner transform uses :func:`~qat.fermion.transforms.transform_to_jw_basis`
    * Bravyi-Kitaev transform uses :func:`~qat.fermion.transforms.transform_to_bk_basis`
    * Parity basis transform uses :func:`~qat.fermion.transforms.transform_to_parity_basis`

Spin and fermionic Hamiltonian operations
-----------------------------------------

Spin and fermionic Hamiltonian handle basic algebraic operations. This allows for the computation of commutators in both spin and
fermionic representations:

.. run-block:: python

    import numpy as np
    from qat.core import Term
    from qat.fermion.hamiltonians import FermionHamiltonian

    H_fermion1 = FermionHamiltonian(2, [Term(1.0, "Cc", [0, 1]), Term(0.5, "CCcc", [0, 1, 0, 1])])
    H_fermion2 = FermionHamiltonian(2, [Term(1.0, "Cc", [1, 0]), Term(0.5, "CCcc", [1, 0, 1, 0])])

    H_spin1 = H_fermion1.to_spin()
    H_spin2 = H_fermion2.to_spin()

    fermion_comutator_matrix = (H_fermion1 | H_fermion2).get_matrix()
    spin_comutator_matrix = (H_spin1 | H_spin2).get_matrix()

    is_equal_sign = "=" if np.all(np.equal(fermion_comutator_matrix, spin_comutator_matrix)) else "!="
    print(f"Fermionic commutator {is_equal_sign} spin commutator matrix")

.. note::

    In some cases, it is preferable to compute commutators in fermionic representation rather than in spin representation, as
    the built-in Wick ordering might simplify many fermionic terms, which may speed up the commutator computation as well as
    subsequent computations


.. _qat-fermion_hamiltonian_constructors:

Some Hamiltonian constructors
-----------------------------

The Hubbard model or the Anderson model are very widely used. For that reason, we included several Hamiltonian constructors to help
you define the system you are interested in more easily.

Module :mod:`qat.fermion.hamiltonians` provide tools to create Hamiltonian based on these models:

 - **Hubbard Hamiltonian:** the toy-model of strong correlations - this Hamiltonian can be created using :func:`~qat.fermion.hamiltonians.make_hubbard_model`
 - **Single-impurity Anderson Model:** describes one correlated site embedded in a fermionic bath - this Hamiltonian can be created using
   :func:`~qat.fermion.hamiltonians.make_anderson_model`
 - **Embedded Hamiltonian:** describes a cell of N correlated sites embedded in a N-level fermionic bath - this Hamiltonian
   can be created using :func:`~qat.fermion.hamiltonians.make_embedded_model`
