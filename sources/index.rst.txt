.. parseonly:: qlm

    Qaptiva 800s documentation
    ==========================

    **Qaptiva 800 series** is the Quantum Appliance developed by Eviden. This appliance replaces the *Quantum Learning Machine (QLM)*, any code written on a Quantum Learning Machine
    remains executable on Qaptiva 800s. Qaptiva 800s provides the :mod:`qat` library (for **Qaptiva Application Toolset**), which includes:

     - a **powerful semantic** for :ref:`writing quantum algorithms <writing>` (i.e. gate-based programming, analog programming, or quantum annealing programming)
     - a **versatile execution stack** for :ref:`running quantum jobs <executing>`, including an easy handling of :ref:`observables <observable>`, special tools for carrying NISQ-oriented
       :ref:`variational methods <running_variational>` (such as VQE, QAOA), an easy API for :ref:`designing custom plugins <plugin>` (e.g. transpilers), as well as for connecting to any Quantum Processing
       Unit (QPU)
     - **advanced compilers** to :ref:`transpile a quantum circuit <transpilation>`, to make it run on any QPU Hardware


    .. dropdown:: Virtual environment in Qaptiva
       :color: dark
       :icon: info

        Since Qaptiva version 1.10, Qaptiva software is delivered to support multiple versions of Python (3.9, 3.10, 3.11, 3.12). Users can choose which Python version they want to use. To do so, the use of **virtual environment is highly recommended** to ensure the software functions properly.
        The **"workon" command is useful** for creating and managing these environments, providing isolation and
        manageability of project dependencies. For detailed instructions, please refer to the
        :ref:`workon section <workon>` of the documentation.

.. parseonly:: distributed

    Distributed Qaptiva documentation
    =================================

    **Distributed Qaptiva** is the distributed Quantum Appliance developed by Eviden. This appliance is meant to be deployed in a 
    High Performance Computing (HPC) environment with distributed resources, offering a highly optimized quantum circuit simulation
    with multithreading and state vector distribution. Distributed Qaptiva provides the :mod:`qat` library (for **Qaptiva Application Toolset**),
    which includes:

     - a **powerful semantic** for :ref:`writing quantum algorithms <writing>` (i.e. gate-based programming, analog programming, or quantum annealing programming)
     - a **versatile execution stack** for :ref:`running quantum jobs <executing>`, including an easy handling of :ref:`observables <observable>`, special tools for carrying NISQ-oriented
       :ref:`variational methods <running_variational>` (such as VQE, QAOA), an easy API for :ref:`designing custom plugins <plugin>` (e.g. transpilers), as well as for connecting to any Quantum Processing
       Unit (QPU)
     - in particular, a :ref:`distributed quantum circuit simulator <distributed_qpu>` with multithreading and state vector distribution, and some 
       plugins to compile the circuit for an optimized simulation

.. parseonly:: myqlm

    myQLM â€“ Quantum Python Package
    ==============================

    **myQLM** is the quantum software stack developed by `Eviden <https://eviden.com/solutions/advanced-computing/quantum-computing/>`_, for writing, simulating, optimizing, and executing quantum programs. Through a Python interface, it provides:

     - a **powerful semantic** for :ref:`writing quantum algorithms <writing>` (gate-based programing, analog programing, or quantum annealing programing)
     - a **versatile execution stack** for :ref:`running quantum jobs <executing>`, including an easy handling of :ref:`observables <observable>`, special tools for carrying NISQ-oriented
       :ref:`variational methods <running_variational>` (such as VQE, QAOA), an easy API for :ref:`designing custom plugins <plugin>` (e.g. compilation), as well as for connecting to any Quantum Processing
       Unit (QPU)
     - a **seamless interface** to :ref:`available quantum processors and major quantum programming frameworks <interop>`

.. autocard::
   :titlesonly: 04_api_reference
