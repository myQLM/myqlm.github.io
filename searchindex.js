Search.setIndex({"alltitles": {"A concrete example": [[40, "a-concrete-example"], [41, "a-concrete-example"]], "A new simulated QPU in myQLM": [[409, "a-new-simulated-qpu-in-myqlm"]], "API reference": [[55, null]], "Abstract and utility QPU classes": [[349, "abstract-and-utility-qpu-classes"]], "Abstract plugin": [[390, "abstract-plugin"]], "Adding plugins to your computation stack": [[408, "adding-plugins-to-your-computation-stack"]], "Additional features": [[46, "additional-features"]], "Adiabatic Quantum Optimization (AQO)": [[425, null]], "Advanced matching": [[50, "advanced-matching"]], "Advanced operations": [[12, "advanced-operations"]], "Advanced optimization": [[51, "advanced-optimization"]], "Algorithms": [[230, "algorithms"]], "All-in-one compiler": [[45, "all-in-one-compiler"]], "Allocating qubit and classical registers": [[12, "allocating-qubit-and-classical-registers"]], "Allocation": [[16, "allocation"], [16, "id1"]], "Analog Jobs": [[21, null]], "Analog programming": [[18, null]], "Ancillae management and compute scopes": [[15, null]], "Annealing programming": [[22, null]], "Applying quantum gate": [[12, "applying-quantum-gate"]], "Arithmetic expressions": [[16, "arithmetic-expressions"]], "Arithmetic routines": [[230, "arithmetic-routines"]], "Arity generator": [[10, "arity-generator"]], "Atomic and molecular studies": [[181, "atomic-and-molecular-studies"]], "Atos Quantum Assembler (AQASM)": [[17, null]], "Automated ancillae management": [[15, "automated-ancillae-management"]], "Automated batch generation": [[31, null]], "Automated rewriting": [[305, "automated-rewriting"]], "Available binders": [[411, "available-binders"]], "Background": [[18, "background"]], "Basic quantum algorithms": [[408, "basic-quantum-algorithms"]], "Batch generators in myQLM": [[409, "batch-generators-in-myqlm"]], "Behavior of the optimizer": [[51, "behavior-of-the-optimizer"]], "Bibliography": [[23, "bibliography"], [424, "bibliography"]], "Bidirectional Clifford re-normalization": [[46, "bidirectional-clifford-re-normalization"]], "Binding variables": [[11, "binding-variables"]], "Building phase oracles": [[16, "building-phase-oracles"]], "Building schedules": [[19, null]], "C++ Low-level Statevector": [[350, "c-low-level-statevector"]], "CLinalg: C++ Linear-algebra-based simulator": [[36, "clinalg-c-linear-algebra-based-simulator"], [37, null]], "Circuit rewriting plugins": [[321, "circuit-rewriting-plugins"]], "Circuit synthesis plugins": [[321, "circuit-synthesis-plugins"]], "Cirq interoperability": [[414, null]], "Classes for the supported NP-Hard problems": [[278, "classes-for-the-supported-np-hard-problems"]], "Combinatorial Optimization Generators": [[215, "combinatorial-optimization-generators"]], "Combinatorial Optimization Generators Results": [[294, "combinatorial-optimization-generators-results"]], "Combinatorial Optimization Problems": [[408, "combinatorial-optimization-problems"]], "Combinatorial optimization": [[417, null]], "Common many-body Hamiltonians": [[181, "common-many-body-hamiltonians"]], "Compatibility Matrix": [[4, "compatibility-matrix"]], "Compilation time linking": [[17, "compilation-time-linking"]], "Compiling .aqasm files": [[17, "compiling-aqasm-files"]], "Compiling and rewriting quantum circuits": [[44, null]], "Compiling quantum jobs using plugins": [[45, null]], "Compressing single qubit gates": [[52, null]], "Compute/uncompute scopes": [[15, "compute-uncompute-scopes"]], "Conditionals on quantum integers": [[16, "conditionals-on-quantum-integers"]], "Connecting to a QPU": [[413, "connecting-to-a-qpu"]], "Connecting to a QPU/Backend": [[412, "connecting-to-a-qpu-backend"]], "Constrained Graph Problems": [[418, "constrained-graph-problems"]], "Constructing one or multiple Jobs (using Batch)": [[28, null]], "Contributing to myQLM": [[410, null]], "Creating analog Jobs": [[18, "creating-analog-jobs"]], "Creating and adding quantum gates to a circuit": [[10, null]], "Creating and manipulating Hamiltonians": [[434, null]], "Creating custom Quantum Annealing Jobs": [[290, "creating-custom-quantum-annealing-jobs"]], "Creating custom specifications": [[42, "creating-custom-specifications"]], "Creating observables": [[26, null]], "Creating variational circuits": [[11, null]], "Crossing lattice": [[426, null]], "Declaring custom patterns": [[52, "declaring-custom-patterns"]], "Defining a Hamiltonian": [[434, "defining-a-hamiltonian"]], "Defining patterns": [[305, "defining-patterns"]], "Defining quantum circuits / jobs using a Python function": [[409, "defining-quantum-circuits-jobs-using-a-python-function"]], "Demos": [[408, null], [433, "demos"]], "Dependant Packages": [[409, "dependant-packages"], [409, "id15"], [409, "id20"], [409, "id22"], [409, "id24"], [409, "id26"], [409, "id28"], [409, "id31"], [409, "id34"], [409, "id38"], [409, "id41"], [409, "id45"]], "Deprecated custom gates": [[10, "deprecated-custom-gates"]], "Deprecation warnings": [[409, "deprecation-warnings"]], "Designing and running variational algorithms in the QLM": [[408, "designing-and-running-variational-algorithms-in-the-qlm"]], "Device generators": [[165, "device-generators"]], "Differentiating jobs": [[43, "differentiating-jobs"]], "Entangling gates rewriting patterns": [[54, "entangling-gates-rewriting-patterns"]], "Evaluating expressions": [[16, "evaluating-expressions"]], "Example": [[54, "example"], [327, "example"], [434, "example"]], "Example of a grover algorithm": [[1, "example-of-a-grover-algorithm"]], "Example of an optimization: circuit execution time": [[51, "example-of-an-optimization-circuit-execution-time"]], "Example: Grover oracle for graph coloring": [[16, "example-grover-oracle-for-graph-coloring"]], "Examples": [[45, "examples"], [47, "examples"]], "Executing / Simulating quantum programs": [[27, null]], "Executing quantum programs": [[2, null]], "Exporting the circuit": [[12, "exporting-the-circuit"]], "Extending a QPU (by using Plugins)": [[39, null]], "Extending a QPU to support variational jobs": [[43, "extending-a-qpu-to-support-variational-jobs"]], "Fermionic Hamiltonian using one and two-electrons integrals": [[434, "fermionic-hamiltonian-using-one-and-two-electrons-integrals"]], "Fermionic Hamiltonians": [[434, "fermionic-hamiltonians"]], "Fermionic ansatz circuits": [[181, "module-qat.fermion.circuits"], [435, "fermionic-ansatz-circuits"]], "Fermionic to spin representation": [[434, "fermionic-to-spin-representation"]], "Final transpilation and possible target gate sets": [[45, "final-transpilation-and-possible-target-gate-sets"]], "First steps with the QLM": [[408, "first-steps-with-the-qlm"]], "Fixes": [[409, "fixes"], [409, "id2"], [409, "id5"], [409, "id9"], [409, "id13"], [409, "id18"], [409, "id37"], [409, "id44"], [409, "id49"], [409, "id52"]], "Flagging patterns to remove": [[51, "flagging-patterns-to-remove"]], "Gate based computing": [[36, null]], "Gate expansion": [[54, "gate-expansion"]], "Gate set management": [[230, "gate-set-management"]], "Gate structures": [[230, "gate-structures"]], "Gate-based QPUs": [[349, "gate-based-qpus"]], "Gate-based programming": [[9, null]], "General Combinatorial Problems": [[25, null]], "Generating QAOA Ans\u00e4tze or QA Jobs": [[278, "generating-qaoa-ansatze-or-qa-jobs"]], "Generating the circuit": [[12, "generating-the-circuit"]], "Generator Utilities": [[215, "generator-utilities"]], "Generic combinatorial optimization": [[278, "generic-combinatorial-optimization"]], "Getting information from the QPU": [[42, null]], "Getting started": [[0, null]], "Graph Colouring Generator": [[432, null]], "Graph Partitioning": [[419, null]], "Graph Partitioning Generator": [[429, null]], "Hamiltonian as a list of coefficients and Observables": [[19, "hamiltonian-as-a-list-of-coefficients-and-observables"]], "Hamiltonian as one Observable": [[19, "hamiltonian-as-one-observable"]], "Hamiltonians constructors": [[181, "hamiltonians-constructors"]], "Hardware model and gates specifications": [[224, "hardware-model-and-gates-specifications"]], "Hardware specifications": [[103, "hardware-specifications"]], "Header": [[17, "header"]], "High-level Quantum Processing Unit": [[350, "high-level-quantum-processing-unit"]], "High-level optimization": [[51, null]], "Implementation of the example": [[51, "implementation-of-the-example"]], "Initial gate optimization": [[46, "initial-gate-optimization"]], "Initial transpilation": [[45, "initial-transpilation"]], "InitialMapping: a qubit placement optimization plugin": [[47, null]], "Inner workings": [[34, "inner-workings"]], "Install": [[4, "id4"]], "Install myQLM package": [[4, "install-myqlm-package"]], "Installing myQLM": [[4, null]], "Instructions": [[17, "instructions"]], "Interoperability": [[4, "interoperability"]], "Interoperability with annealing framework": [[439, null]], "Interoperability with gate-based framework": [[411, null]], "Introduction": [[50, "introduction"], [51, "introduction"]], "Involutions and trivial simplifications": [[54, "involutions-and-trivial-simplifications"]], "Ising Hamiltonians": [[23, null]], "Ising Observables": [[23, "ising-observables"]], "Iterating of a Circuit": [[109, "iterating-of-a-circuit"]], "K-Clique Generator": [[430, null]], "KClique": [[420, null]], "Known problems": [[409, "known-problems"]], "LazySynthesis: quantum circuit compilation": [[46, null]], "Libraries built upon Qaptiva": [[7, "libraries-built-upon-qaptiva"]], "Lifting Python functions into quantum gates": [[14, "lifting-python-functions-into-quantum-gates"]], "Linker and low level circuit manipulation": [[230, "linker-and-low-level-circuit-manipulation"]], "Linking at circuit extraction": [[14, "linking-at-circuit-extraction"]], "List of gates": [[17, "list-of-gates"]], "Logical expressions": [[16, "logical-expressions"]], "Low-level optimization": [[50, null]], "Main Fixes": [[409, "main-fixes"], [409, "id40"]], "Main Package": [[409, "main-package"], [409, "id1"], [409, "id3"], [409, "id6"], [409, "id10"], [409, "id14"], [409, "id19"], [409, "id21"], [409, "id23"], [409, "id25"], [409, "id27"], [409, "id30"], [409, "id33"]], "Make you own junction": [[41, null]], "Make your own QPU": [[35, null]], "Make your own plugin": [[40, null]], "Managing registers": [[230, "managing-registers"]], "Manipulating patterns": [[305, "manipulating-patterns"]], "Manipulating schedules": [[20, null]], "Mappings": [[47, "mappings"], [390, "mappings"]], "Mathematical utilities": [[358, "mathematical-utilities"]], "Matrix definition": [[10, "matrix-definition"]], "Max Cut": [[421, null]], "Max Cut Generator": [[428, null]], "Maximum Weighted Independent Set (MWIS)": [[426, "maximum-weighted-independent-set-mwis"]], "Method compile": [[40, "method-compile"]], "Method get_specs": [[35, "method-get-specs"]], "Method post_process": [[40, "method-post-process"]], "Method submit_job": [[35, "method-submit-job"]], "Metrics": [[358, "module-qat.quops.metrics"]], "Migrating code based on deprecated library qat.dqs": [[437, null]], "Misc. utilities": [[103, "misc-utilities"]], "MolecularHamiltonian": [[435, "molecularhamiltonian"]], "MoleculeInfo": [[435, "moleculeinfo"]], "Most useful Circuit methods": [[109, "most-useful-circuit-methods"]], "NP-hard problems": [[418, null]], "NP-hard problems generators": [[427, "np-hard-problems-generators"]], "Name of a gate:": [[53, "name-of-a-gate"]], "Naming quantum routines": [[14, null]], "Native gates, controls and daggers": [[10, "native-gates-controls-and-daggers"]], "New compilation plugins": [[409, "new-compilation-plugins"]], "New features": [[409, "new-features"], [409, "id47"], [409, "id50"], [409, "id53"]], "Nnizer: Swap Insertion Solver": [[48, null]], "Number Partitioning": [[422, null]], "Objects for parsing a job result": [[103, "objects-for-parsing-a-job-result"]], "Objects for writing a job": [[103, "objects-for-writing-a-job"]], "Observable Job": [[30, null]], "Observable-related objects": [[103, "observable-related-objects"]], "Observables": [[26, "observables"]], "Observables operations": [[26, "observables-operations"]], "Open source part": [[5, "open-source-part"]], "OpenQASM Compiler": [[416, null]], "Operator basis": [[358, "operator-basis"]], "Operator extraction": [[390, "operator-extraction"]], "Oracles and quantum types": [[16, null]], "Other Packages": [[409, "other-packages"], [409, "id16"], [409, "id29"], [409, "id32"], [409, "id35"], [409, "id39"], [409, "id42"], [409, "id46"]], "Other Updated Packages": [[409, "other-updated-packages"], [409, "id8"], [409, "id12"]], "Other compilers": [[45, "other-compilers"]], "Other problems": [[418, "other-problems"]], "Overview: circuit optimization": [[408, "overview-circuit-optimization"]], "Parameters in pattern:": [[53, "parameters-in-pattern"]], "Pattern collections (to be used with PatternManager)": [[54, null]], "Patterns specific to the beginning/end of a circuit": [[50, "patterns-specific-to-the-beginning-end-of-a-circuit"]], "Plugin for fermionic systems": [[321, "plugin-for-fermionic-systems"]], "Plugin utilities": [[321, "plugin-utilities"]], "Plugins": [[436, null]], "Predefined devices": [[165, "predefined-devices"]], "Predefined hardware models": [[224, "predefined-hardware-models"]], "Predefined patterns": [[52, "predefined-patterns"]], "Predefined quantum channels": [[358, "predefined-quantum-channels"]], "Prerequisites": [[4, "prerequisites"]], "Problem generators": [[427, null]], "Programming tools": [[230, "programming-tools"]], "Programming with qat.lang": [[408, "programming-with-qat-lang"]], "ProjectQ interoperability": [[415, null]], "Proprietary part": [[5, "proprietary-part"]], "PyLinalg: Python Linear-algebra-based simulator": [[36, "pylinalg-python-linear-algebra-based-simulator"], [38, null]], "PyQuil interoperability": [[413, null]], "Pybind interface": [[350, "pybind-interface"]], "Python modules": [[55, "python-modules"]], "QPU Emulators": [[36, "id4"]], "Qiskit interoperability": [[412, null]], "Quadratic Unconstrained Binary Optimization (QUBO)": [[24, null], [426, "quadratic-unconstrained-binary-optimization-qubo"]], "Quadratic problems: Ising and QUBO": [[278, "quadratic-problems-ising-and-qubo"]], "Quantum Approximate Optimization Algorithm (QAOA)": [[424, null]], "Quantum Channels": [[358, "quantum-channels"]], "Quantum Chemistry tools for VQE": [[435, "quantum-chemistry-tools-for-vqe"]], "Quantum Processing Unit": [[351, "quantum-processing-unit"]], "Quantum Processing Unit (QPU)": [[33, null]], "Quantum application (including Ans\u00e4tze and state preparation)": [[435, null]], "Quantum boolean and expressions": [[230, "quantum-boolean-and-expressions"]], "Quantum booleans, quantum conditionals, and quantum oracles": [[16, "quantum-booleans-quantum-conditionals-and-quantum-oracles"]], "Quantum conditionals and with statements": [[16, "quantum-conditionals-and-with-statements"]], "Quantum integers": [[16, "quantum-integers"], [230, "quantum-integers"]], "Quantum labraries and basic algorithms": [[230, "quantum-labraries-and-basic-algorithms"]], "Quantum phase estimation": [[181, "module-qat.fermion.phase_estimation"], [435, "quantum-phase-estimation"]], "Quantum programs": [[12, null]], "Quantum routines (and Oracles)": [[13, null]], "Quantum subspace expansion": [[181, "module-qat.fermion.chemistry.qse"], [435, "quantum-subspace-expansion"]], "Quantum types": [[230, "quantum-types"]], "Qubits and cbits": [[109, "qubits-and-cbits"]], "Qubits of a gate:": [[53, "qubits-of-a-gate"]], "Random generation methods": [[390, "random-generation-methods"]], "References": [[44, "references"], [48, "references"], [241, "references"], [243, "references"], [249, "references"], [253, "references"], [289, "references"]], "Release notes": [[409, null]], "Result of a quantum program": [[32, null]], "Rewriting quantum circuits": [[49, null]], "Rotation merging": [[54, "rotation-merging"]], "Running digital quantum simulations for spin and fermionic systems": [[408, "running-digital-quantum-simulations-for-spin-and-fermionic-systems"]], "Running variational algorithms": [[43, null]], "SQA computing": [[34, null]], "Sample Job": [[29, null]], "Setting a classical value": [[16, "setting-a-classical-value"]], "Simulated Annealing": [[349, "simulated-annealing"]], "Simulated Quantum Annealing Benchmarking and Performance": [[418, "simulated-quantum-annealing-benchmarking-and-performance"]], "Simulation of quantum circuits on the QLM: introduction": [[408, "simulation-of-quantum-circuits-on-the-qlm-introduction"]], "Single term observables": [[26, "single-term-observables"]], "Solving combinatorial problem on Rydberg atom quantum devices": [[409, "solving-combinatorial-problem-on-rydberg-atom-quantum-devices"]], "Some Hamiltonian constructors": [[434, "some-hamiltonian-constructors"]], "Specifying gate sets:": [[335, "specifying-gate-sets"]], "Spin Hamiltonians": [[434, "spin-hamiltonians"]], "Spin and fermionic Hamiltonian operations": [[434, "spin-and-fermionic-hamiltonian-operations"]], "Spin and fermionic systems": [[433, null]], "State preparatation and QRAM": [[230, "state-preparatation-and-qram"]], "Subcircuit definition": [[10, "subcircuit-definition"]], "Synthesis methods": [[390, "synthesis-methods"]], "Synthopline": [[408, "synthopline"]], "Table of Contents": [[434, "table-of-contents"], [435, "table-of-contents"]], "Targeting patterns through their index": [[50, "targeting-patterns-through-their-index"]], "Testing for several initializations of the parameters": [[43, "testing-for-several-initializations-of-the-parameters"]], "The base algorithm/plugin": [[46, "the-base-algorithm-plugin"]], "The diffusion": [[1, "the-diffusion"]], "The get_matrix() method": [[434, "the-get-matrix-method"]], "The oracle": [[1, "the-oracle"]], "The spin-fermion transforms": [[181, "module-qat.fermion.transforms"]], "The text format": [[17, "the-text-format"]], "Tools for fermionic computations (myQLM-fermion)": [[409, "tools-for-fermionic-computations-myqlm-fermion"]], "Translating quantum circuits": [[412, "translating-quantum-circuits"], [413, "translating-quantum-circuits"], [414, "translating-quantum-circuits"], [415, "translating-quantum-circuits"], [416, "translating-quantum-circuits"]], "Trivial commutations": [[54, "trivial-commutations"]], "Trotterization tools": [[435, "trotterization-tools"]], "Tutorials": [[408, "tutorials"]], "Unconstrained Graph Problems": [[418, "unconstrained-graph-problems"]], "Unitary Coupled-Cluster (UCC)": [[181, "unitary-coupled-cluster-ucc"]], "Updated Dependant Packages": [[409, "updated-dependant-packages"], [409, "id4"], [409, "id7"], [409, "id11"]], "Updated features": [[409, "updated-features"], [409, "id17"], [409, "id36"], [409, "id43"], [409, "id48"], [409, "id51"]], "User defined parametrized gates (AbstractGate)": [[10, "user-defined-parametrized-gates-abstractgate"]], "User guide": [[7, null]], "Using abstract variables": [[19, "using-abstract-variables"]], "Using an observable": [[26, "using-an-observable"]], "Utility functions": [[181, "utility-functions"]], "Utility methods": [[390, "utility-methods"]], "Variables and Parameters": [[103, "variables-and-parameters"]], "Variational Quantum Eigensolver (VQE)": [[435, "variational-quantum-eigensolver-vqe"]], "Variational algorithms with Qaptiva": [[3, null]], "Variational jobs": [[11, "variational-jobs"]], "Variational optimization plugins": [[321, "variational-optimization-plugins"]], "Vertex Cover": [[423, null]], "Vertex Cover Generator": [[431, null]], "What\u2019s new in myQLM 1.10.3": [[409, "what-s-new-in-myqlm-1-10-3"]], "What\u2019s new in myQLM 1.10.4": [[409, "what-s-new-in-myqlm-1-10-4"]], "What\u2019s new in myQLM 1.10.5": [[409, "what-s-new-in-myqlm-1-10-5"]], "What\u2019s new in myQLM 1.10.6": [[409, "what-s-new-in-myqlm-1-10-6"]], "What\u2019s new in myQLM 1.11.2": [[409, "what-s-new-in-myqlm-1-11-2"]], "What\u2019s new in myQLM 1.11.3": [[409, "what-s-new-in-myqlm-1-11-3"]], "What\u2019s new in myQLM 1.4.0": [[409, "what-s-new-in-myqlm-1-4-0"]], "What\u2019s new in myQLM 1.5.1": [[409, "what-s-new-in-myqlm-1-5-1"]], "What\u2019s new in myQLM 1.6.1": [[409, "what-s-new-in-myqlm-1-6-1"]], "What\u2019s new in myQLM 1.7.1": [[409, "what-s-new-in-myqlm-1-7-1"]], "What\u2019s new in myQLM 1.7.2": [[409, "what-s-new-in-myqlm-1-7-2"]], "What\u2019s new in myQLM 1.7.3": [[409, "what-s-new-in-myqlm-1-7-3"]], "What\u2019s new in myQLM 1.9.1": [[409, "what-s-new-in-myqlm-1-9-1"]], "What\u2019s new in myQLM 1.9.2": [[409, "what-s-new-in-myqlm-1-9-2"]], "What\u2019s new in myQLM 1.9.3": [[409, "what-s-new-in-myqlm-1-9-3"]], "What\u2019s new in myQLM 1.9.4": [[409, "what-s-new-in-myqlm-1-9-4"]], "What\u2019s new in myQLM 1.9.5": [[409, "what-s-new-in-myqlm-1-9-5"]], "What\u2019s new in myQLM 1.9.6": [[409, "what-s-new-in-myqlm-1-9-6"]], "What\u2019s new in myQLM 1.9.9": [[409, "what-s-new-in-myqlm-1-9-9"]], "Writing patterns": [[53, null]], "Writing quantum programs": [[1, null], [8, null]], "interoperability": [[408, "interoperability"]], "myQLM Installation on MacOS": [[6, null]], "myQLM Power Access": [[409, "myqlm-power-access"]], "myQLM license": [[5, null]], "myQLM \u2013 Quantum Python Package": [[438, null]], "qat": [[56, null]], "qat.comm": [[86, null]], "qat.comm.datamodel": [[87, null]], "qat.comm.datamodel.ttypes.GateDefinition": [[88, null]], "qat.comm.datamodel.ttypes.Op": [[89, null]], "qat.comm.exceptions": [[90, null]], "qat.comm.exceptions.ttypes.ErrorType": [[91, null]], "qat.comm.exceptions.ttypes.GeneratorException": [[92, null]], "qat.comm.exceptions.ttypes.PluginException": [[93, null]], "qat.comm.exceptions.ttypes.QPUException": [[94, null]], "qat.comm.resource": [[95, null]], "qat.comm.resource.ttypes.AllocationModel": [[96, null]], "qat.comm.resource.ttypes.Device": [[97, null]], "qat.comm.resource.ttypes.NodeType": [[98, null]], "qat.comm.resource.ttypes.ResourceModel": [[99, null]], "qat.comm.shared": [[100, null]], "qat.comm.shared.ttypes.IntermediateMeasurement": [[101, null]], "qat.comm.shared.ttypes.ProcessingType": [[102, null]], "qat.core": [[103, null]], "qat.core.Batch": [[107, null]], "qat.core.BatchResult": [[108, null]], "qat.core.Circuit": [[109, null]], "qat.core.HardwareSpecs": [[112, null]], "qat.core.Job": [[113, null]], "qat.core.Observable": [[153, null]], "qat.core.Parameter": [[154, null]], "qat.core.Result": [[156, null]], "qat.core.Sample": [[157, null]], "qat.core.Schedule": [[158, null]], "qat.core.Term": [[160, null]], "qat.core.Topology": [[161, null]], "qat.core.TopologyType": [[162, null]], "qat.core.Variable": [[163, null]], "qat.core.application": [[115, null]], "qat.core.application.Application": [[116, null]], "qat.core.application.RemoteApplication": [[117, null]], "qat.core.assertion.assert_plugin": [[105, null]], "qat.core.assertion.assert_qpu": [[106, null]], "qat.core.circuit_builder": [[118, null]], "qat.core.circuit_builder.builder.VariableNameNotAvailable": [[122, null]], "qat.core.circuit_builder.matrix_util.default_gate_set": [[119, null]], "qat.core.circuit_builder.matrix_util.get_param_generator": [[120, null]], "qat.core.circuit_builder.matrix_util.get_predef_generator": [[121, null]], "qat.core.console.display": [[110, null]], "qat.core.exceptions_utils": [[123, null]], "qat.core.exceptions_utils.exception_only": [[124, null]], "qat.core.exceptions_utils.generator_exception_only": [[125, null]], "qat.core.exceptions_utils.plugin_exception_only": [[126, null]], "qat.core.exceptions_utils.qpu_exception_only": [[127, null]], "qat.core.formula_eval.evaluate": [[111, null]], "qat.core.gate_set": [[128, null]], "qat.core.gate_set.GateSet": [[129, null]], "qat.core.gate_set.GateSignature": [[130, null]], "qat.core.gate_set.GateSyntaxRedefinition": [[131, null]], "qat.core.printer.plot_in_notebook": [[155, null]], "qat.core.qpu": [[132, null]], "qat.core.qpu.CommonQPU": [[133, null]], "qat.core.simutil.wavefunction": [[164, null]], "qat.core.spins": [[134, null]], "qat.core.spins.integer_to_spins": [[135, null]], "qat.core.spins.spins_to_integer": [[136, null]], "qat.core.util.load_state_vector_from_bin": [[114, null]], "qat.core.variables": [[137, null]], "qat.core.variables.ArithExpression": [[140, null]], "qat.core.variables.Symbol": [[151, null]], "qat.core.variables.abso": [[138, null]], "qat.core.variables.angle": [[139, null]], "qat.core.variables.atan2": [[141, null]], "qat.core.variables.cos": [[142, null]], "qat.core.variables.exp": [[143, null]], "qat.core.variables.get_item": [[144, null]], "qat.core.variables.heaviside": [[145, null]], "qat.core.variables.imag": [[146, null]], "qat.core.variables.ln": [[147, null]], "qat.core.variables.real": [[148, null]], "qat.core.variables.sin": [[149, null]], "qat.core.variables.sqrt": [[150, null]], "qat.core.variables.vmax": [[152, null]], "qat.core.wrappers.result.State": [[159, null]], "qat.core.wrappers.result.aggregate_data": [[104, null]], "qat.devices": [[165, null]], "qat.devices.AllToAll": [[166, null]], "qat.devices.GOOGLE_SYCAMORE": [[167, null]], "qat.devices.GridDevice": [[168, null]], "qat.devices.IBM_BURLINGTON": [[169, null]], "qat.devices.IBM_JOHANNESBURG": [[170, null]], "qat.devices.IBM_MELBOURNE": [[171, null]], "qat.devices.IBM_RUESCHLIKON": [[172, null]], "qat.devices.IBM_SINGAPORE": [[173, null]], "qat.devices.IBM_TOKYO": [[174, null]], "qat.devices.IBM_YORKTOWN": [[175, null]], "qat.devices.LineDevice": [[176, null]], "qat.devices.RIGETTI_AGAVE": [[177, null]], "qat.devices.RIGETTI_ASPEN": [[178, null]], "qat.devices.SquareGridDevice": [[179, null]], "qat.devices.ZUCHONGZHI": [[180, null]], "qat.fermion": [[181, null]], "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation": [[204, null]], "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion": [[182, null]], "qat.fermion.chemistry.ucc.compute_active_space_integrals": [[183, null]], "qat.fermion.chemistry.ucc.construct_ucc_ansatz": [[184, null]], "qat.fermion.chemistry.ucc.convert_to_h_integrals": [[185, null]], "qat.fermion.chemistry.ucc.get_cluster_ops": [[188, null]], "qat.fermion.chemistry.ucc.get_hf_ket": [[189, null]], "qat.fermion.chemistry.ucc.guess_init_params": [[190, null]], "qat.fermion.chemistry.ucc.select_active_orbitals": [[205, null]], "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis": [[207, null]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[201, null]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[202, null]], "qat.fermion.circuits.make_compressed_ldca_circ": [[192, null]], "qat.fermion.circuits.make_general_hwe_circ": [[194, null]], "qat.fermion.circuits.make_ldca_circ": [[196, null]], "qat.fermion.circuits.make_mr_circ": [[197, null]], "qat.fermion.circuits.make_mrep_circ": [[198, null]], "qat.fermion.circuits.make_shallow_circ": [[199, null]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[186, null]], "qat.fermion.hamiltonians.FermionHamiltonian": [[187, null]], "qat.fermion.hamiltonians.SpinHamiltonian": [[206, null]], "qat.fermion.hamiltonians.make_anderson_model": [[191, null]], "qat.fermion.hamiltonians.make_embedded_model": [[193, null]], "qat.fermion.hamiltonians.make_hubbard_model": [[195, null]], "qat.fermion.phase_estimation.perform_phase_estimation": [[203, null]], "qat.fermion.transforms.transform_to_bk_basis": [[208, null]], "qat.fermion.transforms.transform_to_jw_basis": [[209, null]], "qat.fermion.transforms.transform_to_parity_basis": [[210, null]], "qat.fermion.trotterisation.make_trotterisation_routine": [[200, null]], "qat.fusion": [[211, null]], "qat.fusion.strategies.AdjacentStrategy": [[212, null]], "qat.fusion.strategies.EagerStrategy": [[213, null]], "qat.fusion.strategies.NaiveStrategy": [[214, null]], "qat.generators": [[215, null]], "qat.generators.AbstractGenerator": [[216, null]], "qat.generators.CombinatorialOptimizerGenerator": [[217, null]], "qat.generators.GraphColouringGenerator": [[218, null]], "qat.generators.GraphPartitioningGenerator": [[219, null]], "qat.generators.KCliqueGenerator": [[220, null]], "qat.generators.MaxCutGenerator": [[221, null]], "qat.generators.RemoteBatchGenerator": [[222, null]], "qat.generators.VertexCoverGenerator": [[223, null]], "qat.hardware": [[224, null]], "qat.hardware.DefaultGatesSpecification": [[225, null]], "qat.hardware.DefaultHardwareModel": [[226, null]], "qat.hardware.GatesSpecification": [[227, null]], "qat.hardware.HardwareModel": [[228, null]], "qat.hardware.make_depolarizing_hardware_model": [[229, null]], "qat.interop": [[57, null]], "qat.interop.cirq": [[58, null]], "qat.interop.cirq.cirq_to_qlm": [[59, null]], "qat.interop.cirq.qlm_to_cirq": [[60, null]], "qat.interop.openqasm": [[61, null]], "qat.interop.openqasm.OqasmParser": [[62, null]], "qat.interop.projectq": [[63, null]], "qat.interop.projectq.AqasmEngine": [[64, null]], "qat.interop.projectq.AqasmPrinter": [[65, null]], "qat.interop.pyquil": [[66, null]], "qat.interop.pyquil.PyquilQPU": [[68, null]], "qat.interop.pyquil.pyquil_to_qlm": [[67, null]], "qat.interop.pyquil.qlm_to_pyquil": [[69, null]], "qat.interop.qiskit": [[70, null]], "qat.interop.qiskit.AsyncBackendToQPU": [[71, null]], "qat.interop.qiskit.BackendToQPU": [[72, null]], "qat.interop.qiskit.QPUToBackend": [[77, null]], "qat.interop.qiskit.QiskitJob": [[74, null]], "qat.interop.qiskit.qiskit_to_qlm": [[73, null]], "qat.interop.qiskit.qlm_to_qiskit": [[76, null]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[75, null]], "qat.lang": [[230, null]], "qat.lang.AQASM.arithmetic": [[243, null]], "qat.lang.AQASM.arithmetic.add_const_mod": [[244, null]], "qat.lang.AQASM.arithmetic.add_mod": [[245, null]], "qat.lang.AQASM.arithmetic.modular_exp": [[246, null]], "qat.lang.AQASM.arithmetic.mult_const": [[247, null]], "qat.lang.AQASM.arithmetic.mult_const_mod": [[248, null]], "qat.lang.AQASM.bits.BoolFormula": [[233, null]], "qat.lang.AQASM.bits.CRegister": [[236, null]], "qat.lang.AQASM.bits.Cbit": [[235, null]], "qat.lang.AQASM.bits.QRegister": [[270, null]], "qat.lang.AQASM.bits.Qbit": [[263, null]], "qat.lang.AQASM.classarith": [[249, null]], "qat.lang.AQASM.classarith.add": [[250, null]], "qat.lang.AQASM.classarith.add_const": [[251, null]], "qat.lang.AQASM.classarith.cuccaro_add": [[252, null]], "qat.lang.AQASM.gates.Gate": [[237, null]], "qat.lang.AQASM.gates.ParamGate": [[259, null]], "qat.lang.AQASM.misc.generate_gate_set": [[238, null]], "qat.lang.AQASM.qbool.QBool": [[264, null]], "qat.lang.AQASM.qbool.QBoolArray": [[265, null]], "qat.lang.AQASM.qbool.QClause": [[266, null]], "qat.lang.AQASM.qftarith": [[253, null]], "qat.lang.AQASM.qftarith.QFT": [[258, null]], "qat.lang.AQASM.qftarith.add": [[254, null]], "qat.lang.AQASM.qftarith.add_const": [[255, null]], "qat.lang.AQASM.qftarith.mult": [[256, null]], "qat.lang.AQASM.qftarith.mult_const": [[257, null]], "qat.lang.AQASM.qint.QArithExp": [[262, null]], "qat.lang.AQASM.qint.QCompExp": [[267, null]], "qat.lang.AQASM.qint.QInt": [[269, null]], "qat.lang.AbstractGate": [[231, null]], "qat.lang.Program": [[261, null]], "qat.lang.QRoutine": [[272, null]], "qat.lang.algorithms.amplification.grover_diffusion": [[239, null]], "qat.lang.algorithms.amplification.householder": [[240, null]], "qat.lang.algorithms.amplification.uniform_distribution": [[274, null]], "qat.lang.algorithms.amplification_step": [[232, null]], "qat.lang.algorithms.phase_estimation": [[260, null]], "qat.lang.algorithms.quantum_counting": [[273, null]], "qat.lang.build_gate": [[234, null]], "qat.lang.linking.Linker": [[242, null]], "qat.lang.models.KPTree": [[241, null]], "qat.lang.qfunc": [[268, null]], "qat.lang.qrout": [[271, null]], "qat.nnize": [[275, null]], "qat.nnize.metric.DurationMetric": [[276, null]], "qat.nnize.metric.QuantumCostMetric": [[277, null]], "qat.opt": [[278, null]], "qat.opt.BILP": [[280, null]], "qat.opt.CombinatorialProblem": [[283, null]], "qat.opt.GraphColouring": [[284, null]], "qat.opt.GraphPartitioning": [[285, null]], "qat.opt.Ising": [[286, null]], "qat.opt.KClique": [[287, null]], "qat.opt.MWIS": [[299, null]], "qat.opt.MaxCut": [[288, null]], "qat.opt.MixingFactory": [[289, null]], "qat.opt.NumberPartitioning": [[300, null]], "qat.opt.QUBO": [[301, null]], "qat.opt.VertexCover": [[304, null]], "qat.opt.boolexpr.Clause": [[282, null]], "qat.opt.boolexpr.Var": [[303, null]], "qat.opt.circuit_generator.CircuitGenerator": [[281, null]], "qat.opt.mixing_factory": [[290, null]], "qat.opt.mixing_factory.IndependentAQO": [[291, null]], "qat.opt.mixing_factory.InitialStateBuilder": [[292, null]], "qat.opt.mixing_factory.SimpleInitialState": [[293, null]], "qat.opt.results": [[294, null]], "qat.opt.results.CombinatorialResult": [[295, null]], "qat.opt.results.GraphPartitioningResult": [[296, null]], "qat.opt.results.KCliqueResult": [[297, null]], "qat.opt.results.VertexCoverResult": [[298, null]], "qat.opt.schedule_generator.ScheduleGenerator": [[302, null]], "qat.pbo": [[305, null]], "qat.pbo.AbstractRegister": [[306, null]], "qat.pbo.GateName": [[307, null]], "qat.pbo.GraphCircuit": [[308, null]], "qat.pbo.PatternGroup": [[319, null]], "qat.pbo.VAR": [[320, null]], "qat.pbo.collections": [[310, null]], "qat.pbo.collections.collection_from_target": [[311, null]], "qat.pbo.decompositions": [[312, null]], "qat.pbo.decompositions.decompositions.get_euler_angles": [[313, null]], "qat.pbo.decompositions.ions_decomposition": [[314, null]], "qat.pbo.decompositions.u3_decomposition": [[315, null]], "qat.pbo.decompositions.xzx_decomposition": [[316, null]], "qat.pbo.decompositions.zxz_decomposition": [[317, null]], "qat.pbo.decompositions.zyz_decomposition": [[318, null]], "qat.pbo.kak.list_decompositions": [[309, null]], "qat.plugins": [[321, null]], "qat.plugins.AbstractPlugin": [[322, null]], "qat.plugins.AdaptVQEPlugin": [[323, null]], "qat.plugins.CircuitInliner": [[324, null]], "qat.plugins.CostFunctionPlugin": [[325, null]], "qat.plugins.Display": [[326, null]], "qat.plugins.FusionPlugin": [[327, null]], "qat.plugins.GateRewriter": [[328, null]], "qat.plugins.GradientDescentOptimizer": [[329, null]], "qat.plugins.InitialMapping": [[330, null]], "qat.plugins.Junction": [[331, null]], "qat.plugins.KAKCompression": [[332, null]], "qat.plugins.LazySynthesis": [[333, null]], "qat.plugins.MultipleLaunchesAnalyzer": [[334, null]], "qat.plugins.NISQCompiler": [[335, null]], "qat.plugins.Nnizer": [[336, null]], "qat.plugins.ObservableSplitter": [[337, null]], "qat.plugins.Optimizer": [[338, null]], "qat.plugins.PSOMinimizePlugin": [[340, null]], "qat.plugins.PatternManager": [[339, null]], "qat.plugins.QuameleonPlugin": [[341, null]], "qat.plugins.Remap": [[342, null]], "qat.plugins.RemotePlugin": [[343, null]], "qat.plugins.SPSAMinimizePlugin": [[346, null]], "qat.plugins.ScipyMinimizePlugin": [[344, null]], "qat.plugins.SeqOptim": [[345, null]], "qat.plugins.TransformObservable": [[347, null]], "qat.plugins.ZeroNoiseExtrapolator": [[348, null]], "qat.pylinalg": [[78, null]], "qat.pylinalg.simulator": [[79, null]], "qat.pylinalg.simulator.mat2nparray": [[80, null]], "qat.pylinalg.simulator.measure": [[81, null]], "qat.pylinalg.simulator.project": [[82, null]], "qat.pylinalg.simulator.raise_break": [[83, null]], "qat.pylinalg.simulator.reset": [[84, null]], "qat.pylinalg.simulator.simulate": [[85, null]], "qat.qpus": [[349, null]], "qat.qpus.CLinalg": [[350, null]], "qat.qpus.ClassicalQPU": [[353, null]], "qat.qpus.PyLinalg": [[351, null]], "qat.qpus.QPUHandler": [[356, null]], "qat.qpus.RemoteQPU": [[357, null]], "qat.qpus.SimulatedAnnealing": [[352, null]], "qat.qpus.get_current_qpu": [[354, null]], "qat.qpus.get_default_qpu": [[355, null]], "qat.quops": [[358, null]], "qat.quops.ChannelRepresentations": [[360, null]], "qat.quops.ParametricAmplitudeDamping": [[380, null]], "qat.quops.ParametricGateNoise": [[381, null]], "qat.quops.ParametricPureDephasing": [[382, null]], "qat.quops.ParametricQuantumChannel": [[383, null]], "qat.quops.QuantumChannel": [[385, null]], "qat.quops.QuantumChannelChi": [[386, null]], "qat.quops.QuantumChannelChoi": [[387, null]], "qat.quops.QuantumChannelKraus": [[388, null]], "qat.quops.QuantumChannelPTM": [[389, null]], "qat.quops.is_completely_positive": [[369, null]], "qat.quops.is_trace_preserving": [[370, null]], "qat.quops.is_trace_reducing": [[371, null]], "qat.quops.is_unital": [[372, null]], "qat.quops.make_avg_fid_equiv_depol_channel": [[373, null]], "qat.quops.make_depolarizing_channel": [[374, null]], "qat.quops.make_generalized_amplitude_damping": [[375, null]], "qat.quops.math_util.are_equal_up_to_phase": [[359, null]], "qat.quops.math_util.convert_density_mat_to_pauli_vec": [[361, null]], "qat.quops.math_util.convert_pauli_vec_to_density_mat": [[362, null]], "qat.quops.math_util.make_pauli_matrix_basis": [[376, null]], "qat.quops.math_util.make_standard_matrix_basis": [[377, null]], "qat.quops.math_util.make_standard_vector_basis": [[378, null]], "qat.quops.math_util.multikron": [[379, null]], "qat.quops.math_util.partial_trace": [[384, null]], "qat.quops.metrics.get_average_process_fidelity": [[363, null]], "qat.quops.metrics.get_diamond_norm": [[364, null]], "qat.quops.metrics.get_entanglement_process_fidelity": [[365, null]], "qat.quops.metrics.get_process_distance": [[366, null]], "qat.quops.metrics.get_state_fidelity": [[367, null]], "qat.quops.metrics.get_trace_distance": [[368, null]], "qat.synthopline": [[390, null]], "qat.synthopline.clifford_normalizer.CliffordNormalizer": [[391, null]], "qat.synthopline.co_diagonalization.codiagonalize_with_architecture": [[392, null]], "qat.synthopline.co_diagonalization.synthesize_stabilizer_state": [[406, null]], "qat.synthopline.generate_trotter_ansatz": [[399, null]], "qat.synthopline.initial_mapping.frequency_mapping": [[397, null]], "qat.synthopline.initial_mapping.greedy_mapping": [[400, null]], "qat.synthopline.interface.OperatorTableau": [[402, null]], "qat.synthopline.interface.WeylOperator": [[407, null]], "qat.synthopline.linear_operator_synthesis": [[401, null]], "qat.synthopline.linear_synthesis.extract_linear_operator": [[394, null]], "qat.synthopline.linear_synthesis.random_linear_operator": [[404, null]], "qat.synthopline.pauli_synth.generate_random_observable": [[398, null]], "qat.synthopline.phase_polynomial_synthesis": [[403, null]], "qat.synthopline.phase_polynomials.extract_phase_polynomial": [[396, null]], "qat.synthopline.phase_polynomials.random_phase_polynomial": [[405, null]], "qat.synthopline.util.conjugate_observable_tableau": [[393, null]], "qat.synthopline.util.extract_pauli_rotations": [[395, null]], "qat.vsolve.ansatz.AnsatzFactory": [[279, null]]}, "docnames": ["01_getting_started", "01_getting_started/02_write", "01_getting_started/03_execute", "01_getting_started/04_variational", "01_getting_started/:myqlm:01_install", "01_getting_started/:myqlm:license", "01_getting_started/:myqlm:macos", "02_user_guide", "02_user_guide/01_write", "02_user_guide/01_write/01_digital_circuit", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates", "02_user_guide/01_write/01_digital_circuit/02_variational", "02_user_guide/01_write/01_digital_circuit/03_program", "02_user_guide/01_write/01_digital_circuit/04_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles", "02_user_guide/01_write/01_digital_circuit/05_aqasm", "02_user_guide/01_write/02_analog_schedule", "02_user_guide/01_write/02_analog_schedule/01_building_schedules", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules", "02_user_guide/01_write/02_analog_schedule/03_an_jobs", "02_user_guide/01_write/03_annealing_problems", "02_user_guide/01_write/03_annealing_problems/01_ising", "02_user_guide/01_write/03_annealing_problems/02_qubo", "02_user_guide/01_write/03_annealing_problems/03_comb_prob", "02_user_guide/01_write/03_observable", "02_user_guide/02_execute", "02_user_guide/02_execute/01_job", "02_user_guide/02_execute/01_job/01_sample_job", "02_user_guide/02_execute/01_job/02_observable_job", "02_user_guide/02_execute/01_job/03_automated_batch_generation", "02_user_guide/02_execute/02_result", "02_user_guide/02_execute/03_qpu", "02_user_guide/02_execute/03_qpu/03_annealing", "02_user_guide/02_execute/03_qpu/04_custom_qpu", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg", "02_user_guide/02_execute/04_plugin", "02_user_guide/02_execute/04_plugin/01_custom_plugin", "02_user_guide/02_execute/04_plugin/02_custom_junction", "02_user_guide/02_execute/04_plugin/03_hardware_specs", "02_user_guide/02_execute/05_variational", "02_user_guide/03_compile", "02_user_guide/03_compile/01_compilers", "02_user_guide/03_compile/01_compilers/01_lazy", "02_user_guide/03_compile/01_compilers/02_mapping", "02_user_guide/03_compile/01_compilers/03_nnize", "02_user_guide/03_compile/02_rewrite", "02_user_guide/03_compile/02_rewrite/01_low_level", "02_user_guide/03_compile/02_rewrite/02_high_level", "02_user_guide/03_compile/02_rewrite/03_kak", "02_user_guide/03_compile/02_rewrite/04_patterns", "02_user_guide/03_compile/02_rewrite/05_collections", "04_api_reference", "04_api_reference/module_qat", "04_api_reference/module_qat/:myqlm:module_interop", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmprinter", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend", "04_api_reference/module_qat/:myqlm:module_pylinalg", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate", "04_api_reference/module_qat/module_comm", "04_api_reference/module_qat/module_comm/module_datamodel", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition", "04_api_reference/module_qat/module_comm/module_datamodel/op", "04_api_reference/module_qat/module_comm/module_exceptions", "04_api_reference/module_qat/module_comm/module_exceptions/errortype", "04_api_reference/module_qat/module_comm/module_exceptions/generatorexception", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception", "04_api_reference/module_qat/module_comm/module_resource", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel", "04_api_reference/module_qat/module_comm/module_resource/device", "04_api_reference/module_qat/module_comm/module_resource/nodetype", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel", "04_api_reference/module_qat/module_comm/module_shared", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement", "04_api_reference/module_qat/module_comm/module_shared/processingtype", "04_api_reference/module_qat/module_core", "04_api_reference/module_qat/module_core/aggregate_data", "04_api_reference/module_qat/module_core/assert_plugin", "04_api_reference/module_qat/module_core/assert_qpu", "04_api_reference/module_qat/module_core/batch", "04_api_reference/module_qat/module_core/batchresult", "04_api_reference/module_qat/module_core/circuit", "04_api_reference/module_qat/module_core/display", "04_api_reference/module_qat/module_core/evaluate", "04_api_reference/module_qat/module_core/hardwarespecs", "04_api_reference/module_qat/module_core/job", "04_api_reference/module_qat/module_core/load_state_vector_from_bin", "04_api_reference/module_qat/module_core/module_application", "04_api_reference/module_qat/module_core/module_application/application", "04_api_reference/module_qat/module_core/module_application/remoteapplication", "04_api_reference/module_qat/module_core/module_circuit_builder", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable", "04_api_reference/module_qat/module_core/module_exceptions_utils", "04_api_reference/module_qat/module_core/module_exceptions_utils/exception_only", "04_api_reference/module_qat/module_core/module_exceptions_utils/generator_exception_only", "04_api_reference/module_qat/module_core/module_exceptions_utils/plugin_exception_only", "04_api_reference/module_qat/module_core/module_exceptions_utils/qpu_exception_only", "04_api_reference/module_qat/module_core/module_gate_set", "04_api_reference/module_qat/module_core/module_gate_set/gateset", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition", "04_api_reference/module_qat/module_core/module_qpu", "04_api_reference/module_qat/module_core/module_qpu/commonqpu", "04_api_reference/module_qat/module_core/module_spins", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer", "04_api_reference/module_qat/module_core/module_variables", "04_api_reference/module_qat/module_core/module_variables/abso", "04_api_reference/module_qat/module_core/module_variables/angle", "04_api_reference/module_qat/module_core/module_variables/arithexpression", "04_api_reference/module_qat/module_core/module_variables/atan2", "04_api_reference/module_qat/module_core/module_variables/cos", "04_api_reference/module_qat/module_core/module_variables/exp", "04_api_reference/module_qat/module_core/module_variables/get_item", "04_api_reference/module_qat/module_core/module_variables/heaviside", "04_api_reference/module_qat/module_core/module_variables/imag", "04_api_reference/module_qat/module_core/module_variables/ln", "04_api_reference/module_qat/module_core/module_variables/real", "04_api_reference/module_qat/module_core/module_variables/sin", "04_api_reference/module_qat/module_core/module_variables/sqrt", "04_api_reference/module_qat/module_core/module_variables/symbol", "04_api_reference/module_qat/module_core/module_variables/vmax", "04_api_reference/module_qat/module_core/observable", "04_api_reference/module_qat/module_core/parameter", "04_api_reference/module_qat/module_core/plot_in_notebook", "04_api_reference/module_qat/module_core/result", "04_api_reference/module_qat/module_core/sample", "04_api_reference/module_qat/module_core/schedule", "04_api_reference/module_qat/module_core/state", "04_api_reference/module_qat/module_core/term", "04_api_reference/module_qat/module_core/topology", "04_api_reference/module_qat/module_core/topologytype", "04_api_reference/module_qat/module_core/variable", "04_api_reference/module_qat/module_core/wavefunction", "04_api_reference/module_qat/module_devices", "04_api_reference/module_qat/module_devices/alltoall", "04_api_reference/module_qat/module_devices/google_sycamore", "04_api_reference/module_qat/module_devices/griddevice", "04_api_reference/module_qat/module_devices/ibm_burlington", "04_api_reference/module_qat/module_devices/ibm_johannesburg", "04_api_reference/module_qat/module_devices/ibm_melbourne", "04_api_reference/module_qat/module_devices/ibm_rueschlikon", "04_api_reference/module_qat/module_devices/ibm_singapore", "04_api_reference/module_qat/module_devices/ibm_tokyo", "04_api_reference/module_qat/module_devices/ibm_yorktown", "04_api_reference/module_qat/module_devices/linedevice", "04_api_reference/module_qat/module_devices/rigetti_agave", "04_api_reference/module_qat/module_devices/rigetti_aspen", "04_api_reference/module_qat/module_devices/squaregriddevice", "04_api_reference/module_qat/module_devices/zuchongzhi", "04_api_reference/module_qat/module_fermion", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian", "04_api_reference/module_qat/module_fermion/fermionhamiltonian", "04_api_reference/module_qat/module_fermion/get_cluster_ops", "04_api_reference/module_qat/module_fermion/get_hf_ket", "04_api_reference/module_qat/module_fermion/guess_init_params", "04_api_reference/module_qat/module_fermion/make_anderson_model", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ", "04_api_reference/module_qat/module_fermion/make_embedded_model", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ", "04_api_reference/module_qat/module_fermion/make_hubbard_model", "04_api_reference/module_qat/module_fermion/make_ldca_circ", "04_api_reference/module_qat/module_fermion/make_mr_circ", "04_api_reference/module_qat/module_fermion/make_mrep_circ", "04_api_reference/module_qat/module_fermion/make_shallow_circ", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine", "04_api_reference/module_qat/module_fermion/molecularhamiltonian", "04_api_reference/module_qat/module_fermion/moleculeinfo", "04_api_reference/module_qat/module_fermion/perform_phase_estimation", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation", "04_api_reference/module_qat/module_fermion/select_active_orbitals", "04_api_reference/module_qat/module_fermion/spinhamiltonian", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis", "04_api_reference/module_qat/module_fusion", "04_api_reference/module_qat/module_fusion/adjacentstrategy", "04_api_reference/module_qat/module_fusion/eagerstrategy", "04_api_reference/module_qat/module_fusion/naivestrategy", "04_api_reference/module_qat/module_generators", "04_api_reference/module_qat/module_generators/abstractgenerator", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator", "04_api_reference/module_qat/module_generators/graphcolouringgenerator", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator", "04_api_reference/module_qat/module_generators/kcliquegenerator", "04_api_reference/module_qat/module_generators/maxcutgenerator", "04_api_reference/module_qat/module_generators/remotebatchgenerator", "04_api_reference/module_qat/module_generators/vertexcovergenerator", "04_api_reference/module_qat/module_hardware", "04_api_reference/module_qat/module_hardware/defaultgatesspecification", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel", "04_api_reference/module_qat/module_hardware/gatesspecification", "04_api_reference/module_qat/module_hardware/hardwaremodel", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model", "04_api_reference/module_qat/module_lang", "04_api_reference/module_qat/module_lang/abstractgate", "04_api_reference/module_qat/module_lang/amplification_step", "04_api_reference/module_qat/module_lang/boolformula", "04_api_reference/module_qat/module_lang/build_gate", "04_api_reference/module_qat/module_lang/cbit", "04_api_reference/module_qat/module_lang/cregister", "04_api_reference/module_qat/module_lang/gate", "04_api_reference/module_qat/module_lang/generate_gate_set", "04_api_reference/module_qat/module_lang/grover_diffusion", "04_api_reference/module_qat/module_lang/householder", "04_api_reference/module_qat/module_lang/kptree", "04_api_reference/module_qat/module_lang/linker", "04_api_reference/module_qat/module_lang/module_arithmetic", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod", "04_api_reference/module_qat/module_lang/module_classarith", "04_api_reference/module_qat/module_lang/module_classarith/add", "04_api_reference/module_qat/module_lang/module_classarith/add_const", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add", "04_api_reference/module_qat/module_lang/module_qftarith", "04_api_reference/module_qat/module_lang/module_qftarith/add", "04_api_reference/module_qat/module_lang/module_qftarith/add_const", "04_api_reference/module_qat/module_lang/module_qftarith/mult", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const", "04_api_reference/module_qat/module_lang/module_qftarith/qft", "04_api_reference/module_qat/module_lang/paramgate", "04_api_reference/module_qat/module_lang/phase_estimation", "04_api_reference/module_qat/module_lang/program", "04_api_reference/module_qat/module_lang/qarithexp", "04_api_reference/module_qat/module_lang/qbit", "04_api_reference/module_qat/module_lang/qbool", "04_api_reference/module_qat/module_lang/qboolarray", "04_api_reference/module_qat/module_lang/qclause", "04_api_reference/module_qat/module_lang/qcompexp", "04_api_reference/module_qat/module_lang/qfunc", "04_api_reference/module_qat/module_lang/qint", "04_api_reference/module_qat/module_lang/qregister", "04_api_reference/module_qat/module_lang/qrout", "04_api_reference/module_qat/module_lang/qroutine", "04_api_reference/module_qat/module_lang/quantum_counting", "04_api_reference/module_qat/module_lang/uniform_distribution", "04_api_reference/module_qat/module_nnize", "04_api_reference/module_qat/module_nnize/durationmetric", "04_api_reference/module_qat/module_nnize/quantumcostmetric", "04_api_reference/module_qat/module_opt", "04_api_reference/module_qat/module_opt/ansatzfactory", "04_api_reference/module_qat/module_opt/bilp", "04_api_reference/module_qat/module_opt/circuitgenerator", "04_api_reference/module_qat/module_opt/clause", "04_api_reference/module_qat/module_opt/combinatorialproblem", "04_api_reference/module_qat/module_opt/graphcolouring", "04_api_reference/module_qat/module_opt/graphpartitioning", "04_api_reference/module_qat/module_opt/ising", "04_api_reference/module_qat/module_opt/kclique", "04_api_reference/module_qat/module_opt/maxcut", "04_api_reference/module_qat/module_opt/mixingfactory", "04_api_reference/module_qat/module_opt/module_mixing_factory", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentaqo", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate", "04_api_reference/module_qat/module_opt/module_results", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult", "04_api_reference/module_qat/module_opt/mwis", "04_api_reference/module_qat/module_opt/numberpartitioning", "04_api_reference/module_qat/module_opt/qubo", "04_api_reference/module_qat/module_opt/schedulegenerator", "04_api_reference/module_qat/module_opt/var", "04_api_reference/module_qat/module_opt/vertexcover", "04_api_reference/module_qat/module_pbo", "04_api_reference/module_qat/module_pbo/abstractregister", "04_api_reference/module_qat/module_pbo/gatename", "04_api_reference/module_qat/module_pbo/graphcircuit", "04_api_reference/module_qat/module_pbo/list_decompositions", "04_api_reference/module_qat/module_pbo/module_collections", "04_api_reference/module_qat/module_pbo/module_collections/collection_from_target", "04_api_reference/module_qat/module_pbo/module_decomposition", "04_api_reference/module_qat/module_pbo/module_decomposition/get_euler_angles", "04_api_reference/module_qat/module_pbo/module_decomposition/ions_decomposition", "04_api_reference/module_qat/module_pbo/module_decomposition/u3_decomposition", "04_api_reference/module_qat/module_pbo/module_decomposition/xzx_decomposition", "04_api_reference/module_qat/module_pbo/module_decomposition/zxz_decomposition", "04_api_reference/module_qat/module_pbo/module_decomposition/zyz_decomposition", "04_api_reference/module_qat/module_pbo/patterngroup", "04_api_reference/module_qat/module_pbo/var", "04_api_reference/module_qat/module_plugins", "04_api_reference/module_qat/module_plugins/abstractplugin", "04_api_reference/module_qat/module_plugins/adaptvqeplugin", "04_api_reference/module_qat/module_plugins/circuitinliner", "04_api_reference/module_qat/module_plugins/costfunctionplugin", "04_api_reference/module_qat/module_plugins/display", "04_api_reference/module_qat/module_plugins/fusionplugin", "04_api_reference/module_qat/module_plugins/gaterewriter", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer", "04_api_reference/module_qat/module_plugins/initialmapping", "04_api_reference/module_qat/module_plugins/junction", "04_api_reference/module_qat/module_plugins/kakcompression", "04_api_reference/module_qat/module_plugins/lazysynthesis", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer", "04_api_reference/module_qat/module_plugins/nisqcompiler", "04_api_reference/module_qat/module_plugins/nnizer", "04_api_reference/module_qat/module_plugins/observablesplitter", "04_api_reference/module_qat/module_plugins/optimizer", "04_api_reference/module_qat/module_plugins/patternmanager", "04_api_reference/module_qat/module_plugins/psominimizeplugin", "04_api_reference/module_qat/module_plugins/quameleonplugin", "04_api_reference/module_qat/module_plugins/remap", "04_api_reference/module_qat/module_plugins/remoteplugin", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin", "04_api_reference/module_qat/module_plugins/seqoptim", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin", "04_api_reference/module_qat/module_plugins/transformobservable", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator", "04_api_reference/module_qat/module_qpus", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing", "04_api_reference/module_qat/module_qpus/classicalqpu", "04_api_reference/module_qat/module_qpus/get_current_qpu", "04_api_reference/module_qat/module_qpus/get_default_qpu", "04_api_reference/module_qat/module_qpus/qpuhandler", "04_api_reference/module_qat/module_qpus/remoteqpu", "04_api_reference/module_qat/module_quops", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase", "04_api_reference/module_qat/module_quops/channelrepresentations", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat", "04_api_reference/module_qat/module_quops/get_average_process_fidelity", "04_api_reference/module_qat/module_quops/get_diamond_norm", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity", "04_api_reference/module_qat/module_quops/get_process_distance", "04_api_reference/module_qat/module_quops/get_state_fidelity", "04_api_reference/module_qat/module_quops/get_trace_distance", "04_api_reference/module_qat/module_quops/is_completely_positive", "04_api_reference/module_qat/module_quops/is_trace_preserving", "04_api_reference/module_qat/module_quops/is_trace_reducing", "04_api_reference/module_qat/module_quops/is_unital", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel", "04_api_reference/module_qat/module_quops/make_depolarizing_channel", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_vector_basis", "04_api_reference/module_qat/module_quops/multikron", "04_api_reference/module_qat/module_quops/parametricamplitudedamping", "04_api_reference/module_qat/module_quops/parametricgatenoise", "04_api_reference/module_qat/module_quops/parametricpuredephasing", "04_api_reference/module_qat/module_quops/parametricquantumchannel", "04_api_reference/module_qat/module_quops/partial_trace", "04_api_reference/module_qat/module_quops/quantumchannel", "04_api_reference/module_qat/module_quops/quantumchannelchi", "04_api_reference/module_qat/module_quops/quantumchannelchoi", "04_api_reference/module_qat/module_quops/quantumchannelkraus", "04_api_reference/module_qat/module_quops/quantumchannelptm", "04_api_reference/module_qat/module_synthopline", "04_api_reference/module_qat/module_synthopline/cliffordnormalizer", "04_api_reference/module_qat/module_synthopline/codiagonalize_with_architecture", "04_api_reference/module_qat/module_synthopline/conjugate_observable_tableau", "04_api_reference/module_qat/module_synthopline/extract_linear_operator", "04_api_reference/module_qat/module_synthopline/extract_pauli_rotations", "04_api_reference/module_qat/module_synthopline/extract_phase_polynomial", "04_api_reference/module_qat/module_synthopline/frequency_mapping", "04_api_reference/module_qat/module_synthopline/generate_random_observable", "04_api_reference/module_qat/module_synthopline/generate_trotter_ansatz", "04_api_reference/module_qat/module_synthopline/greedy_mapping", "04_api_reference/module_qat/module_synthopline/linear_operator_synthesis", "04_api_reference/module_qat/module_synthopline/operatortableau", "04_api_reference/module_qat/module_synthopline/phase_polynomial_synthesis", "04_api_reference/module_qat/module_synthopline/random_linear_operator", "04_api_reference/module_qat/module_synthopline/random_phase_polynomial", "04_api_reference/module_qat/module_synthopline/synthesize_stabilizer_state", "04_api_reference/module_qat/module_synthopline/weyloperator", "05_demos", "07_release_notes", ":myqlm:06_support", ":myqlm:interoperability", ":myqlm:interoperability/01_qiskit", ":myqlm:interoperability/02_pyquil", ":myqlm:interoperability/03_cirq", ":myqlm:interoperability/04_projectq", ":myqlm:interoperability/05_openqasm", "combinatorial_optim_applic", "combinatorial_optim_applic/01_np_probs_for_annealing", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob", "combinatorial_optim_applic/02_qaoa", "combinatorial_optim_applic/03_aqo", "combinatorial_optim_applic/04_crossing_lattice", "combinatorial_optim_applic/05_np_problem_generators", "combinatorial_optim_applic/05_np_problem_generators/01_max_cut_generator", "combinatorial_optim_applic/05_np_problem_generators/02_graph_partitioning_generator", "combinatorial_optim_applic/05_np_problem_generators/03_kclique_generator", "combinatorial_optim_applic/05_np_problem_generators/04_vertex_cover_generator", "combinatorial_optim_applic/05_np_problem_generators/05_graph_colouring_generator", "fermion", "fermion/01_hamiltonians", "fermion/02_algorithms", "fermion/03_plugins", "fermion/04_migrating", "index", "interoperability_annealing"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9}, "filenames": ["01_getting_started.rst", "01_getting_started/02_write.rst", "01_getting_started/03_execute.rst", "01_getting_started/04_variational.rst", "01_getting_started/:myqlm:01_install.rst", "01_getting_started/:myqlm:license.rst", "01_getting_started/:myqlm:macos.rst", "02_user_guide.rst", "02_user_guide/01_write.rst", "02_user_guide/01_write/01_digital_circuit.rst", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates.rst", "02_user_guide/01_write/01_digital_circuit/02_variational.rst", "02_user_guide/01_write/01_digital_circuit/03_program.rst", "02_user_guide/01_write/01_digital_circuit/04_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles.rst", "02_user_guide/01_write/01_digital_circuit/05_aqasm.rst", "02_user_guide/01_write/02_analog_schedule.rst", "02_user_guide/01_write/02_analog_schedule/01_building_schedules.rst", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules.rst", "02_user_guide/01_write/02_analog_schedule/03_an_jobs.rst", "02_user_guide/01_write/03_annealing_problems.rst", "02_user_guide/01_write/03_annealing_problems/01_ising.rst", "02_user_guide/01_write/03_annealing_problems/02_qubo.rst", "02_user_guide/01_write/03_annealing_problems/03_comb_prob.rst", "02_user_guide/01_write/03_observable.rst", "02_user_guide/02_execute.rst", "02_user_guide/02_execute/01_job.rst", "02_user_guide/02_execute/01_job/01_sample_job.rst", "02_user_guide/02_execute/01_job/02_observable_job.rst", "02_user_guide/02_execute/01_job/03_automated_batch_generation.rst", "02_user_guide/02_execute/02_result.rst", "02_user_guide/02_execute/03_qpu.rst", "02_user_guide/02_execute/03_qpu/03_annealing.rst", "02_user_guide/02_execute/03_qpu/04_custom_qpu.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg.rst", "02_user_guide/02_execute/04_plugin.rst", "02_user_guide/02_execute/04_plugin/01_custom_plugin.rst", "02_user_guide/02_execute/04_plugin/02_custom_junction.rst", "02_user_guide/02_execute/04_plugin/03_hardware_specs.rst", "02_user_guide/02_execute/05_variational.rst", "02_user_guide/03_compile.rst", "02_user_guide/03_compile/01_compilers.rst", "02_user_guide/03_compile/01_compilers/01_lazy.rst", "02_user_guide/03_compile/01_compilers/02_mapping.rst", "02_user_guide/03_compile/01_compilers/03_nnize.rst", "02_user_guide/03_compile/02_rewrite.rst", "02_user_guide/03_compile/02_rewrite/01_low_level.rst", "02_user_guide/03_compile/02_rewrite/02_high_level.rst", "02_user_guide/03_compile/02_rewrite/03_kak.rst", "02_user_guide/03_compile/02_rewrite/04_patterns.rst", "02_user_guide/03_compile/02_rewrite/05_collections.rst", "04_api_reference.rst", "04_api_reference/module_qat.rst", "04_api_reference/module_qat/:myqlm:module_interop.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmprinter.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate.rst", "04_api_reference/module_qat/module_comm.rst", "04_api_reference/module_qat/module_comm/module_datamodel.rst", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition.rst", "04_api_reference/module_qat/module_comm/module_datamodel/op.rst", "04_api_reference/module_qat/module_comm/module_exceptions.rst", "04_api_reference/module_qat/module_comm/module_exceptions/errortype.rst", "04_api_reference/module_qat/module_comm/module_exceptions/generatorexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception.rst", "04_api_reference/module_qat/module_comm/module_resource.rst", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel.rst", "04_api_reference/module_qat/module_comm/module_resource/device.rst", "04_api_reference/module_qat/module_comm/module_resource/nodetype.rst", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel.rst", "04_api_reference/module_qat/module_comm/module_shared.rst", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement.rst", "04_api_reference/module_qat/module_comm/module_shared/processingtype.rst", "04_api_reference/module_qat/module_core.rst", "04_api_reference/module_qat/module_core/aggregate_data.rst", "04_api_reference/module_qat/module_core/assert_plugin.rst", "04_api_reference/module_qat/module_core/assert_qpu.rst", "04_api_reference/module_qat/module_core/batch.rst", "04_api_reference/module_qat/module_core/batchresult.rst", "04_api_reference/module_qat/module_core/circuit.rst", "04_api_reference/module_qat/module_core/display.rst", "04_api_reference/module_qat/module_core/evaluate.rst", "04_api_reference/module_qat/module_core/hardwarespecs.rst", "04_api_reference/module_qat/module_core/job.rst", "04_api_reference/module_qat/module_core/load_state_vector_from_bin.rst", "04_api_reference/module_qat/module_core/module_application.rst", "04_api_reference/module_qat/module_core/module_application/application.rst", "04_api_reference/module_qat/module_core/module_application/remoteapplication.rst", "04_api_reference/module_qat/module_core/module_circuit_builder.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable.rst", "04_api_reference/module_qat/module_core/module_exceptions_utils.rst", "04_api_reference/module_qat/module_core/module_exceptions_utils/exception_only.rst", "04_api_reference/module_qat/module_core/module_exceptions_utils/generator_exception_only.rst", "04_api_reference/module_qat/module_core/module_exceptions_utils/plugin_exception_only.rst", "04_api_reference/module_qat/module_core/module_exceptions_utils/qpu_exception_only.rst", "04_api_reference/module_qat/module_core/module_gate_set.rst", "04_api_reference/module_qat/module_core/module_gate_set/gateset.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition.rst", "04_api_reference/module_qat/module_core/module_qpu.rst", "04_api_reference/module_qat/module_core/module_qpu/commonqpu.rst", "04_api_reference/module_qat/module_core/module_spins.rst", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins.rst", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer.rst", "04_api_reference/module_qat/module_core/module_variables.rst", "04_api_reference/module_qat/module_core/module_variables/abso.rst", "04_api_reference/module_qat/module_core/module_variables/angle.rst", "04_api_reference/module_qat/module_core/module_variables/arithexpression.rst", "04_api_reference/module_qat/module_core/module_variables/atan2.rst", "04_api_reference/module_qat/module_core/module_variables/cos.rst", "04_api_reference/module_qat/module_core/module_variables/exp.rst", "04_api_reference/module_qat/module_core/module_variables/get_item.rst", "04_api_reference/module_qat/module_core/module_variables/heaviside.rst", "04_api_reference/module_qat/module_core/module_variables/imag.rst", "04_api_reference/module_qat/module_core/module_variables/ln.rst", "04_api_reference/module_qat/module_core/module_variables/real.rst", "04_api_reference/module_qat/module_core/module_variables/sin.rst", "04_api_reference/module_qat/module_core/module_variables/sqrt.rst", "04_api_reference/module_qat/module_core/module_variables/symbol.rst", "04_api_reference/module_qat/module_core/module_variables/vmax.rst", "04_api_reference/module_qat/module_core/observable.rst", "04_api_reference/module_qat/module_core/parameter.rst", "04_api_reference/module_qat/module_core/plot_in_notebook.rst", "04_api_reference/module_qat/module_core/result.rst", "04_api_reference/module_qat/module_core/sample.rst", "04_api_reference/module_qat/module_core/schedule.rst", "04_api_reference/module_qat/module_core/state.rst", "04_api_reference/module_qat/module_core/term.rst", "04_api_reference/module_qat/module_core/topology.rst", "04_api_reference/module_qat/module_core/topologytype.rst", "04_api_reference/module_qat/module_core/variable.rst", "04_api_reference/module_qat/module_core/wavefunction.rst", "04_api_reference/module_qat/module_devices.rst", "04_api_reference/module_qat/module_devices/alltoall.rst", "04_api_reference/module_qat/module_devices/google_sycamore.rst", "04_api_reference/module_qat/module_devices/griddevice.rst", "04_api_reference/module_qat/module_devices/ibm_burlington.rst", "04_api_reference/module_qat/module_devices/ibm_johannesburg.rst", "04_api_reference/module_qat/module_devices/ibm_melbourne.rst", "04_api_reference/module_qat/module_devices/ibm_rueschlikon.rst", "04_api_reference/module_qat/module_devices/ibm_singapore.rst", "04_api_reference/module_qat/module_devices/ibm_tokyo.rst", "04_api_reference/module_qat/module_devices/ibm_yorktown.rst", "04_api_reference/module_qat/module_devices/linedevice.rst", "04_api_reference/module_qat/module_devices/rigetti_agave.rst", "04_api_reference/module_qat/module_devices/rigetti_aspen.rst", "04_api_reference/module_qat/module_devices/squaregriddevice.rst", "04_api_reference/module_qat/module_devices/zuchongzhi.rst", "04_api_reference/module_qat/module_fermion.rst", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion.rst", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals.rst", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz.rst", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals.rst", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian.rst", "04_api_reference/module_qat/module_fermion/fermionhamiltonian.rst", "04_api_reference/module_qat/module_fermion/get_cluster_ops.rst", "04_api_reference/module_qat/module_fermion/get_hf_ket.rst", "04_api_reference/module_qat/module_fermion/guess_init_params.rst", "04_api_reference/module_qat/module_fermion/make_anderson_model.rst", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_embedded_model.rst", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ.rst", "04_api_reference/module_qat/module_fermion/make_hubbard_model.rst", "04_api_reference/module_qat/module_fermion/make_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_mr_circ.rst", "04_api_reference/module_qat/module_fermion/make_mrep_circ.rst", "04_api_reference/module_qat/module_fermion/make_shallow_circ.rst", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine.rst", "04_api_reference/module_qat/module_fermion/molecularhamiltonian.rst", "04_api_reference/module_qat/module_fermion/moleculeinfo.rst", "04_api_reference/module_qat/module_fermion/perform_phase_estimation.rst", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation.rst", "04_api_reference/module_qat/module_fermion/select_active_orbitals.rst", "04_api_reference/module_qat/module_fermion/spinhamiltonian.rst", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis.rst", "04_api_reference/module_qat/module_fusion.rst", "04_api_reference/module_qat/module_fusion/adjacentstrategy.rst", "04_api_reference/module_qat/module_fusion/eagerstrategy.rst", "04_api_reference/module_qat/module_fusion/naivestrategy.rst", "04_api_reference/module_qat/module_generators.rst", "04_api_reference/module_qat/module_generators/abstractgenerator.rst", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator.rst", "04_api_reference/module_qat/module_generators/graphcolouringgenerator.rst", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator.rst", "04_api_reference/module_qat/module_generators/kcliquegenerator.rst", "04_api_reference/module_qat/module_generators/maxcutgenerator.rst", "04_api_reference/module_qat/module_generators/remotebatchgenerator.rst", "04_api_reference/module_qat/module_generators/vertexcovergenerator.rst", "04_api_reference/module_qat/module_hardware.rst", "04_api_reference/module_qat/module_hardware/defaultgatesspecification.rst", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel.rst", "04_api_reference/module_qat/module_hardware/gatesspecification.rst", "04_api_reference/module_qat/module_hardware/hardwaremodel.rst", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model.rst", "04_api_reference/module_qat/module_lang.rst", "04_api_reference/module_qat/module_lang/abstractgate.rst", "04_api_reference/module_qat/module_lang/amplification_step.rst", "04_api_reference/module_qat/module_lang/boolformula.rst", "04_api_reference/module_qat/module_lang/build_gate.rst", "04_api_reference/module_qat/module_lang/cbit.rst", "04_api_reference/module_qat/module_lang/cregister.rst", "04_api_reference/module_qat/module_lang/gate.rst", "04_api_reference/module_qat/module_lang/generate_gate_set.rst", "04_api_reference/module_qat/module_lang/grover_diffusion.rst", "04_api_reference/module_qat/module_lang/householder.rst", "04_api_reference/module_qat/module_lang/kptree.rst", "04_api_reference/module_qat/module_lang/linker.rst", "04_api_reference/module_qat/module_lang/module_arithmetic.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod.rst", "04_api_reference/module_qat/module_lang/module_classarith.rst", "04_api_reference/module_qat/module_lang/module_classarith/add.rst", "04_api_reference/module_qat/module_lang/module_classarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add.rst", "04_api_reference/module_qat/module_lang/module_qftarith.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/qft.rst", "04_api_reference/module_qat/module_lang/paramgate.rst", "04_api_reference/module_qat/module_lang/phase_estimation.rst", "04_api_reference/module_qat/module_lang/program.rst", "04_api_reference/module_qat/module_lang/qarithexp.rst", "04_api_reference/module_qat/module_lang/qbit.rst", "04_api_reference/module_qat/module_lang/qbool.rst", "04_api_reference/module_qat/module_lang/qboolarray.rst", "04_api_reference/module_qat/module_lang/qclause.rst", "04_api_reference/module_qat/module_lang/qcompexp.rst", "04_api_reference/module_qat/module_lang/qfunc.rst", "04_api_reference/module_qat/module_lang/qint.rst", "04_api_reference/module_qat/module_lang/qregister.rst", "04_api_reference/module_qat/module_lang/qrout.rst", "04_api_reference/module_qat/module_lang/qroutine.rst", "04_api_reference/module_qat/module_lang/quantum_counting.rst", "04_api_reference/module_qat/module_lang/uniform_distribution.rst", "04_api_reference/module_qat/module_nnize.rst", "04_api_reference/module_qat/module_nnize/durationmetric.rst", "04_api_reference/module_qat/module_nnize/quantumcostmetric.rst", "04_api_reference/module_qat/module_opt.rst", "04_api_reference/module_qat/module_opt/ansatzfactory.rst", "04_api_reference/module_qat/module_opt/bilp.rst", "04_api_reference/module_qat/module_opt/circuitgenerator.rst", "04_api_reference/module_qat/module_opt/clause.rst", "04_api_reference/module_qat/module_opt/combinatorialproblem.rst", "04_api_reference/module_qat/module_opt/graphcolouring.rst", "04_api_reference/module_qat/module_opt/graphpartitioning.rst", "04_api_reference/module_qat/module_opt/ising.rst", "04_api_reference/module_qat/module_opt/kclique.rst", "04_api_reference/module_qat/module_opt/maxcut.rst", "04_api_reference/module_qat/module_opt/mixingfactory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentaqo.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate.rst", "04_api_reference/module_qat/module_opt/module_results.rst", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult.rst", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult.rst", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult.rst", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult.rst", "04_api_reference/module_qat/module_opt/mwis.rst", "04_api_reference/module_qat/module_opt/numberpartitioning.rst", "04_api_reference/module_qat/module_opt/qubo.rst", "04_api_reference/module_qat/module_opt/schedulegenerator.rst", "04_api_reference/module_qat/module_opt/var.rst", "04_api_reference/module_qat/module_opt/vertexcover.rst", "04_api_reference/module_qat/module_pbo.rst", "04_api_reference/module_qat/module_pbo/abstractregister.rst", "04_api_reference/module_qat/module_pbo/gatename.rst", "04_api_reference/module_qat/module_pbo/graphcircuit.rst", "04_api_reference/module_qat/module_pbo/list_decompositions.rst", "04_api_reference/module_qat/module_pbo/module_collections.rst", "04_api_reference/module_qat/module_pbo/module_collections/collection_from_target.rst", "04_api_reference/module_qat/module_pbo/module_decomposition.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/get_euler_angles.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/ions_decomposition.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/u3_decomposition.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/xzx_decomposition.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/zxz_decomposition.rst", "04_api_reference/module_qat/module_pbo/module_decomposition/zyz_decomposition.rst", "04_api_reference/module_qat/module_pbo/patterngroup.rst", "04_api_reference/module_qat/module_pbo/var.rst", "04_api_reference/module_qat/module_plugins.rst", "04_api_reference/module_qat/module_plugins/abstractplugin.rst", "04_api_reference/module_qat/module_plugins/adaptvqeplugin.rst", "04_api_reference/module_qat/module_plugins/circuitinliner.rst", "04_api_reference/module_qat/module_plugins/costfunctionplugin.rst", "04_api_reference/module_qat/module_plugins/display.rst", "04_api_reference/module_qat/module_plugins/fusionplugin.rst", "04_api_reference/module_qat/module_plugins/gaterewriter.rst", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer.rst", "04_api_reference/module_qat/module_plugins/initialmapping.rst", "04_api_reference/module_qat/module_plugins/junction.rst", "04_api_reference/module_qat/module_plugins/kakcompression.rst", "04_api_reference/module_qat/module_plugins/lazysynthesis.rst", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer.rst", "04_api_reference/module_qat/module_plugins/nisqcompiler.rst", "04_api_reference/module_qat/module_plugins/nnizer.rst", "04_api_reference/module_qat/module_plugins/observablesplitter.rst", "04_api_reference/module_qat/module_plugins/optimizer.rst", "04_api_reference/module_qat/module_plugins/patternmanager.rst", "04_api_reference/module_qat/module_plugins/psominimizeplugin.rst", "04_api_reference/module_qat/module_plugins/quameleonplugin.rst", "04_api_reference/module_qat/module_plugins/remap.rst", "04_api_reference/module_qat/module_plugins/remoteplugin.rst", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/seqoptim.rst", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/transformobservable.rst", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator.rst", "04_api_reference/module_qat/module_qpus.rst", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing.rst", "04_api_reference/module_qat/module_qpus/classicalqpu.rst", "04_api_reference/module_qat/module_qpus/get_current_qpu.rst", "04_api_reference/module_qat/module_qpus/get_default_qpu.rst", "04_api_reference/module_qat/module_qpus/qpuhandler.rst", "04_api_reference/module_qat/module_qpus/remoteqpu.rst", "04_api_reference/module_qat/module_quops.rst", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase.rst", "04_api_reference/module_qat/module_quops/channelrepresentations.rst", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec.rst", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat.rst", "04_api_reference/module_qat/module_quops/get_average_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_diamond_norm.rst", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_process_distance.rst", "04_api_reference/module_qat/module_quops/get_state_fidelity.rst", "04_api_reference/module_qat/module_quops/get_trace_distance.rst", "04_api_reference/module_qat/module_quops/is_completely_positive.rst", "04_api_reference/module_qat/module_quops/is_trace_preserving.rst", "04_api_reference/module_qat/module_quops/is_trace_reducing.rst", "04_api_reference/module_qat/module_quops/is_unital.rst", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel.rst", "04_api_reference/module_qat/module_quops/make_depolarizing_channel.rst", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping.rst", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_vector_basis.rst", "04_api_reference/module_qat/module_quops/multikron.rst", "04_api_reference/module_qat/module_quops/parametricamplitudedamping.rst", "04_api_reference/module_qat/module_quops/parametricgatenoise.rst", "04_api_reference/module_qat/module_quops/parametricpuredephasing.rst", "04_api_reference/module_qat/module_quops/parametricquantumchannel.rst", "04_api_reference/module_qat/module_quops/partial_trace.rst", "04_api_reference/module_qat/module_quops/quantumchannel.rst", "04_api_reference/module_qat/module_quops/quantumchannelchi.rst", "04_api_reference/module_qat/module_quops/quantumchannelchoi.rst", "04_api_reference/module_qat/module_quops/quantumchannelkraus.rst", "04_api_reference/module_qat/module_quops/quantumchannelptm.rst", "04_api_reference/module_qat/module_synthopline.rst", "04_api_reference/module_qat/module_synthopline/cliffordnormalizer.rst", "04_api_reference/module_qat/module_synthopline/codiagonalize_with_architecture.rst", "04_api_reference/module_qat/module_synthopline/conjugate_observable_tableau.rst", "04_api_reference/module_qat/module_synthopline/extract_linear_operator.rst", "04_api_reference/module_qat/module_synthopline/extract_pauli_rotations.rst", "04_api_reference/module_qat/module_synthopline/extract_phase_polynomial.rst", "04_api_reference/module_qat/module_synthopline/frequency_mapping.rst", "04_api_reference/module_qat/module_synthopline/generate_random_observable.rst", "04_api_reference/module_qat/module_synthopline/generate_trotter_ansatz.rst", "04_api_reference/module_qat/module_synthopline/greedy_mapping.rst", "04_api_reference/module_qat/module_synthopline/linear_operator_synthesis.rst", "04_api_reference/module_qat/module_synthopline/operatortableau.rst", "04_api_reference/module_qat/module_synthopline/phase_polynomial_synthesis.rst", "04_api_reference/module_qat/module_synthopline/random_linear_operator.rst", "04_api_reference/module_qat/module_synthopline/random_phase_polynomial.rst", "04_api_reference/module_qat/module_synthopline/synthesize_stabilizer_state.rst", "04_api_reference/module_qat/module_synthopline/weyloperator.rst", "05_demos.rst", "07_release_notes.rst", ":myqlm:06_support.rst", ":myqlm:interoperability.rst", ":myqlm:interoperability/01_qiskit.rst", ":myqlm:interoperability/02_pyquil.rst", ":myqlm:interoperability/03_cirq.rst", ":myqlm:interoperability/04_projectq.rst", ":myqlm:interoperability/05_openqasm.rst", "combinatorial_optim_applic.rst", "combinatorial_optim_applic/01_np_probs_for_annealing.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob.rst", "combinatorial_optim_applic/02_qaoa.rst", "combinatorial_optim_applic/03_aqo.rst", "combinatorial_optim_applic/04_crossing_lattice.rst", "combinatorial_optim_applic/05_np_problem_generators.rst", "combinatorial_optim_applic/05_np_problem_generators/01_max_cut_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/02_graph_partitioning_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/03_kclique_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/04_vertex_cover_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/05_graph_colouring_generator.rst", "fermion.rst", "fermion/01_hamiltonians.rst", "fermion/02_algorithms.rst", "fermion/03_plugins.rst", "fermion/04_migrating.rst", "index.rst", "interoperability_annealing.rst"], "indexentries": {"abstractgate (class in qat.lang)": [[231, "qat.lang.AbstractGate", false]], "abstractgenerator (class in qat.generators)": [[216, "qat.generators.AbstractGenerator", false]], "abstractplugin (class in qat.plugins)": [[322, "qat.plugins.AbstractPlugin", false]], "abstractregister (class in qat.pbo)": [[306, "qat.pbo.AbstractRegister", false]], "adaptvqeplugin (class in qat.plugins)": [[323, "qat.plugins.AdaptVQEPlugin", false]], "add() (in module qat.lang.aqasm.classarith)": [[250, "qat.lang.AQASM.classarith.add", false]], "add() (in module qat.lang.aqasm.qftarith)": [[254, "qat.lang.AQASM.qftarith.add", false]], "add_abstract_gate() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.add_abstract_gate", false]], "add_abstract_gate() (qat.plugins.patternmanager method)": [[339, "qat.plugins.PatternManager.add_abstract_gate", false]], "add_clause() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.add_clause", false]], "add_const() (in module qat.lang.aqasm.classarith)": [[251, "qat.lang.AQASM.classarith.add_const", false]], "add_const() (in module qat.lang.aqasm.qftarith)": [[255, "qat.lang.AQASM.qftarith.add_const", false]], "add_const_mod() (in module qat.lang.aqasm.arithmetic)": [[244, "qat.lang.AQASM.arithmetic.add_const_mod", false]], "add_edge() (qat.core.topology method)": [[161, "qat.core.Topology.add_edge", false]], "add_function() (qat.pbo.var class method)": [[320, "qat.pbo.VAR.add_function", false]], "add_mod() (in module qat.lang.aqasm.arithmetic)": [[245, "qat.lang.AQASM.arithmetic.add_mod", false]], "add_pattern() (qat.pbo.patterngroup method)": [[319, "qat.pbo.PatternGroup.add_pattern", false]], "add_prohibited_value() (qat.pbo.var method)": [[320, "qat.pbo.VAR.add_prohibited_value", false]], "add_sample() (qat.core.result method)": [[156, "qat.core.Result.add_sample", false]], "add_signature() (qat.core.gate_set.gateset method)": [[129, "qat.core.gate_set.GateSet.add_signature", false]], "add_signature() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.add_signature", false]], "adjacentstrategy (class in qat.fusion.strategies)": [[212, "qat.fusion.strategies.AdjacentStrategy", false]], "aggregate_data() (in module qat.core.wrappers.result)": [[104, "qat.core.wrappers.result.aggregate_data", false]], "alltoall (class in qat.devices)": [[166, "qat.devices.AllToAll", false]], "amplification_step() (in module qat.lang.algorithms)": [[232, "qat.lang.algorithms.amplification_step", false]], "amplitude (qat.core.sample property)": [[157, "qat.core.Sample.amplitude", false]], "and_clause() (qat.opt.boolexpr.clause static method)": [[282, "qat.opt.boolexpr.Clause.and_clause", false]], "ansatzfactory (class in qat.vsolve.ansatz)": [[279, "qat.vsolve.ansatz.AnsatzFactory", false]], "append() (qat.core.batchresult method)": [[108, "qat.core.BatchResult.append", false]], "application (class in qat.core.application)": [[116, "qat.core.application.Application", false]], "apply() (qat.lang.program method)": [[261, "qat.lang.Program.apply", false]], "apply() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.apply", false]], "apply_1qbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_1qbit_ctrl_gate", false]], "apply_1qbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_1qbit_gate", false]], "apply_2qbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_2qbit_ctrl_gate", false]], "apply_2qbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_2qbit_gate", false]], "apply_binary_qram() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_binary_qram", false]], "apply_ccnot() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CCNOT", false]], "apply_cnot() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CNOT", false]], "apply_csign() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CSIGN", false]], "apply_h() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_H", false]], "apply_iswap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_ISWAP", false]], "apply_nqbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_nqbit_ctrl_gate", false]], "apply_nqbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_nqbit_gate", false]], "apply_ph() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_PH", false]], "apply_phase_oracle() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_phase_oracle", false]], "apply_qram() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_qram", false]], "apply_quantum_subspace_expansion() (in module qat.fermion.chemistry.qse)": [[182, "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", false]], "apply_resource_consumption_limits() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.apply_resource_consumption_limits", false]], "apply_rx() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RX", false]], "apply_ry() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RY", false]], "apply_rz() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RZ", false]], "apply_s() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_S", false]], "apply_sqrtswap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_SQRTSWAP", false]], "apply_state_preparation() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_state_preparation", false]], "apply_swap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_SWAP", false]], "apply_t() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_T", false]], "apply_to() (qat.quops.quantumchannelchi method)": [[386, "qat.quops.QuantumChannelChi.apply_to", false]], "apply_to() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.apply_to", false]], "apply_to() (qat.quops.quantumchannelptm method)": [[389, "qat.quops.QuantumChannelPTM.apply_to", false]], "apply_to_vector() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.apply_to_vector", false]], "apply_x() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_X", false]], "apply_y() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_Y", false]], "apply_z() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_Z", false]], "aqasmengine (class in qat.interop.projectq)": [[64, "qat.interop.projectq.AqasmEngine", false]], "aqasmprinter (class in qat.interop.projectq)": [[65, "qat.interop.projectq.AqasmPrinter", false]], "aqo_job() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.aqo_job", false]], "aqo_job() (qat.opt.ising method)": [[286, "qat.opt.Ising.aqo_job", false]], "aqo_job() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.aqo_job", false]], "aqo_job() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.aqo_job", false]], "aqo_job() (qat.opt.schedule_generator.schedulegenerator method)": [[302, "qat.opt.schedule_generator.ScheduleGenerator.aqo_job", false]], "are_equal_up_to_phase() (in module qat.quops.math_util)": [[359, "qat.quops.math_util.are_equal_up_to_phase", false]], "arithexpression (class in qat.core.variables)": [[140, "qat.core.variables.ArithExpression", false]], "arity (qat.quops.quantumchannelchi attribute)": [[386, "qat.quops.QuantumChannelChi.arity", false]], "arity (qat.quops.quantumchannelchoi attribute)": [[387, "qat.quops.QuantumChannelChoi.arity", false]], "arity (qat.quops.quantumchannelptm attribute)": [[389, "qat.quops.QuantumChannelPTM.arity", false]], "array (qat.clinalg.wrapper.statevectorcpudouble property)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.array", false]], "array_readonly (qat.clinalg.wrapper.statevectorcpudouble property)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.array_readonly", false]], "as_graph() (qat.core.hardwarespecs method)": [[112, "qat.core.HardwareSpecs.as_graph", false]], "as_quameleon() (qat.core.hardwarespecs method)": [[112, "qat.core.HardwareSpecs.as_quameleon", false]], "assert_plugin() (in module qat.core.assertion)": [[105, "qat.core.assertion.assert_plugin", false]], "assert_qpu() (in module qat.core.assertion)": [[106, "qat.core.assertion.assert_qpu", false]], "asyncbackendtoqpu (class in qat.interop.qiskit)": [[71, "qat.interop.qiskit.AsyncBackendToQPU", false]], "backendtoqpu (class in qat.interop.qiskit)": [[72, "qat.interop.qiskit.BackendToQPU", false]], "batch (class in qat.core)": [[107, "qat.core.Batch", false]], "batchresult (class in qat.core)": [[108, "qat.core.BatchResult", false]], "bilp (class in qat.opt)": [[280, "qat.opt.BILP", false]], "bind_variable() (qat.core.circuit method)": [[109, "qat.core.Circuit.bind_variable", false]], "bind_variables() (qat.core.circuit method)": [[109, "qat.core.Circuit.bind_variables", false]], "bind_variables() (qat.lang.aqasm.gates.paramgate method)": [[259, "qat.lang.AQASM.gates.ParamGate.bind_variables", false]], "bit_flip() (qat.opt.mixingfactory static method)": [[289, "qat.opt.MixingFactory.bit_flip", false]], "bit_move() (qat.opt.mixingfactory static method)": [[289, "qat.opt.MixingFactory.bit_move", false]], "bitstring (qat.core.wrappers.result.state property)": [[159, "qat.core.wrappers.result.State.bitstring", false]], "boolformula (class in qat.lang.aqasm.bits)": [[233, "qat.lang.AQASM.bits.BoolFormula", false]], "build_gate() (in module qat.lang)": [[234, "qat.lang.build_gate", false]], "built-in function": [[138, "qat.core.variables.abso", false], [139, "qat.core.variables.angle", false], [141, "qat.core.variables.atan2", false], [142, "qat.core.variables.cos", false], [143, "qat.core.variables.exp", false], [144, "qat.core.variables.get_item", false], [145, "qat.core.variables.heaviside", false], [146, "qat.core.variables.imag", false], [147, "qat.core.variables.ln", false], [148, "qat.core.variables.real", false], [149, "qat.core.variables.sin", false], [150, "qat.core.variables.sqrt", false], [152, "qat.core.variables.vmax", false]], "calloc() (qat.lang.program method)": [[261, "qat.lang.Program.calloc", false]], "cancel() (qat.interop.qiskit.qiskitjob method)": [[74, "qat.interop.qiskit.QiskitJob.cancel", false]], "cast() (qat.lang.aqasm.qbool.qbool method)": [[264, "qat.lang.AQASM.qbool.QBool.cast", false]], "cast() (qat.lang.aqasm.qbool.qboolarray method)": [[265, "qat.lang.AQASM.qbool.QBoolArray.cast", false]], "cast() (qat.lang.aqasm.qint.qint method)": [[269, "qat.lang.AQASM.qint.QInt.cast", false]], "cast_to() (qat.lang.aqasm.qbool.qbool method)": [[264, "qat.lang.AQASM.qbool.QBool.cast_to", false]], "cbit (class in qat.lang.aqasm.bits)": [[235, "qat.lang.AQASM.bits.Cbit", false]], "cbreak() (qat.lang.program method)": [[261, "qat.lang.Program.cbreak", false]], "cc_apply() (qat.lang.program method)": [[261, "qat.lang.Program.cc_apply", false]], "channelrepresentations (class in qat.quops)": [[360, "qat.quops.ChannelRepresentations", false]], "circuit (class in qat.core)": [[109, "qat.core.Circuit", false]], "circuitgenerator (class in qat.opt.circuit_generator)": [[281, "qat.opt.circuit_generator.CircuitGenerator", false]], "circuitinliner (class in qat.plugins)": [[324, "qat.plugins.CircuitInliner", false]], "cirq_to_qlm() (in module qat.interop.cirq)": [[59, "qat.interop.cirq.cirq_to_qlm", false]], "classicalqpu (class in qat.qpus)": [[353, "qat.qpus.ClassicalQPU", false]], "clause (class in qat.opt.boolexpr)": [[282, "qat.opt.boolexpr.Clause", false]], "cleanup_jump_operators() (qat.hardware.defaulthardwaremodel method)": [[226, "qat.hardware.DefaultHardwareModel.cleanup_jump_operators", false]], "cleanup_jump_operators() (qat.hardware.hardwaremodel method)": [[228, "qat.hardware.HardwareModel.cleanup_jump_operators", false]], "clear_gate_set() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.clear_gate_set", false]], "cliffordnormalizer (class in qat.synthopline.clifford_normalizer)": [[391, "qat.synthopline.clifford_normalizer.CliffordNormalizer", false]], "clinalg (class in qat.qpus)": [[350, "qat.qpus.CLinalg", false]], "clique (qat.opt.results.kcliqueresult property)": [[297, "qat.opt.results.KCliqueResult.clique", false]], "cnot_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.cnot_left", false]], "cnot_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.cnot_right", false]], "codiagonalize_with_architecture() (in module qat.synthopline.co_diagonalization)": [[392, "qat.synthopline.co_diagonalization.codiagonalize_with_architecture", false]], "coeff (qat.core.term attribute)": [[160, "qat.core.Term.coeff", false]], "collection_from_target() (in module qat.pbo.collections)": [[311, "qat.pbo.collections.collection_from_target", false]], "combinatorialoptimizergenerator (class in qat.generators)": [[217, "qat.generators.CombinatorialOptimizerGenerator", false]], "combinatorialproblem (class in qat.opt)": [[283, "qat.opt.CombinatorialProblem", false]], "combinatorialresult (class in qat.opt.results)": [[295, "qat.opt.results.CombinatorialResult", false]], "comment() (qat.lang.program method)": [[261, "qat.lang.Program.comment", false]], "commonqpu (class in qat.core.qpu)": [[133, "qat.core.qpu.CommonQPU", false]], "compile() (qat.core.circuit method)": [[109, "qat.core.Circuit.compile", false]], "compile() (qat.core.job method)": [[113, "qat.core.Job.compile", false]], "compile() (qat.interop.openqasm.oqasmparser method)": [[62, "qat.interop.openqasm.OqasmParser.compile", false]], "compile() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.compile", false]], "compile() (qat.plugins.abstractplugin method)": [[322, "qat.plugins.AbstractPlugin.compile", false]], "compile() (qat.plugins.adaptvqeplugin method)": [[323, "qat.plugins.AdaptVQEPlugin.compile", false]], "compile() (qat.plugins.circuitinliner method)": [[324, "qat.plugins.CircuitInliner.compile", false]], "compile() (qat.plugins.costfunctionplugin method)": [[325, "qat.plugins.CostFunctionPlugin.compile", false]], "compile() (qat.plugins.display method)": [[326, "qat.plugins.Display.compile", false]], "compile() (qat.plugins.fusionplugin method)": [[327, "qat.plugins.FusionPlugin.compile", false]], "compile() (qat.plugins.gaterewriter method)": [[328, "qat.plugins.GateRewriter.compile", false]], "compile() (qat.plugins.gradientdescentoptimizer method)": [[329, "qat.plugins.GradientDescentOptimizer.compile", false]], "compile() (qat.plugins.initialmapping method)": [[330, "qat.plugins.InitialMapping.compile", false]], "compile() (qat.plugins.kakcompression method)": [[332, "qat.plugins.KAKCompression.compile", false]], "compile() (qat.plugins.lazysynthesis method)": [[333, "qat.plugins.LazySynthesis.compile", false]], "compile() (qat.plugins.multiplelaunchesanalyzer method)": [[334, "qat.plugins.MultipleLaunchesAnalyzer.compile", false]], "compile() (qat.plugins.nisqcompiler method)": [[335, "qat.plugins.NISQCompiler.compile", false]], "compile() (qat.plugins.nnizer method)": [[336, "qat.plugins.Nnizer.compile", false]], "compile() (qat.plugins.observablesplitter method)": [[337, "qat.plugins.ObservableSplitter.compile", false]], "compile() (qat.plugins.patternmanager method)": [[339, "qat.plugins.PatternManager.compile", false]], "compile() (qat.plugins.psominimizeplugin method)": [[340, "qat.plugins.PSOMinimizePlugin.compile", false]], "compile() (qat.plugins.quameleonplugin method)": [[341, "qat.plugins.QuameleonPlugin.compile", false]], "compile() (qat.plugins.remap method)": [[342, "qat.plugins.Remap.compile", false]], "compile() (qat.plugins.remoteplugin method)": [[343, "qat.plugins.RemotePlugin.compile", false]], "compile() (qat.plugins.scipyminimizeplugin method)": [[344, "qat.plugins.ScipyMinimizePlugin.compile", false]], "compile() (qat.plugins.seqoptim method)": [[345, "qat.plugins.SeqOptim.compile", false]], "compile() (qat.plugins.spsaminimizeplugin method)": [[346, "qat.plugins.SPSAMinimizePlugin.compile", false]], "compile() (qat.plugins.transformobservable method)": [[347, "qat.plugins.TransformObservable.compile", false]], "compile() (qat.plugins.zeronoiseextrapolator method)": [[348, "qat.plugins.ZeroNoiseExtrapolator.compile", false]], "compile_circuit() (qat.synthopline.clifford_normalizer.cliffordnormalizer method)": [[391, "qat.synthopline.clifford_normalizer.CliffordNormalizer.compile_circuit", false]], "compute() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.compute", false]], "compute_active_space_integrals() (in module qat.fermion.chemistry.ucc)": [[183, "qat.fermion.chemistry.ucc.compute_active_space_integrals", false]], "conjugate() (qat.lang.program method)": [[261, "qat.lang.Program.conjugate", false]], "conjugate_observable_tableau() (in module qat.synthopline.util)": [[393, "qat.synthopline.util.conjugate_observable_tableau", false]], "conjugate_with() (qat.synthopline.interface.weyloperator method)": [[407, "qat.synthopline.interface.WeylOperator.conjugate_with", false]], "constant_coeff (qat.core.observable attribute)": [[153, "qat.core.Observable.constant_coeff", false]], "constant_coeff (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.constant_coeff", false]], "constant_coeff (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.constant_coeff", false]], "constant_coeff (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.constant_coeff", false]], "constant_coeff (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.constant_coeff", false]], "constant_coeff (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.constant_coeff", false]], "construct_ucc_ansatz() (in module qat.fermion.chemistry.ucc)": [[184, "qat.fermion.chemistry.ucc.construct_ucc_ansatz", false]], "convert_density_mat_to_pauli_vec() (in module qat.quops.math_util)": [[361, "qat.quops.math_util.convert_density_mat_to_pauli_vec", false]], "convert_pauli_vec_to_density_mat() (in module qat.quops.math_util)": [[362, "qat.quops.math_util.convert_pauli_vec_to_density_mat", false]], "convert_to_h_integrals() (in module qat.fermion.chemistry.ucc)": [[185, "qat.fermion.chemistry.ucc.convert_to_h_integrals", false]], "copy() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.copy", false]], "copy() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.copy", false]], "copy() (qat.fermion.hamiltonians.spinhamiltonian method)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.copy", false]], "copy() (qat.pbo.var class method)": [[320, "qat.pbo.VAR.copy", false]], "costfunctionplugin (class in qat.plugins)": [[325, "qat.plugins.CostFunctionPlugin", false]], "count() (qat.core.circuit method)": [[109, "qat.core.Circuit.count", false]], "count_pattern() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.count_pattern", false]], "cover (qat.opt.results.vertexcoverresult property)": [[298, "qat.opt.results.VertexCoverResult.cover", false]], "cregister (class in qat.lang.aqasm.bits)": [[236, "qat.lang.AQASM.bits.CRegister", false]], "cuccaro_add() (in module qat.lang.aqasm.classarith)": [[252, "qat.lang.AQASM.classarith.cuccaro_add", false]], "cz_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.cz_left", false]], "cz_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.cz_right", false]], "dag() (qat.core.circuit method)": [[109, "qat.core.Circuit.dag", false]], "dag() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.dag", false]], "dag() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.dag", false]], "dag() (qat.fermion.hamiltonians.spinhamiltonian method)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.dag", false]], "dag() (qat.lang.aqasm.gates.paramgate method)": [[259, "qat.lang.AQASM.gates.ParamGate.dag", false]], "decode_rydberg() (qat.opt.combinatorialproblem class method)": [[283, "qat.opt.CombinatorialProblem.decode_rydberg", false]], "decode_rydberg() (qat.opt.ising class method)": [[286, "qat.opt.Ising.decode_rydberg", false]], "decode_rydberg() (qat.opt.mwis class method)": [[299, "qat.opt.MWIS.decode_rydberg", false]], "decode_rydberg() (qat.opt.qubo class method)": [[301, "qat.opt.QUBO.decode_rydberg", false]], "decode_rydberg_meta_data() (qat.opt.combinatorialproblem static method)": [[283, "qat.opt.CombinatorialProblem.decode_rydberg_meta_data", false]], "decode_rydberg_meta_data() (qat.opt.ising static method)": [[286, "qat.opt.Ising.decode_rydberg_meta_data", false]], "decode_rydberg_meta_data() (qat.opt.mwis static method)": [[299, "qat.opt.MWIS.decode_rydberg_meta_data", false]], "decode_rydberg_meta_data() (qat.opt.qubo static method)": [[301, "qat.opt.QUBO.decode_rydberg_meta_data", false]], "default_gate_set() (in module qat.core.circuit_builder.matrix_util)": [[119, "qat.core.circuit_builder.matrix_util.default_gate_set", false]], "defaultgatesspecification (class in qat.hardware)": [[225, "qat.hardware.DefaultGatesSpecification", false]], "defaulthardwaremodel (class in qat.hardware)": [[226, "qat.hardware.DefaultHardwareModel", false]], "depth() (qat.core.circuit method)": [[109, "qat.core.Circuit.depth", false]], "differentiate() (qat.core.job method)": [[113, "qat.core.Job.differentiate", false]], "differentiate() (qat.core.variable method)": [[163, "qat.core.Variable.differentiate", false]], "differentiate() (qat.core.variables.arithexpression method)": [[140, "qat.core.variables.ArithExpression.differentiate", false]], "dim (qat.synthopline.interface.operatortableau property)": [[402, "qat.synthopline.interface.OperatorTableau.dim", false]], "display (class in qat.plugins)": [[326, "qat.plugins.Display", false]], "display() (in module qat.core.console)": [[110, "qat.core.console.display", false]], "display() (qat.core.circuit method)": [[109, "qat.core.Circuit.display", false]], "display() (qat.core.result method)": [[156, "qat.core.Result.display", false]], "display() (qat.lang.aqasm.gates.paramgate method)": [[259, "qat.lang.AQASM.gates.ParamGate.display", false]], "display() (qat.lang.program method)": [[261, "qat.lang.Program.display", false]], "display() (qat.opt.results.graphpartitioningresult method)": [[296, "qat.opt.results.GraphPartitioningResult.display", false]], "display() (qat.opt.results.kcliqueresult method)": [[297, "qat.opt.results.KCliqueResult.display", false]], "display() (qat.opt.results.vertexcoverresult method)": [[298, "qat.opt.results.VertexCoverResult.display", false]], "do_post_processing() (qat.plugins.abstractplugin method)": [[322, "qat.plugins.AbstractPlugin.do_post_processing", false]], "dump() (qat.core.batch method)": [[107, "qat.core.Batch.dump", false]], "dump() (qat.core.batchresult method)": [[108, "qat.core.BatchResult.dump", false]], "dump() (qat.core.circuit method)": [[109, "qat.core.Circuit.dump", false]], "dump() (qat.core.hardwarespecs method)": [[112, "qat.core.HardwareSpecs.dump", false]], "dump() (qat.core.job method)": [[113, "qat.core.Job.dump", false]], "dump() (qat.core.observable method)": [[153, "qat.core.Observable.dump", false]], "dump() (qat.core.result method)": [[156, "qat.core.Result.dump", false]], "dump() (qat.core.schedule method)": [[158, "qat.core.Schedule.dump", false]], "dump() (qat.core.topology method)": [[161, "qat.core.Topology.dump", false]], "dump() (qat.interop.qiskit.qiskitjob method)": [[74, "qat.interop.qiskit.QiskitJob.dump", false]], "dump() (qat.opt.ising method)": [[286, "qat.opt.Ising.dump", false]], "dump() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.dump", false]], "durationmetric (class in qat.nnize.metrics)": [[276, "qat.nnize.metrics.DurationMetric", false]], "eagerstrategy (class in qat.fusion.strategies)": [[213, "qat.fusion.strategies.EagerStrategy", false]], "electronicstructurehamiltonian (class in qat.fermion.hamiltonians)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", false]], "empty() (qat.core.circuit static method)": [[109, "qat.core.Circuit.empty", false]], "estimate_resources_for_batch() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.estimate_resources_for_batch", false]], "eval() (qat.core.circuit method)": [[109, "qat.core.Circuit.eval", false]], "eval() (qat.core.job method)": [[113, "qat.core.Job.eval", false]], "eval() (qat.pbo.var method)": [[320, "qat.pbo.VAR.eval", false]], "evaluate() (in module qat.core.formula_eval)": [[111, "qat.core.formula_eval.evaluate", false]], "evaluate() (qat.lang.aqasm.qbool.qbool method)": [[264, "qat.lang.AQASM.qbool.QBool.evaluate", false]], "evaluate() (qat.lang.aqasm.qbool.qboolarray method)": [[265, "qat.lang.AQASM.qbool.QBoolArray.evaluate", false]], "evaluate() (qat.lang.aqasm.qbool.qclause method)": [[266, "qat.lang.AQASM.qbool.QClause.evaluate", false]], "evaluate() (qat.lang.aqasm.qint.qarithexp method)": [[262, "qat.lang.AQASM.qint.QArithExp.evaluate", false]], "evaluate() (qat.lang.aqasm.qint.qcompexp method)": [[267, "qat.lang.AQASM.qint.QCompExp.evaluate", false]], "evaluate() (qat.lang.aqasm.qint.qint method)": [[269, "qat.lang.AQASM.qint.QInt.evaluate", false]], "evaluate() (qat.opt.boolexpr.clause method)": [[282, "qat.opt.boolexpr.Clause.evaluate", false]], "evaluate() (qat.opt.boolexpr.var method)": [[303, "qat.opt.boolexpr.Var.evaluate", false]], "evaluate() (qat.plugins.optimizer method)": [[338, "qat.plugins.Optimizer.evaluate", false]], "evaluate_terms() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.evaluate_terms", false]], "exception_only (class in qat.core.exceptions_utils)": [[124, "qat.core.exceptions_utils.exception_only", false]], "execute() (qat.core.application.application method)": [[116, "qat.core.application.Application.execute", false]], "execute() (qat.plugins.junction method)": [[331, "qat.plugins.Junction.execute", false]], "expectation_value() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.expectation_value", false]], "export() (qat.lang.program method)": [[261, "qat.lang.Program.export", false]], "extend() (qat.core.batchresult method)": [[108, "qat.core.BatchResult.extend", false]], "extract_j_and_h_from_obs() (in module qat.simulated_annealing.service)": [[352, "qat.simulated_annealing.service.extract_j_and_h_from_obs", false]], "extract_linear_operator() (in module qat.synthopline.linear_synthesis)": [[394, "qat.synthopline.linear_synthesis.extract_linear_operator", false]], "extract_pauli_rotations() (in module qat.synthopline.util)": [[395, "qat.synthopline.util.extract_pauli_rotations", false]], "extract_phase_polynomial() (in module qat.synthopline.phase_polynomials)": [[396, "qat.synthopline.phase_polynomials.extract_phase_polynomial", false]], "fermionhamiltonian (class in qat.fermion.hamiltonians)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian", false]], "file_extension (qat.core.batch property)": [[107, "qat.core.Batch.file_extension", false]], "file_extension (qat.core.batchresult property)": [[108, "qat.core.BatchResult.file_extension", false]], "file_extension (qat.core.circuit property)": [[109, "qat.core.Circuit.file_extension", false]], "file_extension (qat.core.hardwarespecs property)": [[112, "qat.core.HardwareSpecs.file_extension", false]], "file_extension (qat.core.job property)": [[113, "qat.core.Job.file_extension", false]], "file_extension (qat.core.result property)": [[156, "qat.core.Result.file_extension", false]], "file_extension (qat.core.topology property)": [[161, "qat.core.Topology.file_extension", false]], "fill_matrices() (qat.core.circuit method)": [[109, "qat.core.Circuit.fill_matrices", false]], "find_pattern() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.find_pattern", false]], "free_ancillae() (qat.lang.program method)": [[261, "qat.lang.Program.free_ancillae", false]], "free_ancillae() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.free_ancillae", false]], "frequency_mapping() (in module qat.synthopline.initial_mapping)": [[397, "qat.synthopline.initial_mapping.frequency_mapping", false]], "from_bytes() (qat.core.batch class method)": [[107, "qat.core.Batch.from_bytes", false]], "from_bytes() (qat.core.circuit class method)": [[109, "qat.core.Circuit.from_bytes", false]], "from_bytes() (qat.core.job class method)": [[113, "qat.core.Job.from_bytes", false]], "from_bytes() (qat.core.result class method)": [[156, "qat.core.Result.from_bytes", false]], "from_bytes() (qat.core.sample class method)": [[157, "qat.core.Sample.from_bytes", false]], "from_bytes() (qat.core.topology class method)": [[161, "qat.core.Topology.from_bytes", false]], "from_nx() (qat.core.topology static method)": [[161, "qat.core.Topology.from_nx", false]], "from_string() (qat.core.variables.arithexpression static method)": [[140, "qat.core.variables.ArithExpression.from_string", false]], "from_thrift() (qat.core.batch class method)": [[107, "qat.core.Batch.from_thrift", false]], "from_thrift() (qat.core.batchresult class method)": [[108, "qat.core.BatchResult.from_thrift", false]], "from_thrift() (qat.core.circuit class method)": [[109, "qat.core.Circuit.from_thrift", false]], "from_thrift() (qat.core.hardwarespecs class method)": [[112, "qat.core.HardwareSpecs.from_thrift", false]], "from_thrift() (qat.core.job class method)": [[113, "qat.core.Job.from_thrift", false]], "from_thrift() (qat.core.result class method)": [[156, "qat.core.Result.from_thrift", false]], "from_thrift() (qat.core.sample class method)": [[157, "qat.core.Sample.from_thrift", false]], "from_thrift() (qat.core.topology class method)": [[161, "qat.core.Topology.from_thrift", false]], "from_thrift() (qat.opt.ising class method)": [[286, "qat.opt.Ising.from_thrift", false]], "from_thrift() (qat.opt.mwis class method)": [[299, "qat.opt.MWIS.from_thrift", false]], "func (qat.core.parameter property)": [[154, "qat.core.Parameter.func", false]], "fusionplugin (class in qat.plugins)": [[327, "qat.plugins.FusionPlugin", false]], "gate (class in qat.lang.aqasm.gates)": [[237, "qat.lang.AQASM.gates.Gate", false]], "gate_noise (qat.hardware.defaulthardwaremodel attribute)": [[226, "qat.hardware.DefaultHardwareModel.gate_noise", false]], "gate_noise (qat.hardware.hardwaremodel attribute)": [[228, "qat.hardware.HardwareModel.gate_noise", false]], "gate_set (qat.core.circuit property)": [[109, "qat.core.Circuit.gate_set", false]], "gate_times (qat.hardware.defaultgatesspecification attribute)": [[225, "qat.hardware.DefaultGatesSpecification.gate_times", false]], "gate_times (qat.hardware.gatesspecification attribute)": [[227, "qat.hardware.GatesSpecification.gate_times", false]], "gatename (class in qat.pbo)": [[307, "qat.pbo.GateName", false]], "gaterewriter (class in qat.plugins)": [[328, "qat.plugins.GateRewriter", false]], "gates_specification (qat.hardware.defaulthardwaremodel attribute)": [[226, "qat.hardware.DefaultHardwareModel.gates_specification", false]], "gates_specification (qat.hardware.hardwaremodel attribute)": [[228, "qat.hardware.HardwareModel.gates_specification", false]], "gateset (class in qat.core.gate_set)": [[129, "qat.core.gate_set.GateSet", false]], "gatesignature (class in qat.core.gate_set)": [[130, "qat.core.gate_set.GateSignature", false]], "gatesspecification (class in qat.hardware)": [[227, "qat.hardware.GatesSpecification", false]], "gatesyntaxredefinition (class in qat.core.gate_set)": [[131, "qat.core.gate_set.GateSyntaxRedefinition", false]], "generate() (qat.generators.abstractgenerator method)": [[216, "qat.generators.AbstractGenerator.generate", false]], "generate() (qat.generators.combinatorialoptimizergenerator method)": [[217, "qat.generators.CombinatorialOptimizerGenerator.generate", false]], "generate() (qat.generators.graphcolouringgenerator method)": [[218, "qat.generators.GraphColouringGenerator.generate", false]], "generate() (qat.generators.graphpartitioninggenerator method)": [[219, "qat.generators.GraphPartitioningGenerator.generate", false]], "generate() (qat.generators.kcliquegenerator method)": [[220, "qat.generators.KCliqueGenerator.generate", false]], "generate() (qat.generators.maxcutgenerator method)": [[221, "qat.generators.MaxCutGenerator.generate", false]], "generate() (qat.generators.remotebatchgenerator method)": [[222, "qat.generators.RemoteBatchGenerator.generate", false]], "generate() (qat.generators.vertexcovergenerator method)": [[223, "qat.generators.VertexCoverGenerator.generate", false]], "generate_gate_set() (in module qat.lang.aqasm.misc)": [[238, "qat.lang.AQASM.misc.generate_gate_set", false]], "generate_noise() (qat.core.parameter method)": [[154, "qat.core.Parameter.generate_noise", false]], "generate_random_observable() (in module qat.synthopline.pauli_synth)": [[398, "qat.synthopline.pauli_synth.generate_random_observable", false]], "generate_trotter_ansatz() (in module qat.synthopline)": [[399, "qat.synthopline.generate_trotter_ansatz", false]], "generator_exception_only() (in module qat.core.exceptions_utils)": [[125, "qat.core.exceptions_utils.generator_exception_only", false]], "get_average_process_fidelity() (in module qat.quops.metrics)": [[363, "qat.quops.metrics.get_average_process_fidelity", false]], "get_best_index() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.get_best_index", false]], "get_best_index() (qat.nnize.metrics.quantumcostmetric method)": [[277, "qat.nnize.metrics.QuantumCostMetric.get_best_index", false]], "get_best_parameters() (qat.opt.bilp method)": [[280, "qat.opt.BILP.get_best_parameters", false]], "get_best_parameters() (qat.opt.graphcolouring method)": [[284, "qat.opt.GraphColouring.get_best_parameters", false]], "get_best_parameters() (qat.opt.graphpartitioning method)": [[285, "qat.opt.GraphPartitioning.get_best_parameters", false]], "get_best_parameters() (qat.opt.ising method)": [[286, "qat.opt.Ising.get_best_parameters", false]], "get_best_parameters() (qat.opt.kclique method)": [[287, "qat.opt.KClique.get_best_parameters", false]], "get_best_parameters() (qat.opt.maxcut method)": [[288, "qat.opt.MaxCut.get_best_parameters", false]], "get_best_parameters() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.get_best_parameters", false]], "get_best_parameters() (qat.opt.numberpartitioning method)": [[300, "qat.opt.NumberPartitioning.get_best_parameters", false]], "get_best_parameters() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.get_best_parameters", false]], "get_best_parameters() (qat.opt.vertexcover method)": [[304, "qat.opt.VertexCover.get_best_parameters", false]], "get_circuit() (qat.core.gate_set.gatesignature method)": [[130, "qat.core.gate_set.GateSignature.get_circuit", false]], "get_cluster_ops() (in module qat.fermion.chemistry.ucc)": [[188, "qat.fermion.chemistry.ucc.get_cluster_ops", false]], "get_current_qpu() (in module qat.qpus)": [[354, "qat.qpus.get_current_qpu", false]], "get_default_qpu() (in module qat.qpus)": [[355, "qat.qpus.get_default_qpu", false]], "get_diamond_norm() (in module qat.quops.metrics)": [[364, "qat.quops.metrics.get_diamond_norm", false]], "get_distribution() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.get_distribution", false]], "get_electronic_hamiltonian() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian", false]], "get_entanglement_process_fidelity() (in module qat.quops.metrics)": [[365, "qat.quops.metrics.get_entanglement_process_fidelity", false]], "get_euler_angles() (in module qat.pbo.decompositions.decompositions)": [[313, "qat.pbo.decompositions.decompositions.get_euler_angles", false]], "get_free_ancillae() (qat.lang.program method)": [[261, "qat.lang.Program.get_free_ancillae", false]], "get_free_ancillae() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.get_free_ancillae", false]], "get_gate_time() (qat.hardware.defaultgatesspecification method)": [[225, "qat.hardware.DefaultGatesSpecification.get_gate_time", false]], "get_gate_time() (qat.hardware.gatesspecification method)": [[227, "qat.hardware.GatesSpecification.get_gate_time", false]], "get_hf_ket() (in module qat.fermion.chemistry.ucc)": [[189, "qat.fermion.chemistry.ucc.get_hf_ket", false]], "get_j_h_and_offset() (qat.opt.ising method)": [[286, "qat.opt.Ising.get_j_h_and_offset", false]], "get_j_h_and_offset() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.get_j_h_and_offset", false]], "get_mapped_distribution() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.get_mapped_distribution", false]], "get_mapped_statevector() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.get_mapped_statevector", false]], "get_matrix() (qat.core.gate_set.gatesignature method)": [[130, "qat.core.gate_set.GateSignature.get_matrix", false]], "get_matrix() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.get_matrix", false]], "get_matrix() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.get_matrix", false]], "get_matrix() (qat.fermion.hamiltonians.spinhamiltonian method)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.get_matrix", false]], "get_noise() (qat.core.parameter method)": [[154, "qat.core.Parameter.get_noise", false]], "get_observable() (qat.opt.circuit_generator.circuitgenerator method)": [[281, "qat.opt.circuit_generator.CircuitGenerator.get_observable", false]], "get_observable() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.get_observable", false]], "get_observable() (qat.opt.ising method)": [[286, "qat.opt.Ising.get_observable", false]], "get_observable() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.get_observable", false]], "get_observable() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.get_observable", false]], "get_observable() (qat.opt.schedule_generator.schedulegenerator method)": [[302, "qat.opt.schedule_generator.ScheduleGenerator.get_observable", false]], "get_param_generator() (in module qat.core.circuit_builder.matrix_util)": [[120, "qat.core.circuit_builder.matrix_util.get_param_generator", false]], "get_permuted_statevector() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.get_permuted_statevector", false]], "get_predef_generator() (in module qat.core.circuit_builder.matrix_util)": [[121, "qat.core.circuit_builder.matrix_util.get_predef_generator", false]], "get_process_distance() (in module qat.quops.metrics)": [[366, "qat.quops.metrics.get_process_distance", false]], "get_q_and_offset() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.get_q_and_offset", false]], "get_quantum_channel() (qat.hardware.defaultgatesspecification method)": [[225, "qat.hardware.DefaultGatesSpecification.get_quantum_channel", false]], "get_quantum_channel() (qat.hardware.gatesspecification method)": [[227, "qat.hardware.GatesSpecification.get_quantum_channel", false]], "get_routine() (qat.lang.models.kptree method)": [[241, "qat.lang.models.KPTree.get_routine", false]], "get_specs() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.get_specs", false]], "get_state_fidelity() (in module qat.quops.metrics)": [[367, "qat.quops.metrics.get_state_fidelity", false]], "get_terms_obs() (qat.opt.boolexpr.clause method)": [[282, "qat.opt.boolexpr.Clause.get_terms_obs", false]], "get_terms_obs() (qat.opt.boolexpr.var method)": [[303, "qat.opt.boolexpr.Var.get_terms_obs", false]], "get_trace_distance() (in module qat.quops.metrics)": [[368, "qat.quops.metrics.get_trace_distance", false]], "get_variables() (qat.core.batch method)": [[107, "qat.core.Batch.get_variables", false]], "get_variables() (qat.core.circuit method)": [[109, "qat.core.Circuit.get_variables", false]], "get_variables() (qat.core.job method)": [[113, "qat.core.Job.get_variables", false]], "get_variables() (qat.core.schedule method)": [[158, "qat.core.Schedule.get_variables", false]], "get_variables() (qat.core.variable method)": [[163, "qat.core.Variable.get_variables", false]], "get_variables() (qat.core.variables.arithexpression method)": [[140, "qat.core.variables.ArithExpression.get_variables", false]], "get_variables() (qat.lang.aqasm.gates.paramgate method)": [[259, "qat.lang.AQASM.gates.ParamGate.get_variables", false]], "get_variables() (qat.opt.boolexpr.clause method)": [[282, "qat.opt.boolexpr.Clause.get_variables", false]], "get_variables() (qat.opt.boolexpr.var method)": [[303, "qat.opt.boolexpr.Var.get_variables", false]], "gradient() (qat.core.job method)": [[113, "qat.core.Job.gradient", false]], "gradientdescentoptimizer (class in qat.plugins)": [[329, "qat.plugins.GradientDescentOptimizer", false]], "graph (qat.opt.mwis attribute)": [[299, "qat.opt.MWIS.graph", false]], "graphcircuit (class in qat.pbo)": [[308, "qat.pbo.GraphCircuit", false]], "graphcolouring (class in qat.opt)": [[284, "qat.opt.GraphColouring", false]], "graphcolouringgenerator (class in qat.generators)": [[218, "qat.generators.GraphColouringGenerator", false]], "graphpartitioning (class in qat.opt)": [[285, "qat.opt.GraphPartitioning", false]], "graphpartitioninggenerator (class in qat.generators)": [[219, "qat.generators.GraphPartitioningGenerator", false]], "graphpartitioningresult (class in qat.opt.results)": [[296, "qat.opt.results.GraphPartitioningResult", false]], "greedy_mapping() (in module qat.synthopline.initial_mapping)": [[400, "qat.synthopline.initial_mapping.greedy_mapping", false]], "griddevice (class in qat.devices)": [[168, "qat.devices.GridDevice", false]], "grover_diffusion() (in module qat.lang.algorithms.amplification)": [[239, "qat.lang.algorithms.amplification.grover_diffusion", false]], "guess_init_params() (in module qat.fermion.chemistry.ucc)": [[190, "qat.fermion.chemistry.ucc.guess_init_params", false]], "h_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.h_left", false]], "h_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.h_right", false]], "hamiltonian (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.hamiltonian", false]], "hardwaremodel (class in qat.hardware)": [[228, "qat.hardware.HardwareModel", false]], "hardwarespecs (class in qat.core)": [[112, "qat.core.HardwareSpecs", false]], "householder() (in module qat.lang.algorithms.amplification)": [[240, "qat.lang.algorithms.amplification.householder", false]], "hpq (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpq", false]], "hpqrs (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpqrs", false]], "idle_noise (qat.hardware.defaulthardwaremodel attribute)": [[226, "qat.hardware.DefaultHardwareModel.idle_noise", false]], "idle_noise (qat.hardware.hardwaremodel attribute)": [[228, "qat.hardware.HardwareModel.idle_noise", false]], "independentaqo (class in qat.opt.mixing_factory)": [[291, "qat.opt.mixing_factory.IndependentAQO", false]], "index (qat.opt.boolexpr.var attribute)": [[303, "qat.opt.boolexpr.Var.index", false]], "init() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.init", false]], "init() (qat.nnize.metrics.quantumcostmetric method)": [[277, "qat.nnize.metrics.QuantumCostMetric.init", false]], "initialmapping (class in qat.plugins)": [[330, "qat.plugins.InitialMapping", false]], "initialstatebuilder (class in qat.opt.mixing_factory)": [[292, "qat.opt.mixing_factory.InitialStateBuilder", false]], "inject_initial_state() (qat.opt.mixing_factory.independentaqo method)": [[291, "qat.opt.mixing_factory.IndependentAQO.inject_initial_state", false]], "inject_initial_state() (qat.opt.mixing_factory.initialstatebuilder method)": [[292, "qat.opt.mixing_factory.InitialStateBuilder.inject_initial_state", false]], "inject_initial_state() (qat.opt.mixing_factory.simpleinitialstate method)": [[293, "qat.opt.mixing_factory.SimpleInitialState.inject_initial_state", false]], "insert_gate() (qat.core.circuit method)": [[109, "qat.core.Circuit.insert_gate", false]], "int (qat.core.wrappers.result.state property)": [[159, "qat.core.wrappers.result.State.int", false]], "integer_to_spins() (in module qat.core.spins)": [[135, "qat.core.spins.integer_to_spins", false]], "intermediatemeasurement (class in qat.comm.shared.ttypes)": [[101, "qat.comm.shared.ttypes.IntermediateMeasurement", false]], "inverse() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.inverse", false]], "ions_decomposition() (in module qat.pbo.decompositions)": [[314, "qat.pbo.decompositions.ions_decomposition", false]], "is_completely_positive() (in module qat.quops)": [[369, "qat.quops.is_completely_positive", false]], "is_trace_preserving() (in module qat.quops)": [[370, "qat.quops.is_trace_preserving", false]], "is_trace_reducing() (in module qat.quops)": [[371, "qat.quops.is_trace_reducing", false]], "is_unital() (in module qat.quops)": [[372, "qat.quops.is_unital", false]], "ising (class in qat.opt)": [[286, "qat.opt.Ising", false]], "ising (qat.core.observable attribute)": [[153, "qat.core.Observable.ising", false]], "iterate_simple() (qat.core.circuit method)": [[109, "qat.core.Circuit.iterate_simple", false]], "j_coupling_matrix (qat.opt.ising property)": [[286, "qat.opt.Ising.j_coupling_matrix", false]], "j_coupling_matrix (qat.opt.mwis property)": [[299, "qat.opt.MWIS.j_coupling_matrix", false]], "job (class in qat.core)": [[113, "qat.core.Job", false]], "job_id() (qat.interop.qiskit.qiskitjob method)": [[74, "qat.interop.qiskit.QiskitJob.job_id", false]], "jump_operators (qat.hardware.defaulthardwaremodel attribute)": [[226, "qat.hardware.DefaultHardwareModel.jump_operators", false]], "jump_operators (qat.hardware.hardwaremodel attribute)": [[228, "qat.hardware.HardwareModel.jump_operators", false]], "junction (class in qat.plugins)": [[331, "qat.plugins.Junction", false]], "kakcompression (class in qat.plugins)": [[332, "qat.plugins.KAKCompression", false]], "kclique (class in qat.opt)": [[287, "qat.opt.KClique", false]], "kcliquegenerator (class in qat.generators)": [[220, "qat.generators.KCliqueGenerator", false]], "kcliqueresult (class in qat.opt.results)": [[297, "qat.opt.results.KCliqueResult", false]], "kptree (class in qat.lang.models)": [[241, "qat.lang.models.KPTree", false]], "kraus_operators (qat.quops.quantumchannelkraus attribute)": [[388, "qat.quops.QuantumChannelKraus.kraus_operators", false]], "kraus_rank() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.kraus_rank", false]], "lazysynthesis (class in qat.plugins)": [[333, "qat.plugins.LazySynthesis", false]], "len() (qat.pbo.abstractregister method)": [[306, "qat.pbo.AbstractRegister.len", false]], "linear_operator_synthesis() (in module qat.synthopline)": [[401, "qat.synthopline.linear_operator_synthesis", false]], "linedevice (class in qat.devices)": [[176, "qat.devices.LineDevice", false]], "link() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.link", false]], "link_gates() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.link_gates", false]], "link_matrices() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.link_matrices", false]], "linker (class in qat.lang.linking)": [[242, "qat.lang.linking.Linker", false]], "list_decompositions() (in module qat.pbo.kak)": [[309, "qat.pbo.kak.list_decompositions", false]], "load() (qat.core.batch class method)": [[107, "qat.core.Batch.load", false]], "load() (qat.core.batchresult class method)": [[108, "qat.core.BatchResult.load", false]], "load() (qat.core.circuit class method)": [[109, "qat.core.Circuit.load", false]], "load() (qat.core.hardwarespecs class method)": [[112, "qat.core.HardwareSpecs.load", false]], "load() (qat.core.job class method)": [[113, "qat.core.Job.load", false]], "load() (qat.core.observable class method)": [[153, "qat.core.Observable.load", false]], "load() (qat.core.result class method)": [[156, "qat.core.Result.load", false]], "load() (qat.core.schedule class method)": [[158, "qat.core.Schedule.load", false]], "load() (qat.core.topology class method)": [[161, "qat.core.Topology.load", false]], "load() (qat.opt.ising class method)": [[286, "qat.opt.Ising.load", false]], "load() (qat.opt.mwis class method)": [[299, "qat.opt.MWIS.load", false]], "load_circuit() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.load_circuit", false]], "load_state_vector_from_bin() (in module qat.core.util)": [[114, "qat.core.util.load_state_vector_from_bin", false]], "logic() (qat.lang.program method)": [[261, "qat.lang.Program.logic", false]], "lsb_int (qat.core.wrappers.result.state property)": [[159, "qat.core.wrappers.result.State.lsb_int", false]], "magnetic_field_h (qat.opt.ising property)": [[286, "qat.opt.Ising.magnetic_field_h", false]], "magnetic_field_h (qat.opt.mwis property)": [[299, "qat.opt.MWIS.magnetic_field_h", false]], "make_anderson_model() (in module qat.fermion.hamiltonians)": [[191, "qat.fermion.hamiltonians.make_anderson_model", false]], "make_avg_fid_equiv_depol_channel() (in module qat.quops)": [[373, "qat.quops.make_avg_fid_equiv_depol_channel", false]], "make_compressed_ldca_circ() (in module qat.fermion.circuits)": [[192, "qat.fermion.circuits.make_compressed_ldca_circ", false]], "make_depolarizing_channel() (in module qat.quops)": [[374, "qat.quops.make_depolarizing_channel", false]], "make_depolarizing_hardware_model() (in module qat.hardware)": [[229, "qat.hardware.make_depolarizing_hardware_model", false]], "make_embedded_model() (in module qat.fermion.hamiltonians)": [[193, "qat.fermion.hamiltonians.make_embedded_model", false]], "make_general_hwe_circ() (in module qat.fermion.circuits)": [[194, "qat.fermion.circuits.make_general_hwe_circ", false]], "make_generalized_amplitude_damping() (in module qat.quops)": [[375, "qat.quops.make_generalized_amplitude_damping", false]], "make_hubbard_model() (in module qat.fermion.hamiltonians)": [[195, "qat.fermion.hamiltonians.make_hubbard_model", false]], "make_ldca_circ() (in module qat.fermion.circuits)": [[196, "qat.fermion.circuits.make_ldca_circ", false]], "make_mr_circ() (in module qat.fermion.circuits)": [[197, "qat.fermion.circuits.make_mr_circ", false]], "make_mrep_circ() (in module qat.fermion.circuits)": [[198, "qat.fermion.circuits.make_mrep_circ", false]], "make_pauli_matrix_basis() (in module qat.quops.math_util)": [[376, "qat.quops.math_util.make_pauli_matrix_basis", false]], "make_shallow_circ() (in module qat.fermion.circuits)": [[199, "qat.fermion.circuits.make_shallow_circ", false]], "make_standard_matrix_basis() (in module qat.quops.math_util)": [[377, "qat.quops.math_util.make_standard_matrix_basis", false]], "make_standard_vector_basis() (in module qat.quops.math_util)": [[378, "qat.quops.math_util.make_standard_vector_basis", false]], "make_trotterisation_routine() (in module qat.fermion.trotterisation)": [[200, "qat.fermion.trotterisation.make_trotterisation_routine", false]], "mat2nparray() (in module qat.pylinalg.simulator)": [[80, "qat.pylinalg.simulator.mat2nparray", false]], "matrix (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.matrix", false]], "matrix (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.matrix", false]], "matrix (qat.quops.quantumchannelchi attribute)": [[386, "qat.quops.QuantumChannelChi.matrix", false]], "matrix (qat.quops.quantumchannelchoi attribute)": [[387, "qat.quops.QuantumChannelChoi.matrix", false]], "matrix (qat.quops.quantumchannelptm property)": [[389, "qat.quops.QuantumChannelPTM.matrix", false]], "matrix_basis (qat.quops.quantumchannelchi attribute)": [[386, "qat.quops.QuantumChannelChi.matrix_basis", false]], "maxcut (class in qat.opt)": [[288, "qat.opt.MaxCut", false]], "maxcutgenerator (class in qat.generators)": [[221, "qat.generators.MaxCutGenerator", false]], "meas (qat.hardware.defaultgatesspecification attribute)": [[225, "qat.hardware.DefaultGatesSpecification.meas", false]], "meas (qat.hardware.gatesspecification attribute)": [[227, "qat.hardware.GatesSpecification.meas", false]], "measure() (in module qat.pylinalg.simulator)": [[81, "qat.pylinalg.simulator.measure", false]], "measure() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.measure", false]], "measure() (qat.lang.program method)": [[261, "qat.lang.Program.measure", false]], "minimize_idle_time() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.minimize_idle_time", false]], "minimize_overall_time() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.minimize_overall_time", false]], "mixingfactory (class in qat.opt)": [[289, "qat.opt.MixingFactory", false]], "modular_exp() (in module qat.lang.aqasm.arithmetic)": [[246, "qat.lang.AQASM.arithmetic.modular_exp", false]], "module": [[56, "module-qat", false], [57, "module-qat.interop", false], [58, "module-qat.interop.cirq", false], [61, "module-qat.interop.openqasm", false], [63, "module-qat.interop.projectq", false], [66, "module-qat.interop.pyquil", false], [70, "module-qat.interop.qiskit", false], [78, "module-qat.pylinalg", false], [79, "module-qat.pylinalg.simulator", false], [86, "module-qat.comm", false], [87, "module-qat.comm.datamodel", false], [90, "module-qat.comm.exceptions", false], [95, "module-qat.comm.resource", false], [100, "module-qat.comm.shared", false], [103, "module-qat.core", false], [115, "module-qat.core.application", false], [118, "module-qat.core.circuit_builder", false], [123, "module-qat.core.exceptions_utils", false], [128, "module-qat.core.gate_set", false], [132, "module-qat.core.qpu", false], [134, "module-qat.core.spins", false], [137, "module-qat.core.variables", false], [165, "module-qat.devices", false], [181, "module-qat.fermion", false], [181, "module-qat.fermion.chemistry", false], [181, "module-qat.fermion.chemistry.qse", false], [181, "module-qat.fermion.chemistry.ucc", false], [181, "module-qat.fermion.circuits", false], [181, "module-qat.fermion.hamiltonians", false], [181, "module-qat.fermion.phase_estimation", false], [181, "module-qat.fermion.transforms", false], [211, "module-qat.fusion", false], [215, "module-qat.generators", false], [224, "module-qat.hardware", false], [230, "module-qat.lang", false], [230, "module-qat.lang.algorithms", false], [243, "module-qat.lang.AQASM.arithmetic", false], [249, "module-qat.lang.AQASM.classarith", false], [253, "module-qat.lang.AQASM.qftarith", false], [275, "module-qat.nnize", false], [278, "module-qat.opt", false], [290, "module-qat.opt.mixing_factory", false], [294, "module-qat.opt.results", false], [305, "module-qat.pbo", false], [310, "module-qat.pbo.collections", false], [312, "module-qat.pbo.decompositions", false], [321, "module-qat.plugins", false], [349, "module-qat.qpus", false], [358, "module-qat.quops", false], [358, "module-qat.quops.metrics", false], [390, "module-qat.synthopline", false]], "molecularhamiltonian (class in qat.fermion.chemistry.wrapper)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian", false]], "moleculeinfo (class in qat.fermion.chemistry.wrapper)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo", false]], "mult() (in module qat.lang.aqasm.qftarith)": [[256, "qat.lang.AQASM.qftarith.mult", false]], "mult_const() (in module qat.lang.aqasm.arithmetic)": [[247, "qat.lang.AQASM.arithmetic.mult_const", false]], "mult_const() (in module qat.lang.aqasm.qftarith)": [[257, "qat.lang.AQASM.qftarith.mult_const", false]], "mult_const_mod() (in module qat.lang.aqasm.arithmetic)": [[248, "qat.lang.AQASM.arithmetic.mult_const_mod", false]], "multikron() (in module qat.quops.math_util)": [[379, "qat.quops.math_util.multikron", false]], "multiplelaunchesanalyzer (class in qat.plugins)": [[334, "qat.plugins.MultipleLaunchesAnalyzer", false]], "multiply_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.multiply_right", false]], "mwis (class in qat.opt)": [[299, "qat.opt.MWIS", false]], "n_electrons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.n_electrons", false]], "naivestrategy (class in qat.fusion.strategies)": [[214, "qat.fusion.strategies.NaiveStrategy", false]], "name (qat.quops.parametricamplitudedamping attribute)": [[380, "qat.quops.ParametricAmplitudeDamping.name", false]], "name (qat.quops.parametricpuredephasing attribute)": [[382, "qat.quops.ParametricPureDephasing.name", false]], "name (qat.quops.quantumchannelchi attribute)": [[386, "qat.quops.QuantumChannelChi.name", false]], "name (qat.quops.quantumchannelchoi attribute)": [[387, "qat.quops.QuantumChannelChoi.name", false]], "name (qat.quops.quantumchannelkraus attribute)": [[388, "qat.quops.QuantumChannelKraus.name", false]], "name (qat.quops.quantumchannelptm attribute)": [[389, "qat.quops.QuantumChannelPTM.name", false]], "nbqbits (qat.core.hardwarespecs property)": [[112, "qat.core.HardwareSpecs.nbqbits", false]], "nbqbits (qat.core.observable attribute)": [[153, "qat.core.Observable.nbqbits", false]], "nbqbits (qat.core.topology property)": [[161, "qat.core.Topology.nbqbits", false]], "nbqbits (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.nbqbits", false]], "nbqbits (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.nbqbits", false]], "neg_clause() (qat.opt.boolexpr.clause static method)": [[282, "qat.opt.boolexpr.Clause.neg_clause", false]], "new_group() (qat.plugins.patternmanager method)": [[339, "qat.plugins.PatternManager.new_group", false]], "new_var() (qat.lang.program method)": [[261, "qat.lang.Program.new_var", false]], "new_var() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.new_var", false]], "new_vars() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.new_vars", false]], "new_wires() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.new_wires", false]], "nisqcompiler (class in qat.plugins)": [[335, "qat.plugins.NISQCompiler", false]], "nnizer (class in qat.plugins)": [[336, "qat.plugins.Nnizer", false]], "nodetype (class in qat.comm.resource.ttypes)": [[98, "qat.comm.resource.ttypes.NodeType", false]], "noons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.noons", false]], "normal_order (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.normal_order", false]], "nqbits (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.nqbits", false]], "nqbits (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.nqbits", false]], "numberpartitioning (class in qat.opt)": [[300, "qat.opt.NumberPartitioning", false]], "observable (class in qat.core)": [[153, "qat.core.Observable", false]], "observablesplitter (class in qat.plugins)": [[337, "qat.plugins.ObservableSplitter", false]], "one_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.one_body_integrals", false]], "one_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.one_body_integrals", false]], "op (class in qat.comm.datamodel.ttypes)": [[89, "qat.comm.datamodel.ttypes.Op", false]], "op (qat.core.term attribute)": [[160, "qat.core.Term.op", false]], "operatortableau (class in qat.synthopline.interface)": [[402, "qat.synthopline.interface.OperatorTableau", false]], "optimize() (qat.plugins.optimizer method)": [[338, "qat.plugins.Optimizer.optimize", false]], "optimizer (class in qat.plugins)": [[338, "qat.plugins.Optimizer", false]], "oqasmparser (class in qat.interop.openqasm)": [[62, "qat.interop.openqasm.OqasmParser", false]], "or_clause() (qat.opt.boolexpr.clause static method)": [[282, "qat.opt.boolexpr.Clause.or_clause", false]], "orbital_energies (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.orbital_energies", false]], "parameter (class in qat.core)": [[154, "qat.core.Parameter", false]], "parameter_map (qat.core.job property)": [[113, "qat.core.Job.parameter_map", false]], "parameter_map (qat.core.result property)": [[156, "qat.core.Result.parameter_map", false]], "parametricamplitudedamping (class in qat.quops)": [[380, "qat.quops.ParametricAmplitudeDamping", false]], "parametricgatenoise (class in qat.quops)": [[381, "qat.quops.ParametricGateNoise", false]], "parametricpuredephasing (class in qat.quops)": [[382, "qat.quops.ParametricPureDephasing", false]], "parametricquantumchannel (class in qat.quops)": [[383, "qat.quops.ParametricQuantumChannel", false]], "paramgate (class in qat.lang.aqasm.gates)": [[259, "qat.lang.AQASM.gates.ParamGate", false]], "params_specification (qat.hardware.defaulthardwaremodel attribute)": [[226, "qat.hardware.DefaultHardwareModel.params_specification", false]], "params_specification (qat.hardware.hardwaremodel attribute)": [[228, "qat.hardware.HardwareModel.params_specification", false]], "parse_result() (qat.opt.graphcolouring method)": [[284, "qat.opt.GraphColouring.parse_result", false]], "parse_result() (qat.opt.graphpartitioning method)": [[285, "qat.opt.GraphPartitioning.parse_result", false]], "parse_result() (qat.opt.kclique method)": [[287, "qat.opt.KClique.parse_result", false]], "parse_result() (qat.opt.maxcut method)": [[288, "qat.opt.MaxCut.parse_result", false]], "parse_result() (qat.opt.vertexcover method)": [[304, "qat.opt.VertexCover.parse_result", false]], "partial_trace() (in module qat.quops.math_util)": [[384, "qat.quops.math_util.partial_trace", false]], "pattern_to_remove() (qat.pbo.patterngroup method)": [[319, "qat.pbo.PatternGroup.pattern_to_remove", false]], "patterngroup (class in qat.pbo)": [[319, "qat.pbo.PatternGroup", false]], "patternmanager (class in qat.plugins)": [[339, "qat.plugins.PatternManager", false]], "perform_phase_estimation (class in qat.fermion.phase_estimation)": [[203, "qat.fermion.phase_estimation.perform_phase_estimation", false]], "perform_pyscf_computation() (in module qat.fermion.chemistry.pyscf_tools)": [[204, "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", false]], "phase() (qat.lang.aqasm.qbool.qbool method)": [[264, "qat.lang.AQASM.qbool.QBool.phase", false]], "phase() (qat.lang.aqasm.qbool.qclause method)": [[266, "qat.lang.AQASM.qbool.QClause.phase", false]], "phase() (qat.lang.aqasm.qint.qcompexp method)": [[267, "qat.lang.AQASM.qint.QCompExp.phase", false]], "phase_estimation() (in module qat.lang.algorithms)": [[260, "qat.lang.algorithms.phase_estimation", false]], "phase_polynomial_synthesis() (in module qat.synthopline)": [[403, "qat.synthopline.phase_polynomial_synthesis", false]], "plot() (qat.core.result method)": [[156, "qat.core.Result.plot", false]], "plot_in_notebook() (in module qat.core.printer)": [[155, "qat.core.printer.plot_in_notebook", false]], "plugin_exception_only() (in module qat.core.exceptions_utils)": [[126, "qat.core.exceptions_utils.plugin_exception_only", false]], "pop_prohibited_value() (qat.pbo.var method)": [[320, "qat.pbo.VAR.pop_prohibited_value", false]], "post_process() (qat.generators.combinatorialoptimizergenerator method)": [[217, "qat.generators.CombinatorialOptimizerGenerator.post_process", false]], "post_process() (qat.generators.remotebatchgenerator method)": [[222, "qat.generators.RemoteBatchGenerator.post_process", false]], "post_process() (qat.plugins.abstractplugin method)": [[322, "qat.plugins.AbstractPlugin.post_process", false]], "pretty_print() (qat.core.variables.arithexpression method)": [[140, "qat.core.variables.ArithExpression.pretty_print", false]], "print() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.print", false]], "prob() (qat.quops.parametricamplitudedamping method)": [[380, "qat.quops.ParametricAmplitudeDamping.prob", false]], "prob() (qat.quops.parametricpuredephasing method)": [[382, "qat.quops.ParametricPureDephasing.prob", false]], "probability() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.probability", false]], "processingtype (class in qat.comm.shared.ttypes)": [[102, "qat.comm.shared.ttypes.ProcessingType", false]], "produce_j_h_and_offset() (in module qat.opt.graph_partitioning)": [[285, "qat.opt.graph_partitioning.produce_j_h_and_offset", false]], "produce_j_h_and_offset() (in module qat.opt.max_cut)": [[288, "qat.opt.max_cut.produce_j_h_and_offset", false]], "produce_j_h_and_offset() (in module qat.opt.number_partitioning)": [[300, "qat.opt.number_partitioning.produce_j_h_and_offset", false]], "produce_q_and_offset() (in module qat.opt.binary_linear_integer_programming)": [[280, "qat.opt.binary_linear_integer_programming.produce_q_and_offset", false]], "produce_q_and_offset() (in module qat.opt.graph_colouring)": [[284, "qat.opt.graph_colouring.produce_q_and_offset", false]], "produce_q_and_offset() (in module qat.opt.k_clique)": [[287, "qat.opt.k_clique.produce_q_and_offset", false]], "produce_q_and_offset() (in module qat.opt.vertex_cover)": [[304, "qat.opt.vertex_cover.produce_q_and_offset", false]], "program (class in qat.lang)": [[261, "qat.lang.Program", false]], "project() (in module qat.pylinalg.simulator)": [[82, "qat.pylinalg.simulator.project", false]], "project() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.project", false]], "project_then_reset() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.project_then_reset", false]], "projectq_to_qlm() (qat.interop.projectq.aqasmengine method)": [[64, "qat.interop.projectq.AqasmEngine.projectq_to_qlm", false]], "psd (qat.core.parameter property)": [[154, "qat.core.Parameter.psd", false]], "psi_0 (qat.core.job property)": [[113, "qat.core.Job.psi_0", false]], "psominimizeplugin (class in qat.plugins)": [[340, "qat.plugins.PSOMinimizePlugin", false]], "ptilde() (qat.quops.parametricpuredephasing method)": [[382, "qat.quops.ParametricPureDephasing.ptilde", false]], "ptm (qat.quops.quantumchannelptm property)": [[389, "qat.quops.QuantumChannelPTM.ptm", false]], "pylinalg (class in qat.qpus)": [[351, "qat.qpus.PyLinalg", false]], "pyquil_to_qlm() (in module qat.interop.pyquil)": [[67, "qat.interop.pyquil.pyquil_to_qlm", false]], "pyquilqpu (class in qat.interop.pyquil)": [[68, "qat.interop.pyquil.PyquilQPU", false]], "q_matrix (qat.opt.qubo property)": [[301, "qat.opt.QUBO.q_matrix", false]], "qalloc() (qat.lang.program method)": [[261, "qat.lang.Program.qalloc", false]], "qaoa_circuit() (qat.vsolve.ansatz.ansatzfactory static method)": [[279, "qat.vsolve.ansatz.AnsatzFactory.qaoa_circuit", false]], "qaoa_job() (qat.opt.circuit_generator.circuitgenerator method)": [[281, "qat.opt.circuit_generator.CircuitGenerator.qaoa_job", false]], "qaoa_job() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.qaoa_job", false]], "qaoa_job() (qat.opt.ising method)": [[286, "qat.opt.Ising.qaoa_job", false]], "qaoa_job() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.qaoa_job", false]], "qaoa_job() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.qaoa_job", false]], "qarithexp (class in qat.lang.aqasm.qint)": [[262, "qat.lang.AQASM.qint.QArithExp", false]], "qat": [[56, "module-qat", false]], "qat.comm": [[86, "module-qat.comm", false]], "qat.comm.datamodel": [[87, "module-qat.comm.datamodel", false]], "qat.comm.datamodel.ttypes.gatedefinition (built-in class)": [[88, "qat.comm.datamodel.ttypes.GateDefinition", false]], "qat.comm.exceptions": [[90, "module-qat.comm.exceptions", false]], "qat.comm.exceptions.ttypes.errortype (built-in class)": [[91, "qat.comm.exceptions.ttypes.ErrorType", false]], "qat.comm.exceptions.ttypes.generatorexception (built-in class)": [[92, "qat.comm.exceptions.ttypes.GeneratorException", false]], "qat.comm.exceptions.ttypes.pluginexception (built-in class)": [[93, "qat.comm.exceptions.ttypes.PluginException", false]], "qat.comm.exceptions.ttypes.qpuexception (built-in class)": [[94, "qat.comm.exceptions.ttypes.QPUException", false]], "qat.comm.resource": [[95, "module-qat.comm.resource", false]], "qat.comm.resource.ttypes.allocationmodel (built-in class)": [[96, "qat.comm.resource.ttypes.AllocationModel", false]], "qat.comm.resource.ttypes.device (built-in class)": [[97, "qat.comm.resource.ttypes.Device", false]], "qat.comm.resource.ttypes.resourcemodel (built-in class)": [[99, "qat.comm.resource.ttypes.ResourceModel", false]], "qat.comm.shared": [[100, "module-qat.comm.shared", false]], "qat.core": [[103, "module-qat.core", false]], "qat.core.application": [[115, "module-qat.core.application", false]], "qat.core.circuit_builder": [[118, "module-qat.core.circuit_builder", false]], "qat.core.exceptions_utils": [[123, "module-qat.core.exceptions_utils", false]], "qat.core.gate_set": [[128, "module-qat.core.gate_set", false]], "qat.core.qpu": [[132, "module-qat.core.qpu", false]], "qat.core.spins": [[134, "module-qat.core.spins", false]], "qat.core.variables": [[137, "module-qat.core.variables", false]], "qat.core.variables.abso()": [[138, "qat.core.variables.abso", false]], "qat.core.variables.angle()": [[139, "qat.core.variables.angle", false]], "qat.core.variables.atan2()": [[141, "qat.core.variables.atan2", false]], "qat.core.variables.cos()": [[142, "qat.core.variables.cos", false]], "qat.core.variables.exp()": [[143, "qat.core.variables.exp", false]], "qat.core.variables.get_item()": [[144, "qat.core.variables.get_item", false]], "qat.core.variables.heaviside()": [[145, "qat.core.variables.heaviside", false]], "qat.core.variables.imag()": [[146, "qat.core.variables.imag", false]], "qat.core.variables.ln()": [[147, "qat.core.variables.ln", false]], "qat.core.variables.real()": [[148, "qat.core.variables.real", false]], "qat.core.variables.sin()": [[149, "qat.core.variables.sin", false]], "qat.core.variables.sqrt()": [[150, "qat.core.variables.sqrt", false]], "qat.core.variables.vmax()": [[152, "qat.core.variables.vmax", false]], "qat.devices": [[165, "module-qat.devices", false]], "qat.devices.google_sycamore (built-in variable)": [[167, "qat.devices.GOOGLE_SYCAMORE", false]], "qat.devices.ibm_burlington (built-in variable)": [[169, "qat.devices.IBM_BURLINGTON", false]], "qat.devices.ibm_johannesburg (built-in variable)": [[170, "qat.devices.IBM_JOHANNESBURG", false]], "qat.devices.ibm_melbourne (built-in variable)": [[171, "qat.devices.IBM_MELBOURNE", false]], "qat.devices.ibm_rueschlikon (built-in variable)": [[172, "qat.devices.IBM_RUESCHLIKON", false]], "qat.devices.ibm_singapore (built-in variable)": [[173, "qat.devices.IBM_SINGAPORE", false]], "qat.devices.ibm_tokyo (built-in variable)": [[174, "qat.devices.IBM_TOKYO", false]], "qat.devices.ibm_yorktown (built-in variable)": [[175, "qat.devices.IBM_YORKTOWN", false]], "qat.devices.rigetti_agave (built-in variable)": [[177, "qat.devices.RIGETTI_AGAVE", false]], "qat.devices.rigetti_aspen (built-in variable)": [[178, "qat.devices.RIGETTI_ASPEN", false]], "qat.devices.zuchongzhi (built-in variable)": [[180, "qat.devices.ZUCHONGZHI", false]], "qat.fermion": [[181, "module-qat.fermion", false]], "qat.fermion.chemistry": [[181, "module-qat.fermion.chemistry", false]], "qat.fermion.chemistry.qse": [[181, "module-qat.fermion.chemistry.qse", false]], "qat.fermion.chemistry.ucc": [[181, "module-qat.fermion.chemistry.ucc", false]], "qat.fermion.circuits": [[181, "module-qat.fermion.circuits", false]], "qat.fermion.hamiltonians": [[181, "module-qat.fermion.hamiltonians", false]], "qat.fermion.phase_estimation": [[181, "module-qat.fermion.phase_estimation", false]], "qat.fermion.transforms": [[181, "module-qat.fermion.transforms", false]], "qat.fusion": [[211, "module-qat.fusion", false]], "qat.generators": [[215, "module-qat.generators", false]], "qat.hardware": [[224, "module-qat.hardware", false]], "qat.interop": [[57, "module-qat.interop", false]], "qat.interop.cirq": [[58, "module-qat.interop.cirq", false]], "qat.interop.openqasm": [[61, "module-qat.interop.openqasm", false]], "qat.interop.projectq": [[63, "module-qat.interop.projectq", false]], "qat.interop.pyquil": [[66, "module-qat.interop.pyquil", false]], "qat.interop.qiskit": [[70, "module-qat.interop.qiskit", false]], "qat.lang": [[230, "module-qat.lang", false]], "qat.lang.algorithms": [[230, "module-qat.lang.algorithms", false]], "qat.lang.aqasm.arithmetic": [[243, "module-qat.lang.AQASM.arithmetic", false]], "qat.lang.aqasm.classarith": [[249, "module-qat.lang.AQASM.classarith", false]], "qat.lang.aqasm.qftarith": [[253, "module-qat.lang.AQASM.qftarith", false]], "qat.nnize": [[275, "module-qat.nnize", false]], "qat.opt": [[278, "module-qat.opt", false]], "qat.opt.mixing_factory": [[290, "module-qat.opt.mixing_factory", false]], "qat.opt.results": [[294, "module-qat.opt.results", false]], "qat.pbo": [[305, "module-qat.pbo", false]], "qat.pbo.collections": [[310, "module-qat.pbo.collections", false]], "qat.pbo.decompositions": [[312, "module-qat.pbo.decompositions", false]], "qat.plugins": [[321, "module-qat.plugins", false]], "qat.pylinalg": [[78, "module-qat.pylinalg", false]], "qat.pylinalg.simulator": [[79, "module-qat.pylinalg.simulator", false]], "qat.qpus": [[349, "module-qat.qpus", false]], "qat.quops": [[358, "module-qat.quops", false]], "qat.quops.metrics": [[358, "module-qat.quops.metrics", false]], "qat.synthopline": [[390, "module-qat.synthopline", false]], "qbit (class in qat.lang.aqasm.bits)": [[263, "qat.lang.AQASM.bits.Qbit", false]], "qbits (qat.core.term attribute)": [[160, "qat.core.Term.qbits", false]], "qbits_list() (qat.lang.aqasm.qbool.qbool method)": [[264, "qat.lang.AQASM.qbool.QBool.qbits_list", false]], "qbits_list() (qat.lang.aqasm.qbool.qboolarray method)": [[265, "qat.lang.AQASM.qbool.QBoolArray.qbits_list", false]], "qbits_list() (qat.lang.aqasm.qbool.qclause method)": [[266, "qat.lang.AQASM.qbool.QClause.qbits_list", false]], "qbits_list() (qat.lang.aqasm.qint.qcompexp method)": [[267, "qat.lang.AQASM.qint.QCompExp.qbits_list", false]], "qbits_list() (qat.lang.aqasm.qint.qint method)": [[269, "qat.lang.AQASM.qint.QInt.qbits_list", false]], "qbool (class in qat.lang.aqasm.qbool)": [[264, "qat.lang.AQASM.qbool.QBool", false]], "qboolarray (class in qat.lang.aqasm.qbool)": [[265, "qat.lang.AQASM.qbool.QBoolArray", false]], "qclause (class in qat.lang.aqasm.qbool)": [[266, "qat.lang.AQASM.qbool.QClause", false]], "qcompexp (class in qat.lang.aqasm.qint)": [[267, "qat.lang.AQASM.qint.QCompExp", false]], "qft() (in module qat.lang.aqasm.qftarith)": [[258, "qat.lang.AQASM.qftarith.QFT", false]], "qfunc() (in module qat.lang)": [[268, "qat.lang.qfunc", false]], "qint (class in qat.lang.aqasm.qint)": [[269, "qat.lang.AQASM.qint.QInt", false]], "qiskit_to_qlm() (in module qat.interop.qiskit)": [[73, "qat.interop.qiskit.qiskit_to_qlm", false]], "qiskitjob (class in qat.interop.qiskit)": [[74, "qat.interop.qiskit.QiskitJob", false]], "qiskitruntimeqpu (class in qat.interop.qiskit.runtime)": [[75, "qat.interop.qiskit.runtime.QiskitRuntimeQPU", false]], "qlm_to_cirq() (in module qat.interop.cirq)": [[60, "qat.interop.cirq.qlm_to_cirq", false]], "qlm_to_pyquil() (in module qat.interop.pyquil)": [[69, "qat.interop.pyquil.qlm_to_pyquil", false]], "qlm_to_qiskit() (in module qat.interop.qiskit)": [[76, "qat.interop.qiskit.qlm_to_qiskit", false]], "qpu_exception_only() (in module qat.core.exceptions_utils)": [[127, "qat.core.exceptions_utils.qpu_exception_only", false]], "qpuhandler (class in qat.qpus)": [[356, "qat.qpus.QPUHandler", false]], "qputobackend (class in qat.interop.qiskit)": [[77, "qat.interop.qiskit.QPUToBackend", false]], "qregister (class in qat.lang.aqasm.bits)": [[270, "qat.lang.AQASM.bits.QRegister", false]], "qrout() (in module qat.lang)": [[271, "qat.lang.qrout", false]], "qroutine (class in qat.lang)": [[272, "qat.lang.QRoutine", false]], "quameleonplugin (class in qat.plugins)": [[341, "qat.plugins.QuameleonPlugin", false]], "quantum_channels (qat.hardware.defaultgatesspecification attribute)": [[225, "qat.hardware.DefaultGatesSpecification.quantum_channels", false]], "quantum_channels (qat.hardware.gatesspecification attribute)": [[227, "qat.hardware.GatesSpecification.quantum_channels", false]], "quantum_counting() (in module qat.lang.algorithms)": [[273, "qat.lang.algorithms.quantum_counting", false]], "quantumchannel (class in qat.quops)": [[385, "qat.quops.QuantumChannel", false]], "quantumchannelchi (class in qat.quops)": [[386, "qat.quops.QuantumChannelChi", false]], "quantumchannelchoi (class in qat.quops)": [[387, "qat.quops.QuantumChannelChoi", false]], "quantumchannelkraus (class in qat.quops)": [[388, "qat.quops.QuantumChannelKraus", false]], "quantumchannelptm (class in qat.quops)": [[389, "qat.quops.QuantumChannelPTM", false]], "quantumcostmetric (class in qat.nnize.metrics)": [[277, "qat.nnize.metrics.QuantumCostMetric", false]], "qubo (class in qat.opt)": [[301, "qat.opt.QUBO", false]], "raise_break() (in module qat.pylinalg.simulator)": [[83, "qat.pylinalg.simulator.raise_break", false]], "random_linear_operator() (in module qat.synthopline.linear_synthesis)": [[404, "qat.synthopline.linear_synthesis.random_linear_operator", false]], "random_phase_polynomial() (in module qat.synthopline.phase_polynomials)": [[405, "qat.synthopline.phase_polynomials.random_phase_polynomial", false]], "remap (class in qat.plugins)": [[342, "qat.plugins.Remap", false]], "remoteapplication (class in qat.core.application)": [[117, "qat.core.application.RemoteApplication", false]], "remotebatchgenerator (class in qat.generators)": [[222, "qat.generators.RemoteBatchGenerator", false]], "remoteplugin (class in qat.plugins)": [[343, "qat.plugins.RemotePlugin", false]], "remoteqpu (class in qat.qpus)": [[357, "qat.qpus.RemoteQPU", false]], "remove_locks() (qat.core.circuit method)": [[109, "qat.core.Circuit.remove_locks", false]], "replace_pattern() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.replace_pattern", false]], "replace_pattern() (qat.plugins.patternmanager method)": [[339, "qat.plugins.PatternManager.replace_pattern", false]], "reset() (in module qat.pylinalg.simulator)": [[84, "qat.pylinalg.simulator.reset", false]], "reset() (qat.lang.program method)": [[261, "qat.lang.Program.reset", false]], "reset_to_str() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.reset_to_str", false]], "restrict_active_space() (qat.fermion.chemistry.wrapper.moleculeinfo method)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.restrict_active_space", false]], "result (class in qat.core)": [[156, "qat.core.Result", false]], "result() (qat.interop.qiskit.qiskitjob method)": [[74, "qat.interop.qiskit.QiskitJob.result", false]], "retrieve_job() (qat.interop.qiskit.asyncbackendtoqpu method)": [[71, "qat.interop.qiskit.AsyncBackendToQPU.retrieve_job", false]], "run() (qat.core.circuit method)": [[109, "qat.core.Circuit.run", false]], "run() (qat.core.job method)": [[113, "qat.core.Job.run", false]], "run() (qat.lang.program method)": [[261, "qat.lang.Program.run", false]], "run() (qat.plugins.junction method)": [[331, "qat.plugins.Junction.run", false]], "rx_minus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rx_minus_left", false]], "rx_minus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rx_minus_right", false]], "rx_plus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rx_plus_left", false]], "rx_plus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rx_plus_right", false]], "ry_minus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.ry_minus_left", false]], "ry_minus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.ry_minus_right", false]], "ry_plus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.ry_plus_left", false]], "ry_plus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.ry_plus_right", false]], "ryd_job() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.ryd_job", false]], "ryd_job() (qat.opt.ising method)": [[286, "qat.opt.Ising.ryd_job", false]], "ryd_job() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.ryd_job", false]], "ryd_job() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.ryd_job", false]], "rz_minus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rz_minus_left", false]], "rz_minus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rz_minus_right", false]], "rz_plus_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rz_plus_left", false]], "rz_plus_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.rz_plus_right", false]], "sample (class in qat.core)": [[157, "qat.core.Sample", false]], "sample() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.sample", false]], "sample_subset() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.sample_subset", false]], "schedule (class in qat.core)": [[158, "qat.core.Schedule", false]], "schedulegenerator (class in qat.opt.schedule_generator)": [[302, "qat.opt.schedule_generator.ScheduleGenerator", false]], "scipyminimizeplugin (class in qat.plugins)": [[344, "qat.plugins.ScipyMinimizePlugin", false]], "select_active_orbitals() (in module qat.fermion.chemistry.ucc)": [[205, "qat.fermion.chemistry.ucc.select_active_orbitals", false]], "select_active_space() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.select_active_space", false]], "seqoptim (class in qat.plugins)": [[345, "qat.plugins.SeqOptim", false]], "serve() (qat.core.application.application method)": [[116, "qat.core.application.Application.serve", false]], "serve() (qat.generators.abstractgenerator method)": [[216, "qat.generators.AbstractGenerator.serve", false]], "serve() (qat.plugins.abstractplugin method)": [[322, "qat.plugins.AbstractPlugin.serve", false]], "serve() (qat.qpus.pylinalg method)": [[351, "qat.qpus.PyLinalg.serve", false]], "serve() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.serve", false]], "set_ancillae() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.set_ancillae", false]], "set_circuit_generator() (qat.core.gate_set.gatesignature method)": [[130, "qat.core.gate_set.GateSignature.set_circuit_generator", false]], "set_compile_attributes() (qat.plugins.patternmanager method)": [[339, "qat.plugins.PatternManager.set_compile_attributes", false]], "set_dag() (qat.lang.abstractgate method)": [[231, "qat.lang.AbstractGate.set_dag", false]], "set_gate_set() (qat.lang.linking.linker method)": [[242, "qat.lang.linking.Linker.set_gate_set", false]], "set_gate_time() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.set_gate_time", false]], "set_matrix_generator() (qat.core.gate_set.gatesignature method)": [[130, "qat.core.gate_set.GateSignature.set_matrix_generator", false]], "set_nbqbits() (qat.core.topology method)": [[161, "qat.core.Topology.set_nbqbits", false]], "set_nnizer() (qat.nnize.metrics.durationmetric method)": [[276, "qat.nnize.metrics.DurationMetric.set_nnizer", false]], "set_nnizer() (qat.nnize.metrics.quantumcostmetric method)": [[277, "qat.nnize.metrics.QuantumCostMetric.set_nnizer", false]], "set_num_threads() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.set_num_threads", false]], "set_options() (qat.plugins.scipyminimizeplugin method)": [[344, "qat.plugins.ScipyMinimizePlugin.set_options", false]], "set_qpu() (qat.interop.pyquil.pyquilqpu method)": [[68, "qat.interop.pyquil.PyquilQPU.set_qpu", false]], "set_qpu() (qat.interop.qiskit.qputobackend method)": [[77, "qat.interop.qiskit.QPUToBackend.set_qpu", false]], "set_qreg() (qat.core.sample method)": [[157, "qat.core.Sample.set_qreg", false]], "set_value() (qat.lang.aqasm.qint.qint method)": [[269, "qat.lang.AQASM.qint.QInt.set_value", false]], "set_value() (qat.pbo.var method)": [[320, "qat.pbo.VAR.set_value", false]], "shift_jump_operators() (qat.hardware.defaulthardwaremodel method)": [[226, "qat.hardware.DefaultHardwareModel.shift_jump_operators", false]], "shift_jump_operators() (qat.hardware.hardwaremodel method)": [[228, "qat.hardware.HardwareModel.shift_jump_operators", false]], "shift_qbits() (qat.core.circuit method)": [[109, "qat.core.Circuit.shift_qbits", false]], "shift_qbits() (qat.core.job method)": [[113, "qat.core.Job.shift_qbits", false]], "simpleinitialstate (class in qat.opt.mixing_factory)": [[293, "qat.opt.mixing_factory.SimpleInitialState", false]], "simulate() (in module qat.pylinalg.simulator)": [[85, "qat.pylinalg.simulator.simulate", false]], "simulate_circuit() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.simulate_circuit", false]], "simulatedannealing (class in qat.qpus)": [[352, "qat.qpus.SimulatedAnnealing", false]], "spinhamiltonian (class in qat.fermion.hamiltonians)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian", false]], "spins_to_integer() (in module qat.core.spins)": [[136, "qat.core.spins.spins_to_integer", false]], "spsaminimizeplugin (class in qat.plugins)": [[346, "qat.plugins.SPSAMinimizePlugin", false]], "sqa_job() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.sqa_job", false]], "sqa_job() (qat.opt.ising method)": [[286, "qat.opt.Ising.sqa_job", false]], "sqa_job() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.sqa_job", false]], "sqa_job() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.sqa_job", false]], "squaregriddevice (class in qat.devices)": [[179, "qat.devices.SquareGridDevice", false]], "state (class in qat.core.wrappers.result)": [[159, "qat.core.wrappers.result.State", false]], "state (qat.core.sample property)": [[157, "qat.core.Sample.state", false]], "state_prep (qat.hardware.defaultgatesspecification attribute)": [[225, "qat.hardware.DefaultGatesSpecification.state_prep", false]], "state_prep (qat.hardware.gatesspecification attribute)": [[227, "qat.hardware.GatesSpecification.state_prep", false]], "statevectorcpudouble (class in qat.clinalg.wrapper)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble", false]], "statistics() (qat.core.circuit method)": [[109, "qat.core.Circuit.statistics", false]], "status() (qat.interop.qiskit.qiskitjob method)": [[74, "qat.interop.qiskit.QiskitJob.status", false]], "submit() (qat.interop.pyquil.pyquilqpu method)": [[68, "qat.interop.pyquil.PyquilQPU.submit", false]], "submit() (qat.interop.qiskit.asyncbackendtoqpu method)": [[71, "qat.interop.qiskit.AsyncBackendToQPU.submit", false]], "submit() (qat.interop.qiskit.backendtoqpu method)": [[72, "qat.interop.qiskit.BackendToQPU.submit", false]], "submit() (qat.interop.qiskit.runtime.qiskitruntimeqpu method)": [[75, "qat.interop.qiskit.runtime.QiskitRuntimeQPU.submit", false]], "submit() (qat.qpus.clinalg method)": [[350, "qat.qpus.CLinalg.submit", false]], "submit() (qat.qpus.pylinalg method)": [[351, "qat.qpus.PyLinalg.submit", false]], "submit() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.submit", false]], "submit_job() (qat.interop.pyquil.pyquilqpu method)": [[68, "qat.interop.pyquil.PyquilQPU.submit_job", false]], "submit_job() (qat.qpus.pylinalg method)": [[351, "qat.qpus.PyLinalg.submit_job", false]], "submit_job() (qat.qpus.qpuhandler method)": [[356, "qat.qpus.QPUHandler.submit_job", false]], "submit_job() (qat.qpus.simulatedannealing method)": [[352, "qat.qpus.SimulatedAnnealing.submit_job", false]], "swap_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.swap_left", false]], "swap_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.swap_right", false]], "symbol (class in qat.core.variables)": [[151, "qat.core.variables.Symbol", false]], "synthesize_stabilizer_state() (in module qat.synthopline.co_diagonalization)": [[406, "qat.synthopline.co_diagonalization.synthesize_stabilizer_state", false]], "t_1 (qat.quops.parametricamplitudedamping attribute)": [[380, "qat.quops.ParametricAmplitudeDamping.T_1", false]], "t_phi (qat.quops.parametricpuredephasing attribute)": [[382, "qat.quops.ParametricPureDephasing.T_phi", false]], "tableau (qat.synthopline.interface.operatortableau property)": [[402, "qat.synthopline.interface.OperatorTableau.tableau", false]], "tensor (qat.quops.quantumchannelptm property)": [[389, "qat.quops.QuantumChannelPTM.tensor", false]], "term (class in qat.core)": [[160, "qat.core.Term", false]], "terms (qat.core.observable attribute)": [[153, "qat.core.Observable.terms", false]], "terms (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.terms", false]], "terms (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[206, "qat.fermion.hamiltonians.SpinHamiltonian.terms", false]], "terms_expectations_values() (qat.clinalg.wrapper.statevectorcpudouble method)": [[350, "qat.clinalg.wrapper.StateVectorCPUDouble.terms_expectations_values", false]], "threshold (qat.core.job property)": [[113, "qat.core.Job.threshold", false]], "to_bqm() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.to_bqm", false]], "to_bqm() (qat.opt.ising method)": [[286, "qat.opt.Ising.to_bqm", false]], "to_bqm() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.to_bqm", false]], "to_bqm() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.to_bqm", false]], "to_chi() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.to_chi", false]], "to_choi() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.to_choi", false]], "to_choi() (qat.quops.quantumchannelptm method)": [[389, "qat.quops.QuantumChannelPTM.to_choi", false]], "to_circ() (qat.lang.program method)": [[261, "qat.lang.Program.to_circ", false]], "to_circ() (qat.pbo.graphcircuit method)": [[308, "qat.pbo.GraphCircuit.to_circ", false]], "to_combinatorial_problem() (qat.opt.ising method)": [[286, "qat.opt.Ising.to_combinatorial_problem", false]], "to_combinatorial_problem() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.to_combinatorial_problem", false]], "to_combinatorial_problem() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.to_combinatorial_problem", false]], "to_cpp() (qat.core.batch method)": [[107, "qat.core.Batch.to_cpp", false]], "to_cpp() (qat.core.job method)": [[113, "qat.core.Job.to_cpp", false]], "to_electronic() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.to_electronic", false]], "to_fermion() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion", false]], "to_ising() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.to_ising", false]], "to_ising() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.to_ising", false]], "to_job() (qat.core.circuit method)": [[109, "qat.core.Circuit.to_job", false]], "to_job() (qat.core.schedule method)": [[158, "qat.core.Schedule.to_job", false]], "to_job() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.to_job", false]], "to_job() (qat.opt.ising method)": [[286, "qat.opt.Ising.to_job", false]], "to_job() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.to_job", false]], "to_job() (qat.opt.qubo method)": [[301, "qat.opt.QUBO.to_job", false]], "to_kraus() (qat.quops.quantumchannelchi method)": [[386, "qat.quops.QuantumChannelChi.to_kraus", false]], "to_kraus() (qat.quops.quantumchannelchoi method)": [[387, "qat.quops.QuantumChannelChoi.to_kraus", false]], "to_kraus() (qat.quops.quantumchannelptm method)": [[389, "qat.quops.QuantumChannelPTM.to_kraus", false]], "to_matrix() (qat.core.observable method)": [[153, "qat.core.Observable.to_matrix", false]], "to_nx() (qat.core.topology method)": [[161, "qat.core.Topology.to_nx", false]], "to_pauli() (qat.synthopline.interface.weyloperator method)": [[407, "qat.synthopline.interface.WeylOperator.to_pauli", false]], "to_ptm() (qat.quops.quantumchannelchoi method)": [[387, "qat.quops.QuantumChannelChoi.to_ptm", false]], "to_ptm() (qat.quops.quantumchannelkraus method)": [[388, "qat.quops.QuantumChannelKraus.to_ptm", false]], "to_qubo() (qat.opt.combinatorialproblem method)": [[283, "qat.opt.CombinatorialProblem.to_qubo", false]], "to_qubo() (qat.opt.ising method)": [[286, "qat.opt.Ising.to_qubo", false]], "to_qubo() (qat.opt.mwis method)": [[299, "qat.opt.MWIS.to_qubo", false]], "to_spin() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[186, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_spin", false]], "to_spin() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[187, "qat.fermion.hamiltonians.FermionHamiltonian.to_spin", false]], "to_thrift() (qat.core.batch method)": [[107, "qat.core.Batch.to_thrift", false]], "to_thrift() (qat.core.batchresult method)": [[108, "qat.core.BatchResult.to_thrift", false]], "to_thrift() (qat.core.circuit method)": [[109, "qat.core.Circuit.to_thrift", false]], "to_thrift() (qat.core.hardwarespecs method)": [[112, "qat.core.HardwareSpecs.to_thrift", false]], "to_thrift() (qat.core.job method)": [[113, "qat.core.Job.to_thrift", false]], "to_thrift() (qat.core.result method)": [[156, "qat.core.Result.to_thrift", false]], "to_thrift() (qat.core.topology method)": [[161, "qat.core.Topology.to_thrift", false]], "to_thrift() (qat.core.variable method)": [[163, "qat.core.Variable.to_thrift", false]], "to_thrift() (qat.core.variables.arithexpression method)": [[140, "qat.core.variables.ArithExpression.to_thrift", false]], "topology (class in qat.core)": [[161, "qat.core.Topology", false]], "topologytype (class in qat.core)": [[162, "qat.core.TopologyType", false]], "transform_basis() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.transform_basis", false]], "transform_integrals_to_new_basis() (in module qat.fermion.chemistry.ucc)": [[207, "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", false]], "transform_to_bk_basis() (in module qat.fermion.transforms)": [[208, "qat.fermion.transforms.transform_to_bk_basis", false]], "transform_to_jw_basis() (in module qat.fermion.transforms)": [[209, "qat.fermion.transforms.transform_to_jw_basis", false]], "transform_to_parity_basis() (in module qat.fermion.transforms)": [[210, "qat.fermion.transforms.transform_to_parity_basis", false]], "transformobservable (class in qat.plugins)": [[347, "qat.plugins.TransformObservable", false]], "two_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[201, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.two_body_integrals", false]], "two_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[202, "qat.fermion.chemistry.wrapper.MoleculeInfo.two_body_integrals", false]], "u3_decomposition() (in module qat.pbo.decompositions)": [[315, "qat.pbo.decompositions.u3_decomposition", false]], "uncompute() (qat.lang.qroutine method)": [[272, "qat.lang.QRoutine.uncompute", false]], "undirected() (qat.pbo.abstractregister method)": [[306, "qat.pbo.AbstractRegister.undirected", false]], "uniform_distribution() (in module qat.lang.algorithms.amplification)": [[274, "qat.lang.algorithms.amplification.uniform_distribution", false]], "union() (qat.core.gate_set.gateset method)": [[129, "qat.core.gate_set.GateSet.union", false]], "unpack() (qat.core.result method)": [[156, "qat.core.Result.unpack", false]], "value (qat.core.result property)": [[156, "qat.core.Result.value", false]], "value (qat.core.wrappers.result.state property)": [[159, "qat.core.wrappers.result.State.value", false]], "values (qat.core.result property)": [[156, "qat.core.Result.values", false]], "var (class in qat.opt.boolexpr)": [[303, "qat.opt.boolexpr.Var", false]], "var (class in qat.pbo)": [[320, "qat.pbo.VAR", false]], "variable (class in qat.core)": [[163, "qat.core.Variable", false]], "variablenamenotavailable (class in qat.core.circuit_builder.builder)": [[122, "qat.core.circuit_builder.builder.VariableNameNotAvailable", false]], "vertexcover (class in qat.opt)": [[304, "qat.opt.VertexCover", false]], "vertexcovergenerator (class in qat.generators)": [[223, "qat.generators.VertexCoverGenerator", false]], "vertexcoverresult (class in qat.opt.results)": [[298, "qat.opt.results.VertexCoverResult", false]], "wavefunction() (in module qat.core.simutil)": [[164, "qat.core.simutil.wavefunction", false]], "weyloperator (class in qat.synthopline.interface)": [[407, "qat.synthopline.interface.WeylOperator", false]], "wrap_samples() (qat.core.result method)": [[156, "qat.core.Result.wrap_samples", false]], "wrapper_post_process() (qat.generators.abstractgenerator method)": [[216, "qat.generators.AbstractGenerator.wrapper_post_process", false]], "x_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.x_left", false]], "x_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.x_right", false]], "xor_clause() (qat.opt.boolexpr.clause static method)": [[282, "qat.opt.boolexpr.Clause.xor_clause", false]], "xx_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.xx_left", false]], "xx_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.xx_right", false]], "xzx_decomposition() (in module qat.pbo.decompositions)": [[316, "qat.pbo.decompositions.xzx_decomposition", false]], "y_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.y_left", false]], "y_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.y_right", false]], "z_left() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.z_left", false]], "z_right() (qat.synthopline.interface.operatortableau method)": [[402, "qat.synthopline.interface.OperatorTableau.z_right", false]], "zeronoiseextrapolator (class in qat.plugins)": [[348, "qat.plugins.ZeroNoiseExtrapolator", false]], "zxz_decomposition() (in module qat.pbo.decompositions)": [[317, "qat.pbo.decompositions.zxz_decomposition", false]], "zyz_decomposition() (in module qat.pbo.decompositions)": [[318, "qat.pbo.decompositions.zyz_decomposition", false]]}, "objects": {"": [[56, 0, 0, "-", "qat"]], "qat": [[86, 0, 0, "-", "comm"], [103, 0, 0, "-", "core"], [165, 0, 0, "-", "devices"], [181, 0, 0, "-", "fermion"], [211, 0, 0, "-", "fusion"], [215, 0, 0, "-", "generators"], [224, 0, 0, "-", "hardware"], [57, 0, 0, "-", "interop"], [230, 0, 0, "-", "lang"], [275, 0, 0, "-", "nnize"], [278, 0, 0, "-", "opt"], [305, 0, 0, "-", "pbo"], [321, 0, 0, "-", "plugins"], [78, 0, 0, "-", "pylinalg"], [349, 0, 0, "-", "qpus"], [358, 0, 0, "-", "quops"], [390, 0, 0, "-", "synthopline"]], "qat.clinalg.wrapper": [[350, 1, 1, "", "StateVectorCPUDouble"]], "qat.clinalg.wrapper.StateVectorCPUDouble": [[350, 2, 1, "", "apply_1qbit_ctrl_gate"], [350, 2, 1, "", "apply_1qbit_gate"], [350, 2, 1, "", "apply_2qbit_ctrl_gate"], [350, 2, 1, "", "apply_2qbit_gate"], [350, 2, 1, "", "apply_CCNOT"], [350, 2, 1, "", "apply_CNOT"], [350, 2, 1, "", "apply_CSIGN"], [350, 2, 1, "", "apply_H"], [350, 2, 1, "", "apply_ISWAP"], [350, 2, 1, "", "apply_PH"], [350, 2, 1, "", "apply_RX"], [350, 2, 1, "", "apply_RY"], [350, 2, 1, "", "apply_RZ"], [350, 2, 1, "", "apply_S"], [350, 2, 1, "", "apply_SQRTSWAP"], [350, 2, 1, "", "apply_SWAP"], [350, 2, 1, "", "apply_T"], [350, 2, 1, "", "apply_X"], [350, 2, 1, "", "apply_Y"], [350, 2, 1, "", "apply_Z"], [350, 2, 1, "", "apply_binary_qram"], [350, 2, 1, "", "apply_nqbit_ctrl_gate"], [350, 2, 1, "", "apply_nqbit_gate"], [350, 2, 1, "", "apply_phase_oracle"], [350, 2, 1, "", "apply_qram"], [350, 2, 1, "", "apply_state_preparation"], [350, 3, 1, "", "array"], [350, 3, 1, "", "array_readonly"], [350, 2, 1, "", "evaluate_terms"], [350, 2, 1, "", "expectation_value"], [350, 2, 1, "", "get_distribution"], [350, 2, 1, "", "get_mapped_distribution"], [350, 2, 1, "", "get_mapped_statevector"], [350, 2, 1, "", "get_permuted_statevector"], [350, 2, 1, "", "measure"], [350, 2, 1, "", "print"], [350, 2, 1, "", "probability"], [350, 2, 1, "", "project"], [350, 2, 1, "", "project_then_reset"], [350, 2, 1, "", "reset_to_str"], [350, 2, 1, "", "sample"], [350, 2, 1, "", "sample_subset"], [350, 2, 1, "", "set_num_threads"], [350, 2, 1, "", "simulate_circuit"], [350, 2, 1, "", "terms_expectations_values"]], "qat.comm": [[87, 0, 0, "-", "datamodel"], [90, 0, 0, "-", "exceptions"], [95, 0, 0, "-", "resource"], [100, 0, 0, "-", "shared"]], "qat.comm.datamodel.ttypes": [[88, 1, 1, "", "GateDefinition"], [89, 1, 1, "", "Op"]], "qat.comm.exceptions.ttypes": [[91, 1, 1, "", "ErrorType"], [92, 1, 1, "", "GeneratorException"], [93, 1, 1, "", "PluginException"], [94, 1, 1, "", "QPUException"]], "qat.comm.resource.ttypes": [[96, 1, 1, "", "AllocationModel"], [97, 1, 1, "", "Device"], [98, 1, 1, "", "NodeType"], [99, 1, 1, "", "ResourceModel"]], "qat.comm.shared.ttypes": [[101, 1, 1, "", "IntermediateMeasurement"], [102, 1, 1, "", "ProcessingType"]], "qat.core": [[107, 1, 1, "", "Batch"], [108, 1, 1, "", "BatchResult"], [109, 1, 1, "", "Circuit"], [112, 1, 1, "", "HardwareSpecs"], [113, 1, 1, "", "Job"], [153, 1, 1, "", "Observable"], [154, 1, 1, "", "Parameter"], [156, 1, 1, "", "Result"], [157, 1, 1, "", "Sample"], [158, 1, 1, "", "Schedule"], [160, 1, 1, "", "Term"], [161, 1, 1, "", "Topology"], [162, 1, 1, "", "TopologyType"], [163, 1, 1, "", "Variable"], [115, 0, 0, "-", "application"], [118, 0, 0, "-", "circuit_builder"], [123, 0, 0, "-", "exceptions_utils"], [128, 0, 0, "-", "gate_set"], [132, 0, 0, "-", "qpu"], [134, 0, 0, "-", "spins"], [137, 0, 0, "-", "variables"]], "qat.core.Batch": [[107, 2, 1, "", "dump"], [107, 3, 1, "", "file_extension"], [107, 2, 1, "", "from_bytes"], [107, 2, 1, "", "from_thrift"], [107, 2, 1, "", "get_variables"], [107, 2, 1, "", "load"], [107, 2, 1, "", "to_cpp"], [107, 2, 1, "", "to_thrift"]], "qat.core.BatchResult": [[108, 2, 1, "", "append"], [108, 2, 1, "", "dump"], [108, 2, 1, "", "extend"], [108, 3, 1, "", "file_extension"], [108, 2, 1, "", "from_thrift"], [108, 2, 1, "", "load"], [108, 2, 1, "", "to_thrift"]], "qat.core.Circuit": [[109, 2, 1, "", "bind_variable"], [109, 2, 1, "", "bind_variables"], [109, 2, 1, "", "compile"], [109, 2, 1, "", "count"], [109, 2, 1, "", "dag"], [109, 2, 1, "", "depth"], [109, 2, 1, "", "display"], [109, 2, 1, "", "dump"], [109, 2, 1, "", "empty"], [109, 2, 1, "", "eval"], [109, 3, 1, "", "file_extension"], [109, 2, 1, "", "fill_matrices"], [109, 2, 1, "", "from_bytes"], [109, 2, 1, "", "from_thrift"], [109, 3, 1, "", "gate_set"], [109, 2, 1, "", "get_variables"], [109, 2, 1, "", "insert_gate"], [109, 2, 1, "", "iterate_simple"], [109, 2, 1, "", "load"], [109, 2, 1, "", "remove_locks"], [109, 2, 1, "", "run"], [109, 2, 1, "", "shift_qbits"], [109, 2, 1, "", "statistics"], [109, 2, 1, "", "to_job"], [109, 2, 1, "", "to_thrift"]], "qat.core.HardwareSpecs": [[112, 2, 1, "", "as_graph"], [112, 2, 1, "", "as_quameleon"], [112, 2, 1, "", "dump"], [112, 3, 1, "", "file_extension"], [112, 2, 1, "", "from_thrift"], [112, 2, 1, "", "load"], [112, 3, 1, "", "nbqbits"], [112, 2, 1, "", "to_thrift"]], "qat.core.Job": [[113, 2, 1, "", "compile"], [113, 2, 1, "", "differentiate"], [113, 2, 1, "", "dump"], [113, 2, 1, "", "eval"], [113, 3, 1, "", "file_extension"], [113, 2, 1, "", "from_bytes"], [113, 2, 1, "", "from_thrift"], [113, 2, 1, "", "get_variables"], [113, 2, 1, "", "gradient"], [113, 2, 1, "", "load"], [113, 3, 1, "", "parameter_map"], [113, 3, 1, "", "psi_0"], [113, 2, 1, "", "run"], [113, 2, 1, "", "shift_qbits"], [113, 3, 1, "", "threshold"], [113, 2, 1, "", "to_cpp"], [113, 2, 1, "", "to_thrift"]], "qat.core.Observable": [[153, 4, 1, "", "constant_coeff"], [153, 2, 1, "", "dump"], [153, 4, 1, "", "ising"], [153, 2, 1, "", "load"], [153, 4, 1, "", "nbqbits"], [153, 4, 1, "", "terms"], [153, 2, 1, "", "to_matrix"]], "qat.core.Parameter": [[154, 3, 1, "", "func"], [154, 2, 1, "", "generate_noise"], [154, 2, 1, "", "get_noise"], [154, 3, 1, "", "psd"]], "qat.core.Result": [[156, 2, 1, "", "add_sample"], [156, 2, 1, "", "display"], [156, 2, 1, "", "dump"], [156, 3, 1, "", "file_extension"], [156, 2, 1, "", "from_bytes"], [156, 2, 1, "", "from_thrift"], [156, 2, 1, "", "load"], [156, 3, 1, "", "parameter_map"], [156, 2, 1, "", "plot"], [156, 2, 1, "", "to_thrift"], [156, 2, 1, "", "unpack"], [156, 3, 1, "", "value"], [156, 3, 1, "", "values"], [156, 2, 1, "", "wrap_samples"]], "qat.core.Sample": [[157, 3, 1, "", "amplitude"], [157, 2, 1, "", "from_bytes"], [157, 2, 1, "", "from_thrift"], [157, 2, 1, "", "set_qreg"], [157, 3, 1, "", "state"]], "qat.core.Schedule": [[158, 2, 1, "", "dump"], [158, 2, 1, "", "get_variables"], [158, 2, 1, "", "load"], [158, 2, 1, "", "to_job"]], "qat.core.Term": [[160, 4, 1, "", "coeff"], [160, 4, 1, "", "op"], [160, 4, 1, "", "qbits"]], "qat.core.Topology": [[161, 2, 1, "", "add_edge"], [161, 2, 1, "", "dump"], [161, 3, 1, "", "file_extension"], [161, 2, 1, "", "from_bytes"], [161, 2, 1, "", "from_nx"], [161, 2, 1, "", "from_thrift"], [161, 2, 1, "", "load"], [161, 3, 1, "", "nbqbits"], [161, 2, 1, "", "set_nbqbits"], [161, 2, 1, "", "to_nx"], [161, 2, 1, "", "to_thrift"]], "qat.core.Variable": [[163, 2, 1, "", "differentiate"], [163, 2, 1, "", "get_variables"], [163, 2, 1, "", "to_thrift"]], "qat.core.application": [[116, 1, 1, "", "Application"], [117, 1, 1, "", "RemoteApplication"]], "qat.core.application.Application": [[116, 2, 1, "", "execute"], [116, 2, 1, "", "serve"]], "qat.core.assertion": [[105, 5, 1, "", "assert_plugin"], [106, 5, 1, "", "assert_qpu"]], "qat.core.circuit_builder.builder": [[122, 1, 1, "", "VariableNameNotAvailable"]], "qat.core.circuit_builder.matrix_util": [[119, 5, 1, "", "default_gate_set"], [120, 5, 1, "", "get_param_generator"], [121, 5, 1, "", "get_predef_generator"]], "qat.core.console": [[110, 5, 1, "", "display"]], "qat.core.exceptions_utils": [[124, 1, 1, "", "exception_only"], [125, 5, 1, "", "generator_exception_only"], [126, 5, 1, "", "plugin_exception_only"], [127, 5, 1, "", "qpu_exception_only"]], "qat.core.formula_eval": [[111, 5, 1, "", "evaluate"]], "qat.core.gate_set": [[129, 1, 1, "", "GateSet"], [130, 1, 1, "", "GateSignature"], [131, 1, 1, "", "GateSyntaxRedefinition"]], "qat.core.gate_set.GateSet": [[129, 2, 1, "", "add_signature"], [129, 2, 1, "", "union"]], "qat.core.gate_set.GateSignature": [[130, 2, 1, "", "get_circuit"], [130, 2, 1, "", "get_matrix"], [130, 2, 1, "", "set_circuit_generator"], [130, 2, 1, "", "set_matrix_generator"]], "qat.core.printer": [[155, 5, 1, "", "plot_in_notebook"]], "qat.core.qpu": [[133, 1, 1, "", "CommonQPU"]], "qat.core.simutil": [[164, 5, 1, "", "wavefunction"]], "qat.core.spins": [[135, 5, 1, "", "integer_to_spins"], [136, 5, 1, "", "spins_to_integer"]], "qat.core.util": [[114, 5, 1, "", "load_state_vector_from_bin"]], "qat.core.variables": [[140, 1, 1, "", "ArithExpression"], [151, 1, 1, "", "Symbol"], [138, 5, 1, "", "abso"], [139, 5, 1, "", "angle"], [141, 5, 1, "", "atan2"], [142, 5, 1, "", "cos"], [143, 5, 1, "", "exp"], [144, 5, 1, "", "get_item"], [145, 5, 1, "", "heaviside"], [146, 5, 1, "", "imag"], [147, 5, 1, "", "ln"], [148, 5, 1, "", "real"], [149, 5, 1, "", "sin"], [150, 5, 1, "", "sqrt"], [152, 5, 1, "", "vmax"]], "qat.core.variables.ArithExpression": [[140, 2, 1, "", "differentiate"], [140, 2, 1, "", "from_string"], [140, 2, 1, "", "get_variables"], [140, 2, 1, "", "pretty_print"], [140, 2, 1, "", "to_thrift"]], "qat.core.wrappers.result": [[159, 1, 1, "", "State"], [104, 5, 1, "", "aggregate_data"]], "qat.core.wrappers.result.State": [[159, 3, 1, "", "bitstring"], [159, 3, 1, "", "int"], [159, 3, 1, "", "lsb_int"], [159, 3, 1, "", "value"]], "qat.devices": [[166, 1, 1, "", "AllToAll"], [167, 6, 1, "", "GOOGLE_SYCAMORE"], [168, 1, 1, "", "GridDevice"], [169, 6, 1, "", "IBM_BURLINGTON"], [170, 6, 1, "", "IBM_JOHANNESBURG"], [171, 6, 1, "", "IBM_MELBOURNE"], [172, 6, 1, "", "IBM_RUESCHLIKON"], [173, 6, 1, "", "IBM_SINGAPORE"], [174, 6, 1, "", "IBM_TOKYO"], [175, 6, 1, "", "IBM_YORKTOWN"], [176, 1, 1, "", "LineDevice"], [177, 6, 1, "", "RIGETTI_AGAVE"], [178, 6, 1, "", "RIGETTI_ASPEN"], [179, 1, 1, "", "SquareGridDevice"], [180, 6, 1, "", "ZUCHONGZHI"]], "qat.fermion": [[181, 0, 0, "-", "chemistry"], [181, 0, 0, "-", "circuits"], [181, 0, 0, "-", "hamiltonians"], [181, 0, 0, "-", "phase_estimation"], [181, 0, 0, "-", "transforms"]], "qat.fermion.chemistry": [[181, 0, 0, "-", "qse"], [181, 0, 0, "-", "ucc"]], "qat.fermion.chemistry.pyscf_tools": [[204, 5, 1, "", "perform_pyscf_computation"]], "qat.fermion.chemistry.qse": [[182, 5, 1, "", "apply_quantum_subspace_expansion"]], "qat.fermion.chemistry.ucc": [[183, 5, 1, "", "compute_active_space_integrals"], [184, 5, 1, "", "construct_ucc_ansatz"], [185, 5, 1, "", "convert_to_h_integrals"], [188, 5, 1, "", "get_cluster_ops"], [189, 5, 1, "", "get_hf_ket"], [190, 5, 1, "", "guess_init_params"], [205, 5, 1, "", "select_active_orbitals"], [207, 5, 1, "", "transform_integrals_to_new_basis"]], "qat.fermion.chemistry.wrapper": [[201, 1, 1, "", "MolecularHamiltonian"], [202, 1, 1, "", "MoleculeInfo"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[201, 4, 1, "", "constant_coeff"], [201, 2, 1, "", "get_electronic_hamiltonian"], [201, 4, 1, "", "nqbits"], [201, 4, 1, "", "one_body_integrals"], [201, 2, 1, "", "select_active_space"], [201, 2, 1, "", "transform_basis"], [201, 4, 1, "", "two_body_integrals"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[202, 4, 1, "", "constant_coeff"], [202, 4, 1, "", "hamiltonian"], [202, 4, 1, "", "n_electrons"], [202, 4, 1, "", "noons"], [202, 4, 1, "", "nqbits"], [202, 4, 1, "", "one_body_integrals"], [202, 4, 1, "", "orbital_energies"], [202, 2, 1, "", "restrict_active_space"], [202, 4, 1, "", "two_body_integrals"]], "qat.fermion.circuits": [[192, 5, 1, "", "make_compressed_ldca_circ"], [194, 5, 1, "", "make_general_hwe_circ"], [196, 5, 1, "", "make_ldca_circ"], [197, 5, 1, "", "make_mr_circ"], [198, 5, 1, "", "make_mrep_circ"], [199, 5, 1, "", "make_shallow_circ"]], "qat.fermion.hamiltonians": [[186, 1, 1, "", "ElectronicStructureHamiltonian"], [187, 1, 1, "", "FermionHamiltonian"], [206, 1, 1, "", "SpinHamiltonian"], [191, 5, 1, "", "make_anderson_model"], [193, 5, 1, "", "make_embedded_model"], [195, 5, 1, "", "make_hubbard_model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[186, 4, 1, "", "constant_coeff"], [186, 2, 1, "", "copy"], [186, 2, 1, "", "dag"], [186, 2, 1, "", "get_matrix"], [186, 4, 1, "", "hpq"], [186, 4, 1, "", "hpqrs"], [186, 2, 1, "", "to_fermion"], [186, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[187, 4, 1, "", "constant_coeff"], [187, 2, 1, "", "copy"], [187, 2, 1, "", "dag"], [187, 2, 1, "", "get_matrix"], [187, 4, 1, "", "matrix"], [187, 4, 1, "", "nbqbits"], [187, 4, 1, "", "normal_order"], [187, 4, 1, "", "terms"], [187, 2, 1, "", "to_electronic"], [187, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[206, 4, 1, "", "constant_coeff"], [206, 2, 1, "", "copy"], [206, 2, 1, "", "dag"], [206, 2, 1, "", "get_matrix"], [206, 4, 1, "", "matrix"], [206, 4, 1, "", "nbqbits"], [206, 4, 1, "", "terms"]], "qat.fermion.phase_estimation": [[203, 1, 1, "", "perform_phase_estimation"]], "qat.fermion.transforms": [[208, 5, 1, "", "transform_to_bk_basis"], [209, 5, 1, "", "transform_to_jw_basis"], [210, 5, 1, "", "transform_to_parity_basis"]], "qat.fermion.trotterisation": [[200, 5, 1, "", "make_trotterisation_routine"]], "qat.fusion.strategies": [[212, 1, 1, "", "AdjacentStrategy"], [213, 1, 1, "", "EagerStrategy"], [214, 1, 1, "", "NaiveStrategy"]], "qat.generators": [[216, 1, 1, "", "AbstractGenerator"], [217, 1, 1, "", "CombinatorialOptimizerGenerator"], [218, 1, 1, "", "GraphColouringGenerator"], [219, 1, 1, "", "GraphPartitioningGenerator"], [220, 1, 1, "", "KCliqueGenerator"], [221, 1, 1, "", "MaxCutGenerator"], [222, 1, 1, "", "RemoteBatchGenerator"], [223, 1, 1, "", "VertexCoverGenerator"]], "qat.generators.AbstractGenerator": [[216, 2, 1, "", "generate"], [216, 2, 1, "", "serve"], [216, 2, 1, "", "wrapper_post_process"]], "qat.generators.CombinatorialOptimizerGenerator": [[217, 2, 1, "", "generate"], [217, 2, 1, "", "post_process"]], "qat.generators.GraphColouringGenerator": [[218, 2, 1, "", "generate"]], "qat.generators.GraphPartitioningGenerator": [[219, 2, 1, "", "generate"]], "qat.generators.KCliqueGenerator": [[220, 2, 1, "", "generate"]], "qat.generators.MaxCutGenerator": [[221, 2, 1, "", "generate"]], "qat.generators.RemoteBatchGenerator": [[222, 2, 1, "", "generate"], [222, 2, 1, "", "post_process"]], "qat.generators.VertexCoverGenerator": [[223, 2, 1, "", "generate"]], "qat.hardware": [[225, 1, 1, "", "DefaultGatesSpecification"], [226, 1, 1, "", "DefaultHardwareModel"], [227, 1, 1, "", "GatesSpecification"], [228, 1, 1, "", "HardwareModel"], [229, 5, 1, "", "make_depolarizing_hardware_model"]], "qat.hardware.DefaultGatesSpecification": [[225, 4, 1, "", "gate_times"], [225, 2, 1, "", "get_gate_time"], [225, 2, 1, "", "get_quantum_channel"], [225, 4, 1, "", "meas"], [225, 4, 1, "", "quantum_channels"], [225, 4, 1, "", "state_prep"]], "qat.hardware.DefaultHardwareModel": [[226, 2, 1, "", "cleanup_jump_operators"], [226, 4, 1, "", "gate_noise"], [226, 4, 1, "", "gates_specification"], [226, 4, 1, "", "idle_noise"], [226, 4, 1, "", "jump_operators"], [226, 4, 1, "", "params_specification"], [226, 2, 1, "", "shift_jump_operators"]], "qat.hardware.GatesSpecification": [[227, 4, 1, "", "gate_times"], [227, 2, 1, "", "get_gate_time"], [227, 2, 1, "", "get_quantum_channel"], [227, 4, 1, "", "meas"], [227, 4, 1, "", "quantum_channels"], [227, 4, 1, "", "state_prep"]], "qat.hardware.HardwareModel": [[228, 2, 1, "", "cleanup_jump_operators"], [228, 4, 1, "", "gate_noise"], [228, 4, 1, "", "gates_specification"], [228, 4, 1, "", "idle_noise"], [228, 4, 1, "", "jump_operators"], [228, 4, 1, "", "params_specification"], [228, 2, 1, "", "shift_jump_operators"]], "qat.interop": [[58, 0, 0, "-", "cirq"], [61, 0, 0, "-", "openqasm"], [63, 0, 0, "-", "projectq"], [66, 0, 0, "-", "pyquil"], [70, 0, 0, "-", "qiskit"]], "qat.interop.cirq": [[59, 5, 1, "", "cirq_to_qlm"], [60, 5, 1, "", "qlm_to_cirq"]], "qat.interop.openqasm": [[62, 1, 1, "", "OqasmParser"]], "qat.interop.openqasm.OqasmParser": [[62, 2, 1, "", "compile"]], "qat.interop.projectq": [[64, 1, 1, "", "AqasmEngine"], [65, 1, 1, "", "AqasmPrinter"]], "qat.interop.projectq.AqasmEngine": [[64, 2, 1, "", "projectq_to_qlm"]], "qat.interop.pyquil": [[68, 1, 1, "", "PyquilQPU"], [67, 5, 1, "", "pyquil_to_qlm"], [69, 5, 1, "", "qlm_to_pyquil"]], "qat.interop.pyquil.PyquilQPU": [[68, 2, 1, "", "set_qpu"], [68, 2, 1, "", "submit"], [68, 2, 1, "", "submit_job"]], "qat.interop.qiskit": [[71, 1, 1, "", "AsyncBackendToQPU"], [72, 1, 1, "", "BackendToQPU"], [77, 1, 1, "", "QPUToBackend"], [74, 1, 1, "", "QiskitJob"], [73, 5, 1, "", "qiskit_to_qlm"], [76, 5, 1, "", "qlm_to_qiskit"]], "qat.interop.qiskit.AsyncBackendToQPU": [[71, 2, 1, "", "retrieve_job"], [71, 2, 1, "", "submit"]], "qat.interop.qiskit.BackendToQPU": [[72, 2, 1, "", "submit"]], "qat.interop.qiskit.QPUToBackend": [[77, 2, 1, "", "set_qpu"]], "qat.interop.qiskit.QiskitJob": [[74, 2, 1, "", "cancel"], [74, 2, 1, "", "dump"], [74, 2, 1, "", "job_id"], [74, 2, 1, "", "result"], [74, 2, 1, "", "status"]], "qat.interop.qiskit.runtime": [[75, 1, 1, "", "QiskitRuntimeQPU"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[75, 2, 1, "", "submit"]], "qat.lang": [[231, 1, 1, "", "AbstractGate"], [261, 1, 1, "", "Program"], [272, 1, 1, "", "QRoutine"], [230, 0, 0, "-", "algorithms"], [234, 5, 1, "", "build_gate"], [268, 5, 1, "", "qfunc"], [271, 5, 1, "", "qrout"]], "qat.lang.AQASM": [[243, 0, 0, "-", "arithmetic"], [249, 0, 0, "-", "classarith"], [253, 0, 0, "-", "qftarith"]], "qat.lang.AQASM.arithmetic": [[244, 5, 1, "", "add_const_mod"], [245, 5, 1, "", "add_mod"], [246, 5, 1, "", "modular_exp"], [247, 5, 1, "", "mult_const"], [248, 5, 1, "", "mult_const_mod"]], "qat.lang.AQASM.bits": [[233, 1, 1, "", "BoolFormula"], [236, 1, 1, "", "CRegister"], [235, 1, 1, "", "Cbit"], [270, 1, 1, "", "QRegister"], [263, 1, 1, "", "Qbit"]], "qat.lang.AQASM.classarith": [[250, 5, 1, "", "add"], [251, 5, 1, "", "add_const"], [252, 5, 1, "", "cuccaro_add"]], "qat.lang.AQASM.gates": [[237, 1, 1, "", "Gate"], [259, 1, 1, "", "ParamGate"]], "qat.lang.AQASM.gates.ParamGate": [[259, 2, 1, "", "bind_variables"], [259, 2, 1, "", "dag"], [259, 2, 1, "", "display"], [259, 2, 1, "", "get_variables"]], "qat.lang.AQASM.misc": [[238, 5, 1, "", "generate_gate_set"]], "qat.lang.AQASM.qbool": [[264, 1, 1, "", "QBool"], [265, 1, 1, "", "QBoolArray"], [266, 1, 1, "", "QClause"]], "qat.lang.AQASM.qbool.QBool": [[264, 2, 1, "", "cast"], [264, 2, 1, "", "cast_to"], [264, 2, 1, "", "evaluate"], [264, 2, 1, "", "phase"], [264, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QBoolArray": [[265, 2, 1, "", "cast"], [265, 2, 1, "", "evaluate"], [265, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QClause": [[266, 2, 1, "", "evaluate"], [266, 2, 1, "", "phase"], [266, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qftarith": [[258, 5, 1, "", "QFT"], [254, 5, 1, "", "add"], [255, 5, 1, "", "add_const"], [256, 5, 1, "", "mult"], [257, 5, 1, "", "mult_const"]], "qat.lang.AQASM.qint": [[262, 1, 1, "", "QArithExp"], [267, 1, 1, "", "QCompExp"], [269, 1, 1, "", "QInt"]], "qat.lang.AQASM.qint.QArithExp": [[262, 2, 1, "", "evaluate"]], "qat.lang.AQASM.qint.QCompExp": [[267, 2, 1, "", "evaluate"], [267, 2, 1, "", "phase"], [267, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qint.QInt": [[269, 2, 1, "", "cast"], [269, 2, 1, "", "evaluate"], [269, 2, 1, "", "qbits_list"], [269, 2, 1, "", "set_value"]], "qat.lang.AbstractGate": [[231, 2, 1, "", "set_dag"]], "qat.lang.Program": [[261, 2, 1, "", "apply"], [261, 2, 1, "", "calloc"], [261, 2, 1, "", "cbreak"], [261, 2, 1, "", "cc_apply"], [261, 2, 1, "", "comment"], [261, 2, 1, "", "conjugate"], [261, 2, 1, "", "display"], [261, 2, 1, "", "export"], [261, 2, 1, "", "free_ancillae"], [261, 2, 1, "", "get_free_ancillae"], [261, 2, 1, "", "logic"], [261, 2, 1, "", "measure"], [261, 2, 1, "", "new_var"], [261, 2, 1, "", "qalloc"], [261, 2, 1, "", "reset"], [261, 2, 1, "", "run"], [261, 2, 1, "", "to_circ"]], "qat.lang.QRoutine": [[272, 2, 1, "", "apply"], [272, 2, 1, "", "compute"], [272, 2, 1, "", "free_ancillae"], [272, 2, 1, "", "get_free_ancillae"], [272, 2, 1, "", "new_wires"], [272, 2, 1, "", "set_ancillae"], [272, 2, 1, "", "uncompute"]], "qat.lang.algorithms": [[232, 5, 1, "", "amplification_step"], [260, 5, 1, "", "phase_estimation"], [273, 5, 1, "", "quantum_counting"]], "qat.lang.algorithms.amplification": [[239, 5, 1, "", "grover_diffusion"], [240, 5, 1, "", "householder"], [274, 5, 1, "", "uniform_distribution"]], "qat.lang.linking": [[242, 1, 1, "", "Linker"]], "qat.lang.linking.Linker": [[242, 2, 1, "", "add_signature"], [242, 2, 1, "", "clear_gate_set"], [242, 2, 1, "", "compile"], [242, 2, 1, "", "link"], [242, 2, 1, "", "link_gates"], [242, 2, 1, "", "link_matrices"], [242, 2, 1, "", "set_gate_set"]], "qat.lang.models": [[241, 1, 1, "", "KPTree"]], "qat.lang.models.KPTree": [[241, 2, 1, "", "get_routine"]], "qat.nnize.metrics": [[276, 1, 1, "", "DurationMetric"], [277, 1, 1, "", "QuantumCostMetric"]], "qat.nnize.metrics.DurationMetric": [[276, 2, 1, "", "get_best_index"], [276, 2, 1, "", "init"], [276, 2, 1, "", "minimize_idle_time"], [276, 2, 1, "", "minimize_overall_time"], [276, 2, 1, "", "set_gate_time"], [276, 2, 1, "", "set_nnizer"]], "qat.nnize.metrics.QuantumCostMetric": [[277, 2, 1, "", "get_best_index"], [277, 2, 1, "", "init"], [277, 2, 1, "", "set_nnizer"]], "qat.opt": [[280, 1, 1, "", "BILP"], [283, 1, 1, "", "CombinatorialProblem"], [284, 1, 1, "", "GraphColouring"], [285, 1, 1, "", "GraphPartitioning"], [286, 1, 1, "", "Ising"], [287, 1, 1, "", "KClique"], [299, 1, 1, "", "MWIS"], [288, 1, 1, "", "MaxCut"], [289, 1, 1, "", "MixingFactory"], [300, 1, 1, "", "NumberPartitioning"], [301, 1, 1, "", "QUBO"], [304, 1, 1, "", "VertexCover"], [290, 0, 0, "-", "mixing_factory"], [294, 0, 0, "-", "results"]], "qat.opt.BILP": [[280, 2, 1, "", "get_best_parameters"]], "qat.opt.CombinatorialProblem": [[283, 2, 1, "", "add_clause"], [283, 2, 1, "", "aqo_job"], [283, 2, 1, "", "decode_rydberg"], [283, 2, 1, "", "decode_rydberg_meta_data"], [283, 2, 1, "", "get_observable"], [283, 2, 1, "", "new_var"], [283, 2, 1, "", "new_vars"], [283, 2, 1, "", "qaoa_job"], [283, 2, 1, "", "ryd_job"], [283, 2, 1, "", "sqa_job"], [283, 2, 1, "", "to_bqm"], [283, 2, 1, "", "to_ising"], [283, 2, 1, "", "to_job"], [283, 2, 1, "", "to_qubo"]], "qat.opt.GraphColouring": [[284, 2, 1, "", "get_best_parameters"], [284, 2, 1, "", "parse_result"]], "qat.opt.GraphPartitioning": [[285, 2, 1, "", "get_best_parameters"], [285, 2, 1, "", "parse_result"]], "qat.opt.Ising": [[286, 2, 1, "", "aqo_job"], [286, 2, 1, "", "decode_rydberg"], [286, 2, 1, "", "decode_rydberg_meta_data"], [286, 2, 1, "", "dump"], [286, 2, 1, "", "from_thrift"], [286, 2, 1, "", "get_best_parameters"], [286, 2, 1, "", "get_j_h_and_offset"], [286, 2, 1, "", "get_observable"], [286, 3, 1, "", "j_coupling_matrix"], [286, 2, 1, "", "load"], [286, 3, 1, "", "magnetic_field_h"], [286, 2, 1, "", "qaoa_job"], [286, 2, 1, "", "ryd_job"], [286, 2, 1, "", "sqa_job"], [286, 2, 1, "", "to_bqm"], [286, 2, 1, "", "to_combinatorial_problem"], [286, 2, 1, "", "to_job"], [286, 2, 1, "", "to_qubo"]], "qat.opt.KClique": [[287, 2, 1, "", "get_best_parameters"], [287, 2, 1, "", "parse_result"]], "qat.opt.MWIS": [[299, 2, 1, "", "aqo_job"], [299, 2, 1, "", "decode_rydberg"], [299, 2, 1, "", "decode_rydberg_meta_data"], [299, 2, 1, "", "dump"], [299, 2, 1, "", "from_thrift"], [299, 2, 1, "", "get_best_parameters"], [299, 2, 1, "", "get_j_h_and_offset"], [299, 2, 1, "", "get_observable"], [299, 4, 1, "", "graph"], [299, 3, 1, "", "j_coupling_matrix"], [299, 2, 1, "", "load"], [299, 3, 1, "", "magnetic_field_h"], [299, 2, 1, "", "qaoa_job"], [299, 2, 1, "", "ryd_job"], [299, 2, 1, "", "sqa_job"], [299, 2, 1, "", "to_bqm"], [299, 2, 1, "", "to_combinatorial_problem"], [299, 2, 1, "", "to_job"], [299, 2, 1, "", "to_qubo"]], "qat.opt.MaxCut": [[288, 2, 1, "", "get_best_parameters"], [288, 2, 1, "", "parse_result"]], "qat.opt.MixingFactory": [[289, 2, 1, "", "bit_flip"], [289, 2, 1, "", "bit_move"]], "qat.opt.NumberPartitioning": [[300, 2, 1, "", "get_best_parameters"]], "qat.opt.QUBO": [[301, 2, 1, "", "aqo_job"], [301, 2, 1, "", "decode_rydberg"], [301, 2, 1, "", "decode_rydberg_meta_data"], [301, 2, 1, "", "get_best_parameters"], [301, 2, 1, "", "get_observable"], [301, 2, 1, "", "get_q_and_offset"], [301, 3, 1, "", "q_matrix"], [301, 2, 1, "", "qaoa_job"], [301, 2, 1, "", "ryd_job"], [301, 2, 1, "", "sqa_job"], [301, 2, 1, "", "to_bqm"], [301, 2, 1, "", "to_combinatorial_problem"], [301, 2, 1, "", "to_ising"], [301, 2, 1, "", "to_job"]], "qat.opt.VertexCover": [[304, 2, 1, "", "get_best_parameters"], [304, 2, 1, "", "parse_result"]], "qat.opt.binary_linear_integer_programming": [[280, 5, 1, "", "produce_q_and_offset"]], "qat.opt.boolexpr": [[282, 1, 1, "", "Clause"], [303, 1, 1, "", "Var"]], "qat.opt.boolexpr.Clause": [[282, 2, 1, "", "and_clause"], [282, 2, 1, "", "evaluate"], [282, 2, 1, "", "get_terms_obs"], [282, 2, 1, "", "get_variables"], [282, 2, 1, "", "neg_clause"], [282, 2, 1, "", "or_clause"], [282, 2, 1, "", "xor_clause"]], "qat.opt.boolexpr.Var": [[303, 2, 1, "", "evaluate"], [303, 2, 1, "", "get_terms_obs"], [303, 2, 1, "", "get_variables"], [303, 4, 1, "", "index"]], "qat.opt.circuit_generator": [[281, 1, 1, "", "CircuitGenerator"]], "qat.opt.circuit_generator.CircuitGenerator": [[281, 2, 1, "", "get_observable"], [281, 2, 1, "", "qaoa_job"]], "qat.opt.graph_colouring": [[284, 5, 1, "", "produce_q_and_offset"]], "qat.opt.graph_partitioning": [[285, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.k_clique": [[287, 5, 1, "", "produce_q_and_offset"]], "qat.opt.max_cut": [[288, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.mixing_factory": [[291, 1, 1, "", "IndependentAQO"], [292, 1, 1, "", "InitialStateBuilder"], [293, 1, 1, "", "SimpleInitialState"]], "qat.opt.mixing_factory.IndependentAQO": [[291, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.InitialStateBuilder": [[292, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.SimpleInitialState": [[293, 2, 1, "", "inject_initial_state"]], "qat.opt.number_partitioning": [[300, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.results": [[295, 1, 1, "", "CombinatorialResult"], [296, 1, 1, "", "GraphPartitioningResult"], [297, 1, 1, "", "KCliqueResult"], [298, 1, 1, "", "VertexCoverResult"]], "qat.opt.results.GraphPartitioningResult": [[296, 2, 1, "", "display"]], "qat.opt.results.KCliqueResult": [[297, 3, 1, "", "clique"], [297, 2, 1, "", "display"]], "qat.opt.results.VertexCoverResult": [[298, 3, 1, "", "cover"], [298, 2, 1, "", "display"]], "qat.opt.schedule_generator": [[302, 1, 1, "", "ScheduleGenerator"]], "qat.opt.schedule_generator.ScheduleGenerator": [[302, 2, 1, "", "aqo_job"], [302, 2, 1, "", "get_observable"]], "qat.opt.vertex_cover": [[304, 5, 1, "", "produce_q_and_offset"]], "qat.pbo": [[306, 1, 1, "", "AbstractRegister"], [307, 1, 1, "", "GateName"], [308, 1, 1, "", "GraphCircuit"], [319, 1, 1, "", "PatternGroup"], [320, 1, 1, "", "VAR"], [310, 0, 0, "-", "collections"], [312, 0, 0, "-", "decompositions"]], "qat.pbo.AbstractRegister": [[306, 2, 1, "", "len"], [306, 2, 1, "", "undirected"]], "qat.pbo.GraphCircuit": [[308, 2, 1, "", "add_abstract_gate"], [308, 2, 1, "", "count_pattern"], [308, 2, 1, "", "find_pattern"], [308, 2, 1, "", "load_circuit"], [308, 2, 1, "", "replace_pattern"], [308, 2, 1, "", "to_circ"]], "qat.pbo.PatternGroup": [[319, 2, 1, "", "add_pattern"], [319, 2, 1, "", "pattern_to_remove"]], "qat.pbo.VAR": [[320, 2, 1, "", "add_function"], [320, 2, 1, "", "add_prohibited_value"], [320, 2, 1, "", "copy"], [320, 2, 1, "", "eval"], [320, 2, 1, "", "pop_prohibited_value"], [320, 2, 1, "", "set_value"]], "qat.pbo.collections": [[311, 5, 1, "", "collection_from_target"]], "qat.pbo.decompositions": [[314, 5, 1, "", "ions_decomposition"], [315, 5, 1, "", "u3_decomposition"], [316, 5, 1, "", "xzx_decomposition"], [317, 5, 1, "", "zxz_decomposition"], [318, 5, 1, "", "zyz_decomposition"]], "qat.pbo.decompositions.decompositions": [[313, 5, 1, "", "get_euler_angles"]], "qat.pbo.kak": [[309, 5, 1, "", "list_decompositions"]], "qat.plugins": [[322, 1, 1, "", "AbstractPlugin"], [323, 1, 1, "", "AdaptVQEPlugin"], [324, 1, 1, "", "CircuitInliner"], [325, 1, 1, "", "CostFunctionPlugin"], [326, 1, 1, "", "Display"], [327, 1, 1, "", "FusionPlugin"], [328, 1, 1, "", "GateRewriter"], [329, 1, 1, "", "GradientDescentOptimizer"], [330, 1, 1, "", "InitialMapping"], [331, 1, 1, "", "Junction"], [332, 1, 1, "", "KAKCompression"], [333, 1, 1, "", "LazySynthesis"], [334, 1, 1, "", "MultipleLaunchesAnalyzer"], [335, 1, 1, "", "NISQCompiler"], [336, 1, 1, "", "Nnizer"], [337, 1, 1, "", "ObservableSplitter"], [338, 1, 1, "", "Optimizer"], [340, 1, 1, "", "PSOMinimizePlugin"], [339, 1, 1, "", "PatternManager"], [341, 1, 1, "", "QuameleonPlugin"], [342, 1, 1, "", "Remap"], [343, 1, 1, "", "RemotePlugin"], [346, 1, 1, "", "SPSAMinimizePlugin"], [344, 1, 1, "", "ScipyMinimizePlugin"], [345, 1, 1, "", "SeqOptim"], [347, 1, 1, "", "TransformObservable"], [348, 1, 1, "", "ZeroNoiseExtrapolator"]], "qat.plugins.AbstractPlugin": [[322, 2, 1, "", "compile"], [322, 2, 1, "", "do_post_processing"], [322, 2, 1, "", "post_process"], [322, 2, 1, "", "serve"]], "qat.plugins.AdaptVQEPlugin": [[323, 2, 1, "", "compile"]], "qat.plugins.CircuitInliner": [[324, 2, 1, "", "compile"]], "qat.plugins.CostFunctionPlugin": [[325, 2, 1, "", "compile"]], "qat.plugins.Display": [[326, 2, 1, "", "compile"]], "qat.plugins.FusionPlugin": [[327, 2, 1, "", "compile"]], "qat.plugins.GateRewriter": [[328, 2, 1, "", "compile"]], "qat.plugins.GradientDescentOptimizer": [[329, 2, 1, "", "compile"]], "qat.plugins.InitialMapping": [[330, 2, 1, "", "compile"]], "qat.plugins.Junction": [[331, 2, 1, "", "execute"], [331, 2, 1, "", "run"]], "qat.plugins.KAKCompression": [[332, 2, 1, "", "compile"]], "qat.plugins.LazySynthesis": [[333, 2, 1, "", "compile"]], "qat.plugins.MultipleLaunchesAnalyzer": [[334, 2, 1, "", "compile"]], "qat.plugins.NISQCompiler": [[335, 2, 1, "", "compile"]], "qat.plugins.Nnizer": [[336, 2, 1, "", "compile"]], "qat.plugins.ObservableSplitter": [[337, 2, 1, "", "compile"]], "qat.plugins.Optimizer": [[338, 2, 1, "", "evaluate"], [338, 2, 1, "", "optimize"]], "qat.plugins.PSOMinimizePlugin": [[340, 2, 1, "", "compile"]], "qat.plugins.PatternManager": [[339, 2, 1, "", "add_abstract_gate"], [339, 2, 1, "", "compile"], [339, 2, 1, "", "new_group"], [339, 2, 1, "", "replace_pattern"], [339, 2, 1, "", "set_compile_attributes"]], "qat.plugins.QuameleonPlugin": [[341, 2, 1, "", "compile"]], "qat.plugins.Remap": [[342, 2, 1, "", "compile"]], "qat.plugins.RemotePlugin": [[343, 2, 1, "", "compile"]], "qat.plugins.SPSAMinimizePlugin": [[346, 2, 1, "", "compile"]], "qat.plugins.ScipyMinimizePlugin": [[344, 2, 1, "", "compile"], [344, 2, 1, "", "set_options"]], "qat.plugins.SeqOptim": [[345, 2, 1, "", "compile"]], "qat.plugins.TransformObservable": [[347, 2, 1, "", "compile"]], "qat.plugins.ZeroNoiseExtrapolator": [[348, 2, 1, "", "compile"]], "qat.pylinalg": [[79, 0, 0, "-", "simulator"]], "qat.pylinalg.simulator": [[80, 5, 1, "", "mat2nparray"], [81, 5, 1, "", "measure"], [82, 5, 1, "", "project"], [83, 5, 1, "", "raise_break"], [84, 5, 1, "", "reset"], [85, 5, 1, "", "simulate"]], "qat.qpus": [[350, 1, 1, "", "CLinalg"], [353, 1, 1, "", "ClassicalQPU"], [351, 1, 1, "", "PyLinalg"], [356, 1, 1, "", "QPUHandler"], [357, 1, 1, "", "RemoteQPU"], [352, 1, 1, "", "SimulatedAnnealing"], [354, 5, 1, "", "get_current_qpu"], [355, 5, 1, "", "get_default_qpu"]], "qat.qpus.CLinalg": [[350, 2, 1, "", "submit"]], "qat.qpus.PyLinalg": [[351, 2, 1, "", "serve"], [351, 2, 1, "", "submit"], [351, 2, 1, "", "submit_job"]], "qat.qpus.QPUHandler": [[356, 2, 1, "", "apply_resource_consumption_limits"], [356, 2, 1, "", "estimate_resources_for_batch"], [356, 2, 1, "", "get_specs"], [356, 2, 1, "", "serve"], [356, 2, 1, "", "submit"], [356, 2, 1, "", "submit_job"]], "qat.qpus.SimulatedAnnealing": [[352, 2, 1, "", "submit_job"]], "qat.quops": [[360, 1, 1, "", "ChannelRepresentations"], [380, 1, 1, "", "ParametricAmplitudeDamping"], [381, 1, 1, "", "ParametricGateNoise"], [382, 1, 1, "", "ParametricPureDephasing"], [383, 1, 1, "", "ParametricQuantumChannel"], [385, 1, 1, "", "QuantumChannel"], [386, 1, 1, "", "QuantumChannelChi"], [387, 1, 1, "", "QuantumChannelChoi"], [388, 1, 1, "", "QuantumChannelKraus"], [389, 1, 1, "", "QuantumChannelPTM"], [369, 5, 1, "", "is_completely_positive"], [370, 5, 1, "", "is_trace_preserving"], [371, 5, 1, "", "is_trace_reducing"], [372, 5, 1, "", "is_unital"], [373, 5, 1, "", "make_avg_fid_equiv_depol_channel"], [374, 5, 1, "", "make_depolarizing_channel"], [375, 5, 1, "", "make_generalized_amplitude_damping"], [358, 0, 0, "-", "metrics"]], "qat.quops.ParametricAmplitudeDamping": [[380, 4, 1, "", "T_1"], [380, 4, 1, "", "name"], [380, 2, 1, "", "prob"]], "qat.quops.ParametricPureDephasing": [[382, 4, 1, "", "T_phi"], [382, 4, 1, "", "name"], [382, 2, 1, "", "prob"], [382, 2, 1, "", "ptilde"]], "qat.quops.QuantumChannelChi": [[386, 2, 1, "", "apply_to"], [386, 4, 1, "", "arity"], [386, 4, 1, "", "matrix"], [386, 4, 1, "", "matrix_basis"], [386, 4, 1, "", "name"], [386, 2, 1, "", "to_kraus"]], "qat.quops.QuantumChannelChoi": [[387, 4, 1, "", "arity"], [387, 4, 1, "", "matrix"], [387, 4, 1, "", "name"], [387, 2, 1, "", "to_kraus"], [387, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelKraus": [[388, 2, 1, "", "apply_to"], [388, 2, 1, "", "apply_to_vector"], [388, 4, 1, "", "kraus_operators"], [388, 2, 1, "", "kraus_rank"], [388, 4, 1, "", "name"], [388, 2, 1, "", "to_chi"], [388, 2, 1, "", "to_choi"], [388, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelPTM": [[389, 2, 1, "", "apply_to"], [389, 4, 1, "", "arity"], [389, 3, 1, "", "matrix"], [389, 4, 1, "", "name"], [389, 3, 1, "", "ptm"], [389, 3, 1, "", "tensor"], [389, 2, 1, "", "to_choi"], [389, 2, 1, "", "to_kraus"]], "qat.quops.math_util": [[359, 5, 1, "", "are_equal_up_to_phase"], [361, 5, 1, "", "convert_density_mat_to_pauli_vec"], [362, 5, 1, "", "convert_pauli_vec_to_density_mat"], [376, 5, 1, "", "make_pauli_matrix_basis"], [377, 5, 1, "", "make_standard_matrix_basis"], [378, 5, 1, "", "make_standard_vector_basis"], [379, 5, 1, "", "multikron"], [384, 5, 1, "", "partial_trace"]], "qat.quops.metrics": [[363, 5, 1, "", "get_average_process_fidelity"], [364, 5, 1, "", "get_diamond_norm"], [365, 5, 1, "", "get_entanglement_process_fidelity"], [366, 5, 1, "", "get_process_distance"], [367, 5, 1, "", "get_state_fidelity"], [368, 5, 1, "", "get_trace_distance"]], "qat.simulated_annealing.service": [[352, 5, 1, "", "extract_j_and_h_from_obs"]], "qat.synthopline": [[399, 5, 1, "", "generate_trotter_ansatz"], [401, 5, 1, "", "linear_operator_synthesis"], [403, 5, 1, "", "phase_polynomial_synthesis"]], "qat.synthopline.clifford_normalizer": [[391, 1, 1, "", "CliffordNormalizer"]], "qat.synthopline.clifford_normalizer.CliffordNormalizer": [[391, 2, 1, "", "compile_circuit"]], "qat.synthopline.co_diagonalization": [[392, 5, 1, "", "codiagonalize_with_architecture"], [406, 5, 1, "", "synthesize_stabilizer_state"]], "qat.synthopline.initial_mapping": [[397, 5, 1, "", "frequency_mapping"], [400, 5, 1, "", "greedy_mapping"]], "qat.synthopline.interface": [[402, 1, 1, "", "OperatorTableau"], [407, 1, 1, "", "WeylOperator"]], "qat.synthopline.interface.OperatorTableau": [[402, 2, 1, "", "cnot_left"], [402, 2, 1, "", "cnot_right"], [402, 2, 1, "", "cz_left"], [402, 2, 1, "", "cz_right"], [402, 3, 1, "", "dim"], [402, 2, 1, "", "h_left"], [402, 2, 1, "", "h_right"], [402, 2, 1, "", "inverse"], [402, 2, 1, "", "multiply_right"], [402, 2, 1, "", "rx_minus_left"], [402, 2, 1, "", "rx_minus_right"], [402, 2, 1, "", "rx_plus_left"], [402, 2, 1, "", "rx_plus_right"], [402, 2, 1, "", "ry_minus_left"], [402, 2, 1, "", "ry_minus_right"], [402, 2, 1, "", "ry_plus_left"], [402, 2, 1, "", "ry_plus_right"], [402, 2, 1, "", "rz_minus_left"], [402, 2, 1, "", "rz_minus_right"], [402, 2, 1, "", "rz_plus_left"], [402, 2, 1, "", "rz_plus_right"], [402, 2, 1, "", "swap_left"], [402, 2, 1, "", "swap_right"], [402, 3, 1, "", "tableau"], [402, 2, 1, "", "x_left"], [402, 2, 1, "", "x_right"], [402, 2, 1, "", "xx_left"], [402, 2, 1, "", "xx_right"], [402, 2, 1, "", "y_left"], [402, 2, 1, "", "y_right"], [402, 2, 1, "", "z_left"], [402, 2, 1, "", "z_right"]], "qat.synthopline.interface.WeylOperator": [[407, 2, 1, "", "conjugate_with"], [407, 2, 1, "", "to_pauli"]], "qat.synthopline.linear_synthesis": [[394, 5, 1, "", "extract_linear_operator"], [404, 5, 1, "", "random_linear_operator"]], "qat.synthopline.pauli_synth": [[398, 5, 1, "", "generate_random_observable"]], "qat.synthopline.phase_polynomials": [[396, 5, 1, "", "extract_phase_polynomial"], [405, 5, 1, "", "random_phase_polynomial"]], "qat.synthopline.util": [[393, 5, 1, "", "conjugate_observable_tableau"], [395, 5, 1, "", "extract_pauli_rotations"]], "qat.vsolve.ansatz": [[279, 1, 1, "", "AnsatzFactory"]], "qat.vsolve.ansatz.AnsatzFactory": [[279, 2, 1, "", "qaoa_circuit"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "terms": {"": [0, 1, 3, 5, 10, 14, 16, 17, 19, 21, 29, 31, 43, 45, 46, 47, 48, 53, 54, 68, 70, 72, 74, 76, 112, 113, 124, 137, 165, 182, 190, 191, 193, 203, 230, 232, 239, 244, 246, 249, 261, 268, 276, 280, 281, 283, 286, 292, 299, 301, 302, 327, 333, 335, 338, 345, 348, 350, 352, 400, 401, 404, 405, 435, 436, 439], "0": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 61, 62, 72, 79, 84, 85, 88, 89, 90, 98, 102, 109, 110, 113, 114, 135, 136, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 190, 192, 196, 198, 200, 201, 202, 203, 205, 206, 208, 209, 210, 225, 227, 230, 231, 232, 233, 240, 241, 242, 246, 258, 259, 261, 264, 265, 266, 268, 269, 271, 272, 274, 279, 280, 282, 283, 284, 285, 286, 287, 289, 295, 299, 300, 301, 304, 306, 319, 320, 323, 325, 329, 333, 339, 341, 342, 346, 348, 350, 351, 353, 360, 371, 373, 374, 375, 380, 382, 388, 391, 395, 399, 401, 402, 403, 404, 405, 406, 407, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "00": [0, 2, 3, 9, 28, 29, 30, 31, 42, 45, 158, 271, 325, 350], "000": [31, 40, 418], "0000": 1, "000e": 3, "001": [201, 202, 205, 323, 329], "0012104": 289, "002": 435, "002343750000000089": 435, "004000000000000031": 30, "00509220732074": 43, "00633": 44, "007599999999999968": 30, "008309870850233": 43, "0096986656993": 43, "01": [28, 158, 325, 346, 373, 409, 423, 439], "010": 48, "010000211218891442": 30, "0110": 1, "01101": 203, "013442823029635": 43, "015": 373, "015002": [23, 44], "016896958954689": 43, "017": 253, "019711047603124": 43, "01_building_schedul": 18, "01_compil": [44, 45], "01_custom_plugin": 39, "01_digital_circuit": [8, 9], "01_gate_bas": 33, "01_getting_start": [0, 438], "01_hamiltonian": 433, "01_instal": 0, "01_ise": 22, "01_job": [27, 28], "01_lazi": 45, "01_low_level": 49, "01_max_cut_gener": 427, "01_naming_routin": 13, "01_np_probs_for_ann": [417, 418], "01_qiskit": 411, "01_quantum_g": 9, "01_sample_job": 28, "01_write": [7, 8], "02": [201, 202, 205, 435], "0201": 48, "020105914636176": 43, "02462185674054856": 202, "0261930080626697": 202, "028474525820061": 43, "02913885": 23, "02_algorithm": 433, "02_analog_schedul": [8, 18], "02_ancilla": 13, "02_custom_junct": 39, "02_execut": [7, 27], "02_graph_partitioning_gener": 427, "02_high_level": 49, "02_manip_schedul": 18, "02_map": 45, "02_observable_job": 28, "02_pyquil": 411, "02_qaoa": 417, "02_qubo": 22, "02_result": 27, "02_rewrit": [44, 49], "02_user_guid": [7, 438], "02_variat": 9, "02_write": 0, "03": [3, 9, 42, 268, 409], "030": 44, "0302002": 44, "031592653589793": 52, "03163834674860532": 30, "031955565240567": 43, "033238190934057": 43, "03333333": 374, "03333333j": 374, "03900926019963218": 405, "039168205749196": 43, "03_an_job": 18, "03_anneal": 33, "03_annealing_problem": [8, 22], "03_aqo": 417, "03_automated_batch_gener": 28, "03_cirq": 411, "03_comb_prob": 22, "03_compil": [7, 44], "03_execut": 0, "03_hardware_spec": 39, "03_kak": 49, "03_kclique_gener": 427, "03_nnize": 45, "03_observ": 8, "03_oracl": 13, "03_plugin": 433, "03_program": 9, "03_qpu": [27, 33], "0408063": 363, "0410184": 249, "04238586977758": 43, "043774076866844": 43, "048463198411323": 43, "04_api_refer": 438, "04_crossing_lattic": 417, "04_custom_qpu": 33, "04_migrat": 433, "04_pattern": 49, "04_plugin": [27, 39], "04_projectq": 411, "04_routin": [9, 13], "04_variat": 0, "04_vertex_cover_gener": 427, "050251890762960605": 29, "050961515040978": 43, "054181905098986": 43, "054526341074841": 43, "0586089531308263": 43, "0594047723252207e": 16, "05_aqasm": 9, "05_collect": 49, "05_demo": 438, "05_graph_colouring_gener": 427, "05_np_problem_gener": [417, 427], "05_openqasm": 411, "05_variat": 27, "06": [3, 9, 268, 364], "06052": 44, "0617929832106735": 241, "062310": [363, 365, 366], "062499997472187": 43, "066029631991205": 43, "067169560704503": 43, "06_support": 438, "07": [359, 409], "07057477777000822": 43, "07071068": 373, "07071068j": 373, "0713679337660658": 405, "0715436876731843": 43, "07324420138662": 43, "074407576842485": 43, "075": [208, 209, 210], "075j": [208, 209, 210], "076461868704936": 43, "077478517802246": 41, "077850185475096": 43, "07_release_not": 438, "08": [370, 371, 372], "0838417595464542": 202, "084679690171547": 43, "085038718745253": 43, "088257903064251": 43, "08894408347070802": 202, "08918890973059895": 43, "0910": 249, "094947017729282e": [109, 158], "096559311280474": 43, "09663": 44, "09692": 345, "0990661715837247": 202, "0j": [0, 9, 16, 29, 208, 209, 210, 434], "0x7efbfc33d5d0": 319, "0x7fcc82b13320": 109, "0x7fdacf535160": 40, "0x7fdacf545370": 40, "0x7fdacf5454c0": 40, "0x7fdacf546300": 40, "1": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 62, 72, 79, 81, 84, 88, 89, 90, 91, 98, 102, 109, 110, 113, 114, 135, 136, 137, 139, 143, 144, 145, 149, 150, 151, 154, 158, 160, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 191, 193, 194, 200, 201, 202, 206, 208, 209, 210, 219, 220, 223, 225, 227, 231, 232, 233, 236, 241, 242, 244, 245, 246, 251, 252, 253, 258, 261, 265, 266, 268, 269, 270, 271, 272, 279, 280, 282, 283, 284, 285, 286, 287, 289, 295, 299, 300, 301, 303, 304, 308, 313, 319, 325, 327, 329, 332, 333, 335, 339, 340, 342, 345, 346, 348, 350, 351, 352, 353, 360, 368, 371, 373, 374, 375, 376, 380, 382, 384, 387, 388, 389, 391, 392, 393, 395, 399, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "10": [4, 10, 12, 14, 15, 16, 19, 23, 28, 44, 46, 48, 54, 90, 91, 104, 116, 165, 166, 167, 170, 171, 172, 173, 174, 178, 180, 182, 202, 216, 234, 243, 249, 253, 261, 262, 267, 269, 279, 280, 283, 285, 286, 289, 299, 301, 322, 325, 327, 329, 333, 340, 344, 345, 346, 351, 353, 356, 369, 401, 404, 405, 418, 419, 421, 425, 428, 429, 431], "100": [23, 24, 29, 30, 182, 346, 436], "1000": [23, 24, 30, 329, 336, 339], "10000": [30, 300], "1001": [1, 48], "100101044850362": 43, "100373996528695": 43, "10050378152592121": 30, "1007": [44, 48, 253], "101": 346, "1014": 48, "1024": [28, 35, 109], "10515": 44, "10637228722221681": 241, "107320190930116": 43, "1088": 44, "11": [0, 2, 4, 5, 9, 16, 28, 29, 30, 31, 91, 165, 167, 170, 171, 172, 173, 174, 178, 180, 261, 271, 325, 407, 421, 428, 429, 435], "1102": 44, "1103": [23, 243, 249], "110537867632292": 43, "11063358335246258": 202, "111": [31, 40], "1111": 1, "11111": 31, "1111111111": 353, "111925981654408": 43, "1135": 48, "1138": 48, "114056126564443": 43, "1145": 48, "1180695148086566e": 16, "119116022081553": 43, "12": [4, 16, 25, 48, 91, 165, 167, 170, 171, 172, 173, 174, 178, 180, 185, 201, 229, 272, 284, 296, 297, 298, 325, 333, 353, 421, 422, 428, 429], "121": 279, "12166": 345, "122333898903142": 43, "123233995736766e": 142, "1234": [31, 33, 39, 405], "125": 283, "127": [31, 33, 39, 413], "127117231380397": 43, "12787824337288306": 43, "128": 246, "13": [3, 9, 16, 91, 109, 158, 165, 167, 170, 171, 172, 173, 174, 178, 180, 268, 325, 418, 421, 422, 428, 429, 434], "130670023742731": 43, "134": 54, "134149209689825": 43, "13422533266668807": 43, "134630402046639": 43, "13556878796004": 43, "135933409595234": 43, "1372701679264894": 436, "1372701679265027": 436, "14": [16, 90, 91, 165, 167, 170, 172, 173, 174, 178, 180, 261, 269, 421, 422, 428, 429], "1403": 435, "140894886538207": 43, "1411": 424, "141396187688681": 43, "141589966581083": 2, "141592513821316": 2, "141592653589793": [139, 141], "1416940034276815": 435, "142e": 3, "144613866559643": 43, "145": 19, "146": 3, "14600200141013": 43, "147": [243, 249], "1472": 246, "1482": 409, "1485": 409, "14853": 246, "1487": 409, "1490": 409, "1492": 409, "15": [19, 42, 165, 167, 170, 172, 173, 174, 178, 180, 182, 243, 246, 374, 388, 405, 412, 418, 421, 428, 429], "150": [43, 409], "1500000000000001": 25, "15011": 413, "15045610475575114": 202, "153": [243, 249], "153192433805865": 43, "153697271160576": 202, "156409898567016": 43, "1571": 409, "1580887976166925": 43, "16": [4, 47, 52, 143, 167, 170, 173, 174, 180, 421, 422, 428, 429], "1603": 253, "160601477992909": 11, "16401248640469246": 11, "164847916705661": 43, "1654": 409, "1660844645566035": 43, "167": 9, "168222370851849": 43, "168412826630966": 43, "16j": 16, "17": [62, 142, 167, 170, 173, 174, 180, 421, 422, 428, 429], "173185307179587": 52, "17320508": 374, "17320508j": 374, "175": 434, "175472183287923": 43, "178689865486952": 43, "17j": 16, "18": [23, 42, 167, 170, 173, 174, 180, 421, 428, 429, 439], "180078003397194": 43, "181": 47, "187268418250369": 43, "1875": 25, "19": [16, 167, 170, 173, 174, 180, 246, 421, 428, 429], "190": 54, "1903": 345, "1904": 44, "190485896396426": 43, "1905": 345, "19440743": 24, "197902042276512": 43, "19904063671456": 43, "1996": [243, 249], "19981745944447": 43, "1_11": 44, "1d": [135, 136, 154, 280, 286, 299, 300, 352, 362], "1e": [3, 31, 43, 104, 182, 229, 261, 323, 329, 344, 346, 359, 364, 369, 370, 371, 372, 427, 428, 429, 430, 431, 432, 436], "1j": [10, 143, 150, 231], "1st": 191, "2": [0, 1, 3, 5, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 61, 62, 72, 80, 85, 88, 89, 90, 91, 104, 109, 110, 114, 137, 138, 142, 144, 145, 146, 147, 149, 151, 152, 154, 157, 158, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 206, 208, 209, 210, 212, 223, 230, 232, 233, 239, 240, 241, 242, 244, 245, 246, 250, 252, 254, 255, 256, 257, 258, 261, 264, 265, 266, 268, 271, 272, 279, 282, 283, 284, 285, 287, 288, 289, 299, 300, 301, 303, 304, 306, 308, 311, 314, 315, 320, 323, 325, 327, 329, 333, 335, 337, 339, 341, 345, 348, 350, 351, 360, 362, 367, 368, 373, 374, 376, 380, 382, 387, 388, 389, 391, 392, 395, 399, 401, 402, 403, 404, 405, 406, 407, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "20": [4, 15, 16, 36, 37, 46, 54, 167, 180, 261, 327, 333, 335, 336, 339, 391, 409, 418, 421, 422, 428, 429], "200": [3, 329, 427, 428, 429, 430, 431, 432], "2000": 289, "2003": 44, "2004": [5, 44, 249], "2007": 44, "2009": [48, 249], "2011": 48, "2012": 44, "2014": [280, 284, 285, 287, 300, 304, 424], "2017": [241, 253], "2018": [23, 44, 48], "2019": [44, 48, 181, 196, 197, 198, 199], "2020": [44, 345, 436], "2021": [5, 345, 409, 436], "20210199519411307": 202, "2022": [5, 409], "202285339647159": 43, "2023": 409, "2024": [42, 409], "2025": [3, 9, 268, 409], "2025160348011745": 43, "2033521966597658": 405, "2048": 26, "2058": 44, "206787732762667": 43, "209548173806954": 43, "20a": [44, 401], "20b": [44, 401], "21": [167, 180, 418, 421, 428, 429], "212765864414324": 43, "214153978466178": 43, "2147911128415545": 435, "215": 25, "21518767": 23, "22": [24, 109, 167, 180, 279, 421, 428, 429, 435], "220": 47, "220446049250313e": 52, "22134438804222": 43, "224561895495103": 43, "2246467991473532e": 143, "23": [19, 26, 41, 167, 180, 325, 350, 404, 407, 409, 421, 428, 429, 435, 436], "2311": 46, "231448391212731e": 16, "232": 52, "232803587271519": 43, "233158567284403": 43, "234": 395, "23485743": 24, "236361540201612": 43, "236593613731968": 43, "239990276520464": 43, "24": [167, 180, 279, 418, 421, 428, 429], "24362398990367": 43, "246841863341686": 43, "248": [23, 24], "2482291906504095": 43, "2499999999999995": [1, 232], "25": [45, 150, 167, 180, 346, 409, 421, 428, 429], "250": [336, 339], "2530": 249, "254139796073287": 43, "2548758838381864": 43, "2554203886187": 43, "256": 288, "258637894502538": 43, "26": [48, 167, 180, 421, 428, 429], "264059121579198": 268, "266251515259169": 43, "267237644105384": 43, "27": [3, 167, 180, 418, 421, 422, 428, 429], "270434214612328": 43, "270624282986326": 43, "270804098934031": 43, "277700038452693": 43, "278": 54, "28": [167, 180, 409, 421, 428, 429], "28187286": 24, "282305399832024": 43, "289496383345865": 43, "289974949513096e": 16, "29": [167, 180, 421, 428, 429], "29041348355291396": 202, "292713893376934": 43, "294324272275401": 405, "29621913301976593": 202, "2975419919830728": 405, "2d": [183, 185, 186, 280, 285, 286, 299, 301, 352], "2e": 325, "2f": 31, "2fadvanced_usage_ancilla": 408, "2fadvanced_usage_compute_uncomput": 408, "2falgorithm": 408, "2falgorithms_overview": 408, "2faqasm": 408, "2favailable_g": 408, "2fbasic": 408, "2fcircuit_inlin": 408, "2fcircuit_optim": 408, "2fcirq": 408, "2fcombinatorial_optim": 408, "2fcustom_gate_set": 408, "2fdifferentiating_job": 408, "2fdigital_quantum_simulations_spin_fermion": 408, "2fdisplaying_inform": 408, "2femulating_custom_hardware_spec": 408, "2fepr_pair": 408, "2ffancy_ansatz": 408, "2ffusion_plugin": 408, "2fgate_set": 408, "2fgeneric_compil": 408, "2fgetting_started_with_sa": 408, "2fgraph_circuit": 408, "2fgraph_partitioning_myqlm": 408, "2fgrover": 408, "2finlining_vs_not_inlin": 408, "2finteroper": 408, "2fintroduction_combinatorial_optimization_myqlm": 408, "2fjunctions_and_optim": 408, "2fk_clique_myqlm": 408, "2flang": 408, "2flazy_synthesi": 408, "2flinear_operator_synthesi": 408, "2flink": 408, "2fmax_cut_myqlm": 408, "2fmeasurements_and_classic_oper": 408, "2fneedle_vs_haystack": 408, "2fnumber_partitioning_myqlm": 408, "2fobserv": 408, "2fobservable_splitt": 408, "2fopenqasm": 408, "2foverview": 408, "2foverview_bas": 408, "2foverview_combinatorial_optimization_myqlm": 408, "2fpartial_measur": 408, "2fpattern_manag": 408, "2fphase_estim": 408, "2fphase_polynomi": 408, "2fplugin": 408, "2fprojectq": 408, "2fpy_aqasm": 408, "2fpyquil": 408, "2fqaoa": 408, "2fqat_fermion_multiple_launches_analyzer_plugin": 408, "2fqat_fermion_natural_gradient_vq": 408, "2fqat_fermion_overview": 408, "2fqat_fermion_qpe_hubbard_molecul": 408, "2fqat_fermion_quantum_subspace_expansion_h2": 408, "2fqat_fermion_sequential_optimization_plugin": 408, "2fqat_fermion_spin_fermion_transform": 408, "2fqat_fermion_vqe_hubbard": 408, "2fqat_fermion_vqe_ucc_example_1_h2": 408, "2fqat_fermion_vqe_ucc_example_2_lih": 408, "2fqat_fermion_zero_noise_extrapolation_plugin": 408, "2fqft": 408, "2fqiskit": 408, "2fquantum_count": 408, "2fquantum_typ": 408, "2frun_analysi": 408, "2fsatisfying_connectivity_constraint": 408, "2fschedule_arithmet": 408, "2fscipy_optimize_bind": 408, "2fsimul": 408, "2fsimulation_overview": 408, "2fsingle_qubit_gates_compress": 408, "2fsynthoplin": 408, "2ftrotter": 408, "2fusing_qiskit_qpu": 408, "2fvariational_algorithm": 408, "2fvertex_cover_myqlm": 408, "2fvery_advanced_link": 408, "2fvqe_getting_started_random_spin": 408, "2fwriting_quantum_program": 408, "2i": [193, 258, 403], "2i_": 183, "2j": [26, 138, 139, 146, 148, 150], "2k": [1, 113], "2m": 193, "2n": [250, 252, 407], "2n_": 436, "2n_b": 191, "2nd": [204, 437], "2x_": 24, "3": [2, 3, 4, 5, 7, 11, 15, 16, 17, 20, 24, 25, 26, 31, 33, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 72, 91, 109, 110, 137, 139, 141, 144, 145, 146, 148, 152, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 186, 187, 206, 208, 209, 210, 230, 232, 241, 261, 269, 271, 272, 278, 279, 280, 283, 284, 285, 286, 287, 299, 301, 304, 308, 313, 320, 323, 327, 333, 341, 344, 350, 352, 360, 374, 384, 399, 401, 405, 407, 411, 413, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439], "30": [23, 36, 37, 45, 167, 180, 401, 409, 418, 421, 422, 428, 429], "300": [296, 297, 298, 323, 344], "300280687135355": 43, "301304725994495": 43, "302715579792251": 43, "304510957133343": 43, "3099330343247272": 3, "31": [167, 180, 409, 422, 423], "3149172452926734": 43, "316": 439, "3163812967732165": 43, "31g": 435, "32": [167, 180, 246, 422], "32070441182734": 43, "323572383343883": 43, "326789892310831": 43, "3297858": 48, "33": [48, 167, 180, 262, 267, 268], "330": 333, "3304023": 48, "334": 109, "334255426981329": 43, "33432978681930814": 11, "335382950757668": 43, "3354": 44, "337312279398876": 43, "3373191472772326": 11, "338586830612884": 43, "34": [109, 167, 180, 409, 419, 420, 422], "34433107472034": 43, "3444485283492862": 241, "345": 395, "34641016": 388, "348341765118394": 43, "349905149269212": 43, "35": [167, 180, 208, 209, 210, 422], "350457253144458": 43, "3535533905932729": 16, "353553390593273": 16, "3535533905932732": 16, "3535533905932733": 16, "35355339059327334": 16, "3535533905932734": 16, "355": 48, "357648381213677": 43, "358087096185855": 43, "36": [167, 180, 279], "360865891241843": 43, "36270136": 23, "36619430820779764": 43, "368100215914274": 43, "369456435175295": 43, "37": [9, 167, 180], "3711939692726896": 43, "3720": 246, "372662634743337": 43, "3735926535897933": 52, "3747113436983167": 405, "375144804725529": 43, "377": 48, "378081617973222": 43, "3790050638936666": 43, "38": [54, 167, 180, 422], "38143552": 23, "384": 246, "384533129271616": 43, "39": [167, 180, 422], "391724380056845": 43, "39269908169872414": 109, "394941890170694": 43, "3966934598931717": 43, "3980737119687211": 202, "3e": 325, "3x2": [45, 168], "3x3": 179, "4": [1, 4, 5, 10, 11, 14, 16, 17, 21, 24, 25, 26, 31, 42, 43, 44, 45, 46, 47, 52, 62, 90, 109, 118, 120, 137, 160, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 197, 198, 199, 202, 206, 208, 209, 210, 212, 213, 214, 231, 241, 246, 259, 261, 271, 272, 280, 284, 285, 287, 296, 297, 298, 304, 313, 325, 332, 333, 346, 360, 362, 389, 399, 405, 419, 420, 421, 423, 426, 427, 428, 429, 430, 432, 434, 435, 436, 439], "40": [109, 158, 167, 180, 418], "4000": 418, "4008132998151055": 43, "402": 112, "4028": 424, "403413490151967": 43, "4035325389921685": 43, "405149188777983": 43, "4060049": 382, "406738692899531": 43, "41": [3, 9, 167, 180], "411359559619788": 43, "4116920806897142": 202, "41231056": 388, "416907334938749": 43, "4186079760305255": 43, "42": [54, 167, 180], "42580037750341": 43, "42782353": 24, "429017889097748": 43, "43": [4, 167, 180, 279, 409, 422], "43237698": 23, "43329047": 23, "4336244125039366": 241, "434310591176049": 43, "4359135278263615": 405, "437608759889818": 43, "438803830236514": 43, "44": [167, 180, 409], "4408146417397685": 43, "45": [20, 45, 144, 166, 167, 180, 422], "450": 418, "4513569385653438": 202, "452684248527682": 43, "456093405040869": 43, "459876373403235": 43, "46": [4, 167, 180, 268, 422], "4607963267948962": 52, "460888444158442": 405, "461987389162875": 43, "463093888018731": 43, "466": 54, "467825255983212": 43, "46931252": 24, "4697402716155593": 43, "47": [167, 180, 422, 425], "4716849161201715": 43, "474890635287201": 43, "4782917": 48, "48": [167, 180], "483643743614936": 43, "48503501": 23, "48550": 249, "486759904914321": 43, "48842045515434": 43, "4887323326823205": 43, "49": [167, 180], "493952371389838": 43, "497169886948027": 43, "49757047881513866": 202, "4989404620187035": 43, "499482245503874": 43, "4999999999999999": [2, 16, 29, 40, 271], "4d": [183, 185, 186, 190, 191, 193], "4e": 325, "4j": 206, "4n": 252, "5": [4, 5, 11, 16, 19, 20, 24, 25, 29, 31, 42, 43, 45, 46, 47, 52, 54, 91, 109, 110, 141, 145, 154, 165, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 186, 261, 279, 283, 285, 287, 289, 304, 320, 325, 334, 346, 348, 380, 382, 399, 401, 405, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "50": [5, 28, 31, 41, 42, 45, 167, 180, 289, 422, 436], "5000": [428, 429, 430, 431, 432], "500547136042834": 43, "5030425915784116": 241, "505760936683387": 43, "508966622365379": 43, "51": [167, 180], "515185307179586": 52, "519631020061476": 43, "52": [24, 45, 167, 180], "520835920928471": 43, "52482": 44, "528028368526739": 43, "53": 180, "531245885869073": 43, "532115974039705": 43, "5332440745555305": 43, "53659164": 23, "539836936649044": 43, "54": [180, 243, 249], "5401503694982273": 11, "543042588349543": 43, "547848712663567": 43, "55": 180, "55240091": 24, "553344466026133": 43, "5541593": 24, "554911920412971": 43, "5556819510526364": 241, "556322428649167": 43, "56": [25, 180, 333], "562104360403925": 43, "5650034516705777": 202, "565321884796226": 43, "565503599504746": 43, "566664431414253": 43, "569909865068377": 43, "56996588": 23, "57": 180, "5707963267948966": [52, 109, 139], "5707963267948968": 52, "571e": 3, "573912857618934": 43, "57417763": 380, "577118031161081": 43, "58": 180, "58020831115014e": 16, "584796227774537": 43, "58898789005848": 43, "589189718967097": 43, "59": 180, "5933370198564292": 202, "596180357541952": 43, "596954754257252": 43, "599397883721874": 43, "5j": 434, "5n": 250, "6": [3, 5, 16, 23, 26, 43, 46, 52, 112, 138, 142, 152, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 186, 280, 284, 285, 287, 288, 296, 297, 298, 300, 304, 364, 399, 411, 413, 418, 419, 421, 422, 423, 427, 428, 429, 430, 431, 434, 435, 439], "60": [5, 180, 418], "600804048161576": 43, "602": 346, "606873738381287": 43, "607988716307506": 43, "609415432671788": 43, "61": 180, "610079259937452": 43, "611194189252302": 43, "612205505239505": 43, "62": 180, "623063608616994": 43, "625": 150, "625566960352895": 43, "6286776463063797": 43, "63": 180, "630256348945908": 43, "630572718634628": 43, "633473882649783": 43, "634868121399869": 43, "6371797137616126": 43, "63773675": 24, "63995666": 23, "64": [4, 180], "642064723598396": 43, "645269957617071": 43, "65": 180, "65215284": 24, "65543516": 24, "6571393629614874": 43, "66": 3, "660640674092005": 43, "663394966273271": 43, "664332288311813": 43, "667549881576559": 43, "668939962209892": 43, "67": 279, "6710922193808027": 202, "67301865": 23, "6754376522191656": 202, "676140722471976": 43, "679345987743206": 43, "68": 54, "6816299162741488": 43, "686323053012687e": 16, "68663996": 23, "689639977960958": 43, "690455130913762": 43, "691215185231176": 43, "69198662": [23, 24], "694917113931479": 43, "698408283686206": 43, "6997399115082306": 11, "6j": 144, "6n": 252, "7": [5, 16, 28, 43, 46, 109, 160, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 186, 285, 419, 421, 428, 429, 430, 434, 435, 436], "70": 289, "701625880503922": 43, "7019636812122673": 202, "703016592890149": 43, "705843903007917": 327, "70710678": 40, "7071067811865475": [0, 9, 29, 88], "71": [363, 365, 366], "710216711996543": 43, "711147828472819": 43, "71238898038469": 52, "713422004873594": 43, "72": 54, "720968244963121": 43, "72490608": 23, "725005742117538": 43, "725290575516695": 43, "728058913807141": 43, "728826067329258": 43, "73200663": 24, "732484243960599": 43, "735701879431307": 43, "737092143323936": 43, "73860143": 24, "74051823": 23, "744292669403341": 43, "7470142128903474": 201, "747498008667748": 43, "74898502": 24, "75": [25, 435], "756921272016833": 43, "75877295": 23, "758781006437806": 43, "759366182840568": 43, "76": 54, "761794211872875": 43, "766560239333524": 43, "769777878358706": 43, "76994591": 23, "771168050412159": 43, "778365851216715": 43, "781574007364862": 43, "7853981633974483": 109, "78961076": 23, "791199791096136": 43, "7922846408848714": 405, "793441828148005": 43, "796237634486777": 43, "7n": 250, "8": [3, 4, 5, 16, 43, 46, 52, 145, 152, 165, 167, 170, 171, 172, 173, 174, 178, 179, 180, 181, 186, 198, 199, 241, 243, 285, 288, 296, 297, 298, 409, 419, 421, 422, 428, 429, 430, 435], "80": 327, "800636219477267": 43, "800e": 3, "8020901840988643": 43, "8027963267948968": 52, "803853877286103": 43, "805243862714704": 43, "810e": 3, "812442678781775": 43, "812501482421695": 43, "813961400789805e": 16, "815649975250757": 43, "81873075": 380, "82462113": 388, "825": 434, "825405676296021": 43, "827516454292752": 43, "8284271247461903": 138, "829925748795487": 43, "831019179913692e": 16, "8342181": 48, "834712221189005": 43, "8377906427956767": 405, "837929876213487": 43, "8380245572527305": 268, "839319272160725": 43, "8404558907208046": 43, "8404603636564889": 43, "844014899979811": 327, "84432295": 23, "84630373": 23, "846517980244496": 43, "8497259443853284": 43, "8553": 300, "8558128739121065": 405, "859549332338322": 43, "86": 25, "861591796929453": 43, "8630921783166405": 405, "864017190027226": 43, "8660254037652464": 436, "868788210890202": 43, "872005875140848": 43, "873395255383557": 43, "879500672799016": 405, "88": 418, "880593923037767": 43, "881": 401, "8838019382378945": 43, "89": 52, "8901062264077133": 43, "893649695642212": 43, "894292112245867": 43, "895667032866948": 43, "898020498186584": 43, "8988": 246, "8e": 325, "8th": 241, "9": [4, 5, 10, 15, 16, 17, 43, 46, 109, 158, 165, 167, 170, 171, 172, 173, 174, 178, 180, 261, 269, 279, 285, 374, 418, 419, 421, 428, 429], "90": 23, "902864212242859": 43, "906081874068182": 43, "9071609330057144": 435, "907470935988198": 43, "908113826097683": 43, "9138709": 382, "914669859175525": 43, "9147281048857301": 43, "917877933552916": 43, "921957295455061": 43, "927705830162623": 43, "9295143202638128": 241, "92973965471625": 43, "930925877038992": 43, "930945654283062": 43, "936940209765536": 43, "940157872995545": 43, "9406734": 24, "941546803788913": 43, "948745776826388": 43, "95": 418, "9519539303168125": 43, "9565": 44, "9586430161104738": 405, "961540088805791": 43, "9633546100296067": 405, "963814523226146": 43, "9653149713564435": 43, "969": [3, 9, 268], "971016208598128": 43, "974233871922873": 43, "975622767105887": 43, "978": 44, "9794086597380507": 43, "98": [34, 418], "98282162802439": 43, "983": 268, "986029916113976": 43, "99": 418, "9905870287893211": 202, "99216786": 23, "99247166": 373, "994480439026458": 43, "997888735500873": 43, "9979453927503363": 41, "999216035999934": 43, "9999999974320526": 435, "99999999999639": 2, "999999999998534": 3, "9999999999999902": 2, "999999999999999": 3, "9q": 413, "A": [0, 2, 5, 8, 9, 10, 12, 13, 15, 18, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 44, 46, 48, 49, 50, 51, 53, 60, 64, 65, 76, 79, 88, 92, 93, 94, 98, 113, 114, 135, 136, 137, 144, 151, 161, 165, 166, 168, 176, 179, 183, 186, 201, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 234, 241, 242, 243, 249, 261, 266, 271, 276, 278, 280, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 299, 300, 301, 303, 304, 305, 308, 319, 322, 324, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 352, 353, 359, 363, 365, 366, 383, 385, 386, 387, 389, 392, 401, 402, 403, 407, 408, 418, 419, 420, 423, 424, 425, 426, 434, 435, 439], "AND": [5, 16, 17, 89, 266, 283], "AS": 5, "And": [1, 10, 52], "As": [1, 5, 15, 19, 23, 25, 26, 29, 45, 47, 51, 203, 268, 269, 327, 337, 401, 409, 417, 423, 424, 431], "At": [22, 34, 109, 266, 333], "BE": 5, "BUT": 5, "BY": 5, "Be": [348, 358], "But": 82, "By": [4, 5, 10, 28, 53, 109, 110, 232, 247, 261, 266, 271, 340, 411, 412, 426, 436], "FOR": 5, "For": [3, 4, 5, 9, 11, 12, 16, 17, 18, 23, 26, 28, 31, 32, 33, 35, 36, 37, 39, 40, 45, 47, 48, 49, 50, 51, 53, 86, 109, 137, 151, 154, 163, 165, 202, 203, 231, 242, 261, 264, 271, 272, 280, 283, 285, 286, 287, 294, 295, 296, 299, 301, 304, 306, 308, 319, 325, 329, 335, 350, 374, 382, 399, 409, 416, 418, 425, 427, 434, 435, 436], "IF": 5, "IN": 5, "ITS": 5, "If": [1, 4, 5, 17, 24, 25, 28, 31, 33, 35, 39, 40, 41, 46, 50, 51, 53, 59, 64, 67, 68, 71, 72, 73, 75, 88, 109, 113, 129, 137, 151, 153, 154, 156, 158, 161, 182, 187, 200, 203, 204, 213, 216, 226, 228, 229, 231, 232, 241, 242, 250, 259, 261, 267, 271, 272, 281, 283, 286, 289, 295, 299, 301, 319, 322, 323, 329, 331, 335, 339, 340, 342, 344, 345, 346, 350, 351, 355, 356, 377, 378, 382, 388, 391, 397, 399, 400, 403, 407, 409, 410, 419, 420, 421, 422, 423, 424, 426, 434], "In": [1, 3, 5, 8, 9, 13, 14, 15, 16, 18, 23, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 81, 82, 89, 109, 200, 230, 238, 241, 246, 261, 271, 272, 281, 283, 286, 289, 295, 299, 301, 325, 333, 341, 342, 345, 348, 351, 371, 391, 399, 401, 402, 403, 413, 417, 418, 424, 425, 434], "Ising": [22, 24, 25, 26, 33, 34, 153, 280, 283, 284, 285, 287, 288, 299, 300, 301, 304, 352, 409, 418, 424, 427, 439], "It": [7, 9, 13, 16, 17, 19, 23, 29, 32, 34, 36, 37, 38, 41, 45, 46, 52, 54, 81, 82, 84, 85, 109, 113, 153, 154, 160, 201, 203, 205, 226, 229, 230, 231, 241, 268, 271, 272, 280, 283, 284, 285, 286, 287, 288, 299, 300, 301, 302, 304, 311, 327, 335, 340, 344, 345, 352, 353, 354, 365, 399, 401, 403, 409, 424, 425, 435, 436, 437], "Its": [14, 151, 159, 204, 237, 289, 327, 380, 382, 425, 436], "NO": 5, "NOT": [5, 12, 16, 17, 320], "NOTS": 16, "No": [15, 72, 81, 299, 308, 409, 411], "Not": [5, 50, 53, 153, 156], "OF": 5, "OR": [5, 16, 89], "Of": [1, 10, 15, 16, 26, 28, 41], "On": [28, 41, 44, 46, 50, 51, 355], "One": [21, 45, 46, 50, 51, 52, 53, 81, 103, 109, 154, 158, 188, 201, 202, 203, 204, 207, 290, 409, 423, 425, 439], "Or": [10, 266, 412, 413, 414], "SUCH": 5, "Such": [5, 23, 49, 268, 345], "THAT": 5, "THE": 5, "TO": 5, "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 62, 71, 72, 73, 76, 79, 80, 81, 82, 85, 88, 89, 90, 91, 103, 107, 108, 109, 110, 112, 113, 116, 137, 142, 144, 149, 153, 154, 156, 157, 158, 161, 165, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 239, 241, 242, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 268, 269, 271, 272, 273, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 314, 319, 320, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 347, 350, 351, 352, 353, 355, 356, 357, 358, 363, 367, 368, 382, 384, 389, 390, 393, 394, 396, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437], "Their": [10, 39], "Then": [0, 1, 16, 39, 51, 85, 182, 203, 216, 241, 272, 325, 339, 348, 408, 415], "There": [1, 4, 45, 51, 88, 229, 230, 426], "These": [0, 1, 4, 7, 9, 12, 16, 33, 42, 44, 45, 46, 47, 49, 51, 54, 62, 73, 89, 109, 113, 128, 140, 230, 233, 241, 242, 271, 280, 284, 285, 287, 288, 300, 304, 305, 308, 310, 312, 330, 399, 401, 409, 411, 418, 427, 433, 434, 435, 436], "To": [1, 5, 10, 17, 18, 21, 23, 24, 28, 45, 50, 53, 109, 110, 162, 181, 201, 226, 228, 230, 276, 280, 284, 285, 287, 288, 300, 304, 325, 326, 333, 334, 335, 336, 339, 391, 411, 412, 422, 423, 426, 431, 434, 435, 436], "WITH": 5, "Will": [44, 124, 203], "Wille": 48, "With": [41, 46, 47, 399, 426], "_": [1, 16, 46, 52, 182, 183, 193, 201, 207, 232, 246, 248, 258, 272, 327, 329, 348, 373, 382, 386, 387, 389, 399, 434], "_0": [88, 193, 289], "_1": [193, 289], "_10": 109, "_2": [88, 109, 403], "_4": [109, 407], "_6": 109, "_8": 109, "__": 333, "__add__": 109, "__call__": [11, 41, 151], "__init__": [31, 35, 41, 48], "__mult__": 109, "__name__": 165, "__or__": 26, "__str__": [112, 159], "__xor__": 26, "_default_opt": 35, "_gate_set": 109, "_i": [182, 193, 241, 329, 399], "_interv": 203, "_j": [182, 399], "_k": 193, "_overrid": 35, "_paramet": 35, "_parameter_map": 40, "_serial": 40, "_serialized_gate_set": 109, "_spec": [242, 324, 327, 337], "_src": [3, 9, 268], "_subtype_metadata": 40, "_valu": [40, 259], "_x": 333, "_y": 333, "_z": 333, "a_": [186, 191, 258, 351, 384, 434], "a_1": [379, 384, 399], "a_2": [384, 399], "a_calibr": 346, "a_i": 384, "a_n": [379, 384], "a_p": [186, 434], "a_q": [186, 434], "a_r": [186, 434], "aad8ca": 44, "aam18": [44, 403], "ab": [137, 182, 188, 190, 249, 363], "abctract": 216, "abl": [10, 16, 18, 31, 45, 46, 53, 63, 231, 261, 271, 281, 283, 286, 299, 301, 324, 333, 339, 349, 403], "abort": [89, 91], "abort_cod": 91, "about": [0, 31, 36, 37, 50, 51, 109, 224, 237, 409, 435], "abov": [4, 5, 14, 23, 24, 25, 28, 35, 46, 54, 154, 241, 259, 345, 351, 409, 417, 418], "absenc": [28, 81], "abso": 137, "absolut": [137, 138], "abstract": [0, 10, 14, 16, 17, 18, 23, 39, 41, 43, 50, 51, 53, 62, 109, 151, 215, 216, 217, 230, 231, 243, 259, 261, 271, 281, 283, 286, 292, 299, 301, 302, 306, 307, 308, 314, 315, 316, 317, 318, 320, 321, 322, 331, 338, 339, 356, 358, 391, 399, 403, 417], "abstract_g": [259, 308, 339], "abstractg": [13, 14, 17, 50, 54, 62, 88, 109, 128, 230, 234, 238, 242, 243, 259, 261, 308, 339], "abstractgener": [31, 116, 215, 222, 409], "abstractgenetor": 216, "abstractplugin": [40, 109, 113, 133, 321, 357], "abstractregist": [53, 305], "abtract": 230, "acc": [41, 246], "acc_siz": [246, 247, 248], "accept": [5, 25, 28, 34, 36, 37, 41, 48, 50, 51, 53, 108, 116, 188, 213, 216, 261, 320, 322, 339, 351, 356, 403, 409, 434], "access": [4, 9, 28, 31, 33, 35, 39, 40, 45, 46, 79, 89, 109, 137, 154, 164, 165, 222, 230, 236, 241, 270, 286, 297, 298, 299, 301, 309, 343, 350, 394, 396, 399, 401, 403, 404, 405, 434, 435, 436], "accord": [5, 109, 181, 201, 205, 230, 322, 329, 333, 401, 425], "accordingli": [5, 35, 202], "account": 403, "accross": 401, "accumul": [246, 247, 248, 327, 333], "accur": [28, 203], "accuraci": 364, "achiev": [25, 28], "achiv": 439, "acknowledg": 5, "across": 15, "act": [5, 16, 17, 23, 50, 53, 89, 109, 113, 153, 241, 286, 299, 303, 308, 325, 352, 409, 434, 436], "action": 409, "activ": [62, 181, 183, 188, 189, 190, 201, 202, 205, 409, 433, 435], "active_indic": [183, 435], "active_so": 205, "actual": [18, 28, 29, 79, 417, 427], "acycl": 308, "ad": [1, 9, 16, 26, 32, 35, 48, 53, 54, 59, 64, 67, 73, 245, 249, 261, 269, 323, 339, 380, 409], "adam": 436, "adapt": [5, 35, 40, 41, 42, 44, 45, 51, 109, 323, 335, 409, 433, 436, 437], "adaptvqe_plugin": 436, "adaptvqeplugin": [321, 409, 436], "add": [5, 14, 15, 16, 25, 31, 48, 50, 51, 53, 104, 108, 110, 129, 137, 156, 226, 230, 242, 244, 245, 247, 248, 249, 251, 252, 253, 255, 261, 269, 276, 279, 283, 297, 298, 319, 320, 336, 337, 409, 435], "add_abstract_g": [50, 54, 308, 339], "add_claus": [25, 283], "add_const": [244, 245, 247, 249, 253], "add_const_mod": [243, 248], "add_edg": [161, 162], "add_edges_from": [284, 285, 287, 304, 419, 420, 423, 426, 430, 432, 439], "add_funct": [53, 320], "add_mod": 243, "add_nodes_from": [284, 285, 287, 304, 419, 420, 423, 426, 430, 432, 439], "add_pattern": [51, 54, 319, 339], "add_prohibited_valu": [53, 320], "add_sampl": [35, 156], "add_signatur": [129, 242], "add_term": 279, "addendum": 5, "adder": [14, 16, 230, 243, 249, 250, 253], "adding_cost": 213, "addit": [2, 3, 5, 8, 10, 13, 14, 15, 16, 20, 23, 28, 32, 35, 41, 89, 90, 109, 113, 153, 182, 222, 230, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 261, 262, 283, 286, 295, 299, 301, 338, 342, 391, 399, 401, 403, 409, 423, 431, 434, 435], "additin": 272, "addition": [11, 45, 46, 90, 140, 165, 230], "address": [117, 222, 241, 343, 357, 409], "addresses_count": 241, "adequ": 5, "adiabat": [23, 203, 278, 283, 286, 289, 290, 291, 292, 299, 301, 302, 417], "adjac": [211, 212, 214, 327, 426], "adjacentstrategi": [211, 327], "adjunct": 357, "adjust": 203, "administr": [41, 261, 338], "admiss": 231, "adopt": [5, 279, 281, 283, 286, 299, 301, 403], "adress": 241, "adriano": [243, 249], "advanc": [1, 4, 7, 9, 11, 13, 27, 31, 39, 59, 62, 64, 67, 73, 109, 130, 137, 230, 231, 408, 425], "advantag": 31, "advis": [5, 17], "advisor": 5, "aer_simul": [71, 72], "affect": [5, 204, 226, 228], "aforement": 23, "aforesaid": 5, "after": [5, 8, 17, 32, 41, 45, 46, 52, 54, 153, 226, 228, 242, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 345, 346, 348, 350, 401, 426], "afterward": [81, 261], "again": [1, 272, 435], "against": [5, 261, 409], "agav": [165, 177], "aggreg": [28, 33, 35, 103, 104, 109, 158, 261, 322, 409], "aggregate_data": [35, 103, 109, 113, 158], "aglorithm": 16, "agnost": [230, 243], "agre": [4, 5], "agreement": [4, 5], "aim": [23, 34, 54, 181, 280, 409, 433], "aka": 364, "al": [181, 196, 197, 198, 199, 279, 323, 345, 399, 401, 403, 436], "al18": 23, "albash": 23, "albeit": 34, "alek": 44, "alexand": 44, "algebra": [327, 349, 350, 351, 409, 434], "algorithm": [0, 5, 7, 8, 9, 11, 16, 25, 27, 28, 34, 39, 47, 181, 218, 219, 220, 221, 223, 246, 279, 283, 286, 299, 301, 321, 323, 333, 336, 337, 340, 346, 391, 397, 399, 401, 403, 409, 417, 432, 435, 436, 438], "alia": [62, 110], "alias": 155, "align": [23, 400], "all": [0, 1, 4, 5, 9, 16, 18, 19, 28, 29, 30, 31, 35, 36, 40, 41, 46, 48, 50, 53, 54, 64, 65, 86, 89, 90, 91, 107, 109, 113, 114, 118, 121, 158, 161, 162, 165, 166, 198, 202, 211, 215, 224, 226, 228, 230, 237, 238, 241, 242, 250, 252, 254, 255, 256, 257, 259, 261, 266, 272, 279, 286, 287, 289, 298, 300, 308, 309, 319, 321, 323, 324, 326, 327, 329, 332, 337, 338, 340, 341, 344, 345, 346, 350, 353, 357, 358, 399, 403, 408, 409, 414, 417, 418, 428, 434, 435], "all_result": 40, "all_symbol": 137, "all_to_al": 162, "all_valu": 41, "allclos": 401, "alleg": 5, "alloc": [0, 9, 10, 15, 62, 96, 109, 244, 245, 246, 247, 248, 251, 252, 261, 264, 265, 266, 269, 272, 283, 286, 299, 301, 388, 397, 400, 414, 416], "allocate_qureg": 415, "allocated_thread_count_per_job": 96, "allocated_total_memory_mb": 96, "allocation_model": 356, "allocationmodel": [95, 356], "allouch": 44, "allow": [5, 8, 10, 11, 14, 16, 17, 20, 23, 24, 27, 28, 32, 34, 39, 43, 45, 51, 90, 144, 151, 230, 241, 261, 268, 278, 280, 281, 283, 284, 285, 286, 287, 288, 290, 296, 299, 300, 301, 304, 306, 321, 331, 335, 357, 358, 417, 424, 434, 435, 436], "alltoal": [45, 165], "almost": 46, "alon": [5, 18], "along": [5, 22, 28, 285, 288, 300, 418, 424], "alongsid": 5, "alpha": [52, 154, 204, 241, 283, 346], "alpha_": 241, "alpha_i": [31, 399], "alpha_j": 399, "alpha_k": [226, 228], "alreadi": [4, 35, 51, 54, 203, 241, 260, 261, 271, 273, 335, 356, 358, 425, 435, 436], "also": [0, 5, 8, 9, 10, 12, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 39, 41, 43, 45, 46, 49, 52, 89, 109, 153, 156, 158, 165, 202, 203, 204, 216, 225, 227, 241, 268, 269, 271, 272, 276, 280, 283, 284, 285, 286, 287, 288, 294, 299, 300, 301, 304, 333, 338, 342, 345, 348, 351, 353, 357, 358, 401, 403, 409, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439], "alter": [5, 46, 276], "altern": [1, 10, 36, 37, 43, 194, 358, 409, 424, 434], "although": 418, "alwai": [10, 18, 31, 34, 51, 90, 156, 187, 203, 241, 283, 325, 353], "ami": [44, 279, 403], "among": [45, 109, 229, 284, 285, 287, 288, 329, 373, 374, 409, 418, 433], "amount": [5, 109, 158], "amp_threshold": [29, 109, 113, 158, 350], "amplif": [230, 232, 408], "amplification_step": 230, "amplitud": [0, 1, 9, 16, 28, 29, 32, 36, 37, 109, 113, 114, 154, 156, 157, 158, 164, 258, 350, 358, 375, 380, 408, 409], "amplitudedamp": 380, "an": [0, 1, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 52, 53, 62, 70, 71, 72, 75, 80, 84, 88, 89, 90, 92, 93, 94, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 116, 117, 124, 135, 137, 140, 142, 143, 144, 149, 151, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 181, 182, 193, 194, 201, 202, 203, 205, 215, 216, 217, 226, 228, 230, 231, 233, 234, 236, 239, 241, 242, 243, 245, 250, 251, 252, 254, 255, 259, 261, 264, 265, 266, 267, 268, 270, 272, 278, 279, 283, 286, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 309, 320, 323, 324, 325, 327, 328, 331, 336, 337, 338, 339, 340, 341, 342, 343, 348, 351, 352, 355, 356, 357, 358, 385, 388, 390, 393, 394, 395, 396, 399, 401, 403, 404, 405, 407, 408, 409, 412, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439], "an_": [348, 436], "analog": [0, 1, 7, 8, 23, 24, 25, 26, 33, 35, 154, 158, 226, 228, 278, 283, 286, 290, 292, 299, 301, 409, 417, 424, 427, 428, 429, 430, 431, 432, 436, 438], "analyt": 382, "analyz": 408, "anapli": 409, "anc": 16, "ancilla": [13, 16, 88, 109, 261, 266, 272, 408], "ancilla_map": 109, "ancillari": 426, "and_claus": 282, "and_expr": [16, 233], "and_formula": 266, "anderson": [181, 191, 434], "andrew": 289, "aneal": [283, 301], "angl": [2, 31, 39, 41, 52, 53, 62, 109, 137, 142, 149, 198, 268, 271, 312, 313, 325, 334, 345, 350, 395, 399, 402, 403, 424, 436], "angles_0": 271, "angles_1": 271, "ani": [2, 5, 9, 10, 13, 14, 16, 17, 23, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 71, 72, 77, 88, 89, 109, 113, 116, 130, 156, 161, 162, 163, 216, 222, 226, 228, 230, 244, 245, 247, 259, 261, 271, 272, 299, 311, 319, 320, 327, 332, 334, 335, 336, 338, 339, 342, 344, 370, 391, 399, 401, 403, 410, 418, 425, 435, 437, 438], "anneal": [0, 1, 7, 8, 23, 24, 25, 33, 34, 35, 51, 278, 280, 283, 284, 285, 286, 287, 288, 299, 300, 301, 304, 336, 339, 352, 408, 417, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 438], "annihil": 191, "annot": [5, 234], "anoth": [5, 9, 13, 16, 41, 43, 44, 57, 88, 90, 129, 230, 250, 261, 264, 272, 308, 322, 333, 342, 358, 390, 403, 409, 411, 435], "ansatz": [3, 31, 43, 44, 182, 192, 194, 198, 278, 281, 283, 286, 299, 301, 321, 323, 334, 345, 348, 390, 399, 408, 409, 424, 433, 436], "ansatz_circuit": 437, "ansatz_color": 279, "ansatz_default": 279, "ansatz_gray_synth": 279, "ansatz_with_cnot": 279, "ansatz_with_rzz": 279, "ansatzfactori": [278, 424], "answer": [18, 417, 422], "ans\u00e4tz": [3, 11, 279, 283, 286, 301, 399, 424, 433], "antiferromagnet": [3, 34], "antihermitian": 323, "anupam": 241, "any_mat": [23, 24, 439], "anymor": [203, 409], "anyth": [5, 41, 408], "anytre": 4, "ap": [23, 243, 249], "apach": 5, "api": [9, 32, 39, 41, 116, 216, 230, 305, 322, 333, 351, 356, 409, 412, 418, 438], "apparit": [109, 158], "appear": [5, 29, 53, 90, 107, 109, 113, 140, 158, 259, 261, 282, 338, 401, 418], "append": [16, 41, 108, 226, 228, 279, 403], "appendix": 5, "appli": [0, 1, 5, 8, 10, 15, 17, 19, 23, 31, 34, 42, 46, 48, 49, 50, 51, 53, 62, 79, 84, 88, 110, 160, 161, 162, 181, 182, 194, 196, 200, 203, 224, 225, 226, 227, 228, 229, 233, 242, 243, 258, 261, 264, 266, 268, 272, 320, 321, 325, 327, 341, 342, 350, 351, 358, 380, 381, 382, 386, 388, 389, 401, 402, 409, 425, 435, 436], "applianc": [0, 18, 31, 33, 34, 35, 36, 39, 137, 283, 286, 299, 301, 409, 418, 427, 433], "applic": [0, 5, 12, 16, 17, 18, 31, 34, 39, 48, 56, 89, 103, 164, 226, 228, 241, 261, 289, 309, 345, 394, 396, 399, 401, 403, 404, 405, 409, 417, 425, 427, 433], "apply_": 350, "apply_1qbit_ctrl_g": 350, "apply_1qbit_g": 350, "apply_2qbit_ctrl_g": 350, "apply_2qbit_g": 350, "apply_binary_qram": 350, "apply_ccnot": 350, "apply_cnot": 350, "apply_csign": 350, "apply_h": 350, "apply_i": 350, "apply_iswap": 350, "apply_nqbit_ctrl_g": 350, "apply_nqbit_g": 350, "apply_ph": 350, "apply_phase_oracl": 350, "apply_qram": 350, "apply_quantum_subspace_expans": [181, 435], "apply_resource_consumption_limit": 356, "apply_ri": 350, "apply_rx": 350, "apply_rz": 350, "apply_sqrtswap": 350, "apply_state_prepar": 350, "apply_swap": 350, "apply_t": 350, "apply_to": [385, 386, 388, 389], "apply_to_vector": 388, "apply_x": 350, "apply_z": 350, "approach": [201, 204, 205, 230, 278, 337, 400, 417], "appropri": [5, 113, 130, 241, 289], "approv": 5, "approx": [1, 200], "approxim": [3, 25, 32, 36, 157, 182, 200, 203, 283, 284, 285, 286, 287, 288, 289, 299, 301, 304, 321, 333, 346, 380, 408, 417, 432, 436], "april": [48, 253, 409], "apriori": 203, "aq": 415, "aqasm": [9, 10, 12, 14, 15, 16, 29, 30, 31, 40, 45, 46, 47, 48, 50, 51, 54, 56, 62, 64, 84, 88, 89, 90, 109, 110, 182, 194, 230, 232, 241, 242, 261, 272, 325, 327, 339, 341, 353, 395, 408, 415, 435, 436], "aqasm2circ": [12, 17], "aqasmengin": [63, 65, 415], "aqasmprint": [63, 415], "aqo": [217, 218, 219, 220, 221, 223, 283, 286, 289, 291, 292, 293, 299, 301, 302, 417, 427, 428, 429, 430, 431, 432], "aqo_batch": [428, 429, 430, 431, 432], "aqo_job": [283, 286, 291, 292, 293, 299, 301, 302, 425], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 33, 35, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 62, 64, 67, 73, 76, 79, 80, 86, 88, 89, 90, 91, 103, 108, 109, 110, 113, 116, 117, 123, 128, 130, 140, 141, 154, 158, 160, 162, 163, 165, 181, 185, 186, 187, 193, 194, 200, 201, 203, 215, 216, 219, 220, 223, 225, 226, 228, 230, 231, 233, 241, 242, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 269, 271, 272, 273, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 299, 300, 301, 304, 305, 306, 308, 309, 310, 312, 321, 322, 324, 325, 326, 327, 329, 331, 332, 335, 336, 339, 341, 342, 343, 345, 346, 349, 350, 351, 356, 357, 358, 359, 374, 380, 382, 388, 392, 397, 399, 400, 403, 407, 408, 409, 411, 417, 418, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "arang": [284, 285, 287, 304, 419, 420, 423, 430, 432, 439], "arbitrari": [48, 140, 241, 399], "arbitrarili": 393, "arc": 141, "architectur": [41, 44, 45, 46, 48, 165, 335, 390, 399, 401, 409], "archiv": 5, "are_equal_up_to_phas": 358, "arg": [35, 64, 65, 77, 109, 116, 130, 216, 217, 222, 225, 226, 227, 228, 231, 238, 261, 272, 279, 283, 286, 296, 297, 298, 299, 301, 320, 322, 326, 339, 355], "arg0": [402, 407], "arg1": 402, "arg_typ": 130, "argment": [71, 72], "argu": 289, "argument": [2, 10, 12, 17, 19, 21, 31, 33, 35, 39, 40, 46, 53, 71, 72, 91, 108, 109, 113, 116, 130, 137, 142, 143, 149, 151, 159, 161, 163, 203, 222, 231, 232, 238, 241, 244, 245, 246, 247, 248, 259, 261, 264, 268, 269, 271, 272, 279, 281, 283, 286, 299, 301, 308, 309, 319, 325, 327, 331, 332, 335, 336, 337, 338, 339, 340, 342, 344, 346, 347, 355, 391, 399, 403, 409], "ariann": 44, "aris": [5, 436], "arithexpress": [103, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 163, 283, 286, 299, 301, 352, 403, 409], "arithmet": [9, 15, 17, 18, 19, 23, 26, 56, 137, 140, 151, 163, 249, 253, 262, 269, 313, 403, 409], "ariti": [14, 15, 16, 17, 36, 37, 45, 53, 54, 62, 80, 88, 109, 130, 137, 151, 194, 231, 234, 237, 239, 242, 243, 244, 245, 246, 251, 252, 259, 260, 261, 272, 273, 282, 306, 337, 351, 386, 387, 389], "arm64": 4, "around": [36, 37, 70, 71, 72, 74, 194, 203], "arrai": [3, 10, 16, 40, 79, 80, 84, 103, 113, 114, 135, 136, 137, 153, 154, 156, 158, 164, 183, 185, 186, 190, 193, 201, 225, 227, 230, 231, 236, 241, 261, 264, 265, 268, 270, 271, 280, 283, 286, 289, 299, 300, 301, 344, 346, 350, 352, 375, 380, 382, 386, 387, 388, 389, 401, 426, 434, 435], "array_of_numb": 300, "array_of_numbers_s": 300, "array_readonli": 350, "arrow": 230, "art": [103, 110], "articl": [181, 196, 197, 198, 199, 436], "artifici": 436, "artur": [243, 249], "arxiv": [44, 249, 289, 345, 363, 424], "as_graph": [112, 333], "as_quameleon": 112, "asbtract": 109, "ascii": [103, 110], "ask": [46, 50, 54, 81, 82, 351, 409, 410], "aspect": 181, "aspen": [165, 178], "asplo": 48, "assembl": [9, 10], "assembli": 408, "assert": [5, 31, 35, 40, 103, 166, 353, 401], "assert_plugin": [40, 103], "assert_qpu": [35, 103], "asset": 5, "assign": [5, 82, 282, 295, 303, 353], "assigne": 5, "assist": 5, "associ": [5, 35, 41, 113, 193, 203, 226, 228, 283, 334, 435, 436], "assum": [5, 31, 33, 35, 39, 42, 45, 46, 51, 96, 241, 260, 269, 271, 273, 325, 344, 345, 356, 380, 384, 389, 399, 403, 413, 435, 436], "assumpt": [231, 436], "ast": [137, 151], "asymptot": [16, 348], "async_job": 74, "async_qpu": 412, "async_result": [409, 412], "asyncbackendtoqpu": [70, 72, 74, 412], "asynchron": [31, 39, 70, 71, 72, 74, 412], "atan2": 137, "ato": [4, 5, 9, 10, 336, 408, 409], "atol": 31, "atom": [0, 204, 299, 417, 426, 427, 433, 435], "atom1": 204, "atom2": 204, "atomn": 204, "attach": [5, 10, 14, 26, 43, 109, 133, 230, 231, 242, 261, 324], "attempt": [14, 46, 74, 271, 327, 391, 399], "attent": 6, "attribut": [5, 35, 41, 42, 79, 88, 89, 107, 108, 112, 113, 156, 157, 241, 264, 265, 269, 297, 298, 299, 338, 342, 351, 383, 409, 434, 435], "attributeerror": [112, 434], "august": 409, "author": [5, 109, 116, 158, 216, 322, 351, 356], "authorship": 5, "autom": [28, 43, 44, 48, 181], "automat": [1, 4, 11, 16, 43, 49, 51, 52, 110, 153, 187, 244, 245, 246, 251, 252, 259, 280, 284, 285, 287, 288, 300, 304, 305, 336, 401, 409, 425, 436], "av": [363, 373], "avail": [0, 4, 5, 6, 8, 18, 25, 27, 29, 31, 32, 33, 36, 37, 49, 57, 74, 91, 164, 165, 181, 186, 187, 200, 224, 279, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 305, 309, 358, 394, 396, 399, 401, 403, 404, 405, 408, 409, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438], "avala": 408, "avbe96": 243, "aver": 39, "averag": [2, 28, 30, 33, 35, 41, 43, 154, 358, 363, 373, 404, 418], "avoid": [4, 109, 405], "avoir": 271, "awar": [44, 137, 358, 401], "ax": 82, "axi": [28, 54, 241, 395, 435], "axis1": 384, "axis2": 384, "azimzadeh": 44, "b": [5, 16, 52, 109, 137, 140, 163, 188, 190, 219, 220, 223, 245, 248, 250, 252, 254, 256, 257, 280, 282, 285, 287, 304, 348, 359, 407, 419, 420, 423, 436, 439], "b_": [1, 258], "b_1": 1, "b_2": 1, "baboulin": 44, "back": [3, 9, 28, 39, 41, 50, 268, 331, 403, 407, 436], "backend": [46, 70, 71, 72, 75, 77, 113, 330, 391, 392, 399, 406], "backend_nam": 75, "backendconfigur": 77, "backendtoqpu": [70, 71, 412], "backward": [46, 328], "balanc": 285, "bar": [20, 104, 157], "bare": 434, "barenco": [243, 249], "barrier": 34, "base": [1, 4, 5, 7, 8, 12, 16, 23, 24, 25, 26, 31, 33, 43, 44, 49, 50, 51, 79, 86, 204, 215, 217, 230, 243, 246, 249, 250, 251, 252, 268, 276, 277, 278, 281, 283, 286, 294, 299, 301, 305, 308, 312, 321, 323, 324, 327, 329, 333, 336, 340, 344, 346, 350, 351, 358, 381, 390, 391, 392, 399, 401, 406, 408, 409, 417, 433, 434, 435, 436, 438], "base_path": [276, 277], "baseless": 436, "bash": 416, "basi": [1, 5, 16, 21, 28, 29, 102, 103, 109, 156, 158, 160, 181, 186, 187, 201, 203, 204, 206, 207, 208, 209, 210, 225, 227, 246, 261, 266, 281, 321, 337, 347, 351, 361, 362, 376, 377, 378, 386, 388, 393, 403, 407, 409, 425, 433, 434, 435], "basic": [10, 11, 23, 26, 31, 34, 43, 45, 46, 47, 62, 77, 160, 231, 283, 325, 336, 351, 409, 434, 435], "basic_heurist": 336, "basis_chang": 435, "basis_transform": 203, "batch": [27, 33, 35, 39, 40, 45, 47, 54, 68, 71, 72, 74, 75, 96, 103, 109, 113, 116, 215, 216, 217, 218, 219, 220, 221, 222, 223, 242, 295, 296, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 356, 357, 427, 428, 429, 430, 431, 432], "batch1": 47, "batch2": 47, "batch_result": [40, 222, 322], "batchgener": [31, 90, 92, 116, 409], "batchmod": [9, 45, 110, 268, 271, 326, 409], "batchresult": [31, 39, 40, 68, 72, 74, 75, 103, 216, 217, 222, 284, 285, 287, 288, 295, 304, 322, 331, 338, 350, 351, 356, 409], "bath": [191, 193, 434], "bear": 5, "beaudrap": 44, "becaus": [4, 24, 28, 29, 50, 51, 308], "becom": [5, 16, 43, 51, 109, 401], "been": [4, 5, 7, 23, 24, 28, 31, 34, 50, 51, 57, 71, 82, 84, 154, 272, 286, 299, 301, 308, 325, 350, 408, 409, 416, 418, 436, 437], "befor": [2, 4, 5, 15, 31, 40, 43, 44, 45, 47, 54, 57, 193, 234, 242, 261, 324, 327, 336, 399, 409, 425], "beforehand": [109, 324], "begin": [17, 23, 31, 34, 276, 308, 367, 375, 380, 382, 409], "beginn": 408, "behalf": 5, "behav": [46, 151, 230, 231, 261, 269, 272, 357], "behavior": [33, 39, 47, 82, 90, 109, 230, 325, 327, 341, 353, 391, 399], "behaviour": [409, 436], "behind": 128, "being": [15, 18, 23, 24, 28, 34, 51, 62, 83, 226, 228, 261, 272, 283, 286, 299, 301, 350, 399], "believ": 3, "bell": [0, 9, 29, 30, 416], "bell_data": 416, "bell_pair": [0, 2, 9], "bell_stat": 271, "bellow": 4, "belong": [345, 418], "below": [3, 5, 7, 16, 28, 29, 32, 42, 44, 45, 50, 54, 89, 109, 193, 213, 241, 261, 266, 271, 327, 333, 335, 337, 350, 399, 401, 403, 409, 418, 426, 428, 429, 430, 431, 432], "benchmark": [34, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304], "beneath": 18, "benefici": [5, 33], "benefit": [5, 341, 409], "beno": 44, "best": [31, 41, 43, 51, 109, 158, 276, 277, 280, 283, 284, 285, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 304, 321, 336, 339, 351, 401, 408, 417, 418, 427, 432, 436], "best_angles_circ": 31, "best_index": 41, "best_param": 41, "beta": [41, 52, 204, 241, 314, 382, 424], "beta_": 241, "better": [31, 35, 46, 50, 51, 54, 203, 322, 339, 401, 403, 409, 424, 435, 437], "between": [4, 18, 23, 25, 35, 40, 42, 48, 51, 89, 137, 141, 161, 193, 222, 229, 245, 247, 266, 278, 283, 286, 289, 299, 301, 302, 308, 320, 323, 325, 342, 346, 348, 352, 358, 363, 365, 366, 367, 368, 371, 374, 399, 407, 409, 424, 436], "beyond": 5, "bhoslib": 418, "bidirect": [45, 391], "big": [204, 377, 378, 434], "bigg": 329, "bigger": [287, 304, 327, 333, 335, 336, 339, 391, 409], "biggest": 99, "bilp": 278, "bilp_problem": 280, "binari": [17, 22, 28, 32, 34, 71, 74, 81, 84, 103, 107, 108, 109, 112, 113, 114, 135, 136, 153, 156, 158, 161, 278, 280, 283, 286, 299, 301, 409, 436, 439], "binary_linear_integer_program": 280, "binaryqram": 350, "binaryquadraticmodel": [283, 286, 299, 301], "bind": [5, 28, 41, 109, 113, 259, 281, 283, 286, 299, 301, 338, 340, 344, 346], "bind_vari": [109, 182, 259], "binder": [403, 408, 409, 412, 413, 414, 415], "binding_arg": [340, 344, 346], "binding_kwarg": 338, "bit": [1, 4, 9, 12, 14, 16, 17, 20, 40, 79, 89, 101, 109, 156, 203, 230, 246, 258, 260, 261, 269, 273, 289, 342, 350, 353, 399, 425], "bit_flip": 289, "bit_length": 16, "bit_mov": [289, 425], "bitlength": [16, 246], "bitr": 403, "bitstr": [4, 28, 29, 31, 158, 159, 283, 289, 295, 325, 399], "bk": 208, "bka": 336, "bl": 272, "black": [10, 46, 426], "blackbox": 408, "block": [1, 16, 28, 50, 271, 319, 401], "blocker": 409, "bodi": [17, 89, 183, 185, 190, 201, 202, 204, 207, 242, 268, 308, 324, 434, 435], "boil": 436, "boilerpl": 5, "boldsymbol": [386, 387, 389], "bond": 5, "bool": [62, 75, 88, 101, 104, 105, 106, 109, 110, 111, 113, 117, 151, 153, 156, 158, 160, 161, 182, 186, 187, 192, 196, 198, 203, 204, 206, 222, 230, 242, 261, 264, 265, 269, 271, 273, 279, 281, 282, 283, 286, 289, 295, 296, 297, 298, 299, 301, 303, 308, 322, 324, 325, 326, 329, 331, 332, 333, 334, 336, 338, 343, 345, 346, 350, 357, 359, 364, 369, 370, 371, 372, 382, 387, 388, 389, 391, 397, 399, 400, 401, 403, 405, 407], "boolean": [17, 25, 40, 46, 74, 83, 89, 164, 233, 235, 261, 264, 265, 266, 269, 282, 303, 342, 369, 372, 401, 408], "boolexpr": 278, "boolformula": [230, 235, 261], "boson": 103, "both": [5, 16, 23, 24, 42, 47, 54, 75, 129, 154, 301, 304, 332, 399, 401, 412, 422, 424, 427, 433, 434, 436], "bother": 41, "bottom": 313, "bound": [4, 5, 109, 145, 203, 261, 364], "boundari": 360, "box": [10, 46, 230, 261, 426], "box_routin": 261, "bqm_problem": 439, "bracket": [5, 236, 270], "branch": 85, "bravyi": [181, 186, 187, 200, 203, 208, 347, 409, 433, 434], "bre": 108, "breach": 5, "break": [17, 45, 79, 83, 89, 90, 91, 246, 261, 279], "brew": [4, 6, 409], "bring": 435, "browser": 408, "brq": 409, "brugi": 44, "brugi\u00e8r": [44, 401], "budget": [283, 286, 299, 301], "bug": [409, 410], "build": [1, 3, 9, 10, 11, 12, 13, 17, 18, 35, 41, 43, 47, 52, 88, 107, 108, 109, 112, 113, 140, 151, 156, 157, 161, 163, 181, 182, 184, 192, 197, 199, 232, 240, 245, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 266, 281, 286, 289, 299, 311, 321, 323, 331, 332, 338, 375, 399, 409, 435, 436], "build_gat": [14, 17, 230, 238, 242], "build_ucc_ansatz": 437, "builder": [118, 290, 293], "built": [9, 11, 19, 109, 117, 182, 241, 262, 267, 268, 282, 343, 357, 409, 434], "bull": [4, 5], "burden": [41, 338], "burlington": [165, 169], "busi": 5, "byte": [107, 109, 113, 156, 157, 161, 401], "bz2": 4, "c": [4, 5, 17, 46, 52, 53, 54, 62, 84, 88, 107, 109, 113, 183, 186, 191, 193, 195, 201, 207, 222, 233, 246, 251, 255, 256, 257, 276, 280, 307, 324, 326, 345, 346, 348, 349, 390, 391, 392, 396, 401, 403, 406, 409, 416, 424, 425, 434, 436], "c_": [191, 193, 195, 200, 201, 207, 283, 434], "c_1": 46, "c_2": 46, "c_i": 16, "c_j": 16, "c_p": [200, 203], "c_phase": 10, "c_phase_g": 10, "c_q": 200, "c_r": 200, "ca": [201, 205], "calcul": [181, 204, 288, 339, 436], "calibr": [42, 346], "call": [2, 3, 9, 10, 12, 15, 16, 17, 19, 22, 23, 28, 33, 35, 36, 38, 39, 41, 45, 46, 48, 50, 52, 62, 109, 110, 112, 113, 140, 151, 154, 187, 194, 206, 216, 222, 230, 231, 234, 241, 244, 245, 246, 247, 248, 261, 271, 272, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 306, 308, 319, 324, 331, 338, 339, 353, 358, 365, 380, 382, 383, 390, 391, 409, 417, 418, 427, 434, 436, 437, 439], "callabl": [109, 151, 325, 332, 337], "calloc": [12, 90, 109, 233, 236, 261], "can": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 64, 65, 69, 71, 72, 75, 79, 81, 88, 89, 95, 98, 103, 107, 108, 109, 110, 112, 113, 124, 137, 151, 153, 154, 155, 156, 158, 160, 161, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 187, 203, 206, 216, 217, 218, 219, 220, 221, 222, 223, 230, 232, 234, 235, 236, 238, 241, 259, 261, 268, 269, 270, 271, 272, 275, 276, 279, 281, 283, 286, 289, 290, 292, 295, 296, 297, 298, 299, 301, 302, 305, 306, 307, 311, 319, 320, 322, 325, 327, 328, 331, 332, 333, 335, 336, 339, 342, 343, 344, 345, 348, 350, 351, 356, 358, 382, 388, 391, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 417, 418, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439], "cancel": 74, "candid": [213, 276, 277], "cannot": [5, 16, 48, 50, 53, 69, 327, 350, 409], "canon": [191, 193, 358, 388], "capabl": [2, 7, 18, 27, 35, 36, 39, 40, 42, 115, 412, 418], "capac": 28, "capit": 213, "card": 35, "care": [5, 43, 289, 348, 424, 435], "carefulli": [4, 5, 47], "carlo": [253, 280, 284, 285, 287, 288, 300, 304], "carri": [5, 9, 16, 28, 81, 201, 230, 241, 243, 249, 259, 266, 334, 401, 438], "cascad": 399, "case": [5, 8, 23, 25, 27, 28, 29, 31, 32, 34, 39, 41, 46, 50, 53, 89, 158, 193, 200, 203, 225, 230, 238, 241, 271, 281, 283, 286, 289, 299, 301, 306, 323, 333, 335, 344, 345, 348, 351, 388, 391, 399, 403, 408, 409, 424, 434], "cast": [16, 42, 50, 51, 53, 66, 107, 108, 109, 112, 113, 156, 157, 159, 161, 163, 261, 264, 265, 266, 269, 308, 339, 347], "cast_to": [16, 264], "castabl": 51, "caster": [35, 409], "cat": 31, "cat_circuit": 109, "catch": 90, "categori": [5, 36, 44, 409], "catstategener": 31, "catstateresult": 31, "caus": [5, 6, 203, 224, 409], "cbit": [17, 62, 83, 88, 89, 90, 91, 101, 111, 230, 233, 236, 261, 416], "cbit_valu": 89, "cbits_reg": 12, "cblist": 261, "cbreak": [12, 90, 261], "cc": [186, 187, 193, 208, 209, 210, 375, 380, 382, 434], "cc_appli": [12, 261], "cccc": [186, 187, 208, 209, 210, 434], "ccdkm04": [249, 252], "ccnot": [10, 17, 45, 54, 76, 350, 353], "cdot": [46, 54, 313, 314, 368, 391, 403, 407], "cell": [155, 434], "cengin": 415, "certain": [29, 43, 212, 214, 436], "certif": [116, 117, 216, 222, 322, 343, 351, 356, 357], "cf": [339, 347, 351], "cfgg00": 289, "chain": [23, 34, 113, 153], "challeng": 203, "chan1": [363, 365, 366, 388], "chan2": [363, 365, 366, 388], "chan3": 388, "chang": [1, 5, 17, 18, 21, 23, 34, 44, 46, 49, 51, 53, 109, 181, 201, 203, 207, 250, 252, 254, 256, 257, 276, 320, 325, 337, 339, 344, 350, 393, 399, 403, 409, 425, 435, 436], "channel": [224, 225, 226, 227, 228, 229, 360, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 412, 436], "channel_repr": [225, 226, 380, 382], "channelrepresent": [225, 226, 358, 380, 382], "chaotic_random": 340, "char": 436, "charact": [5, 160, 399], "character": 90, "charg": [5, 204, 435], "check": [4, 10, 31, 35, 40, 51, 95, 105, 106, 117, 153, 160, 222, 343, 345, 357, 358, 371, 388, 409], "check_server_cert": [117, 222, 343, 357], "check_trace_preserv": 388, "check_trace_reduc": 388, "check_valid": 160, "chemic": [191, 193, 195, 200], "chemist": 435, "chemistri": [18, 181, 408, 434, 437], "cherri": 4, "chi": [358, 360, 386, 387, 388, 389], "chi_": 386, "child": [286, 289, 299, 301], "children": [140, 282], "chines": 409, "chip": [48, 68, 71, 72, 165, 180, 401, 403, 409], "choi": [358, 360, 363, 364, 365, 366, 387, 388, 389], "choic": [43, 52, 358, 403], "choos": [5, 34, 137, 289, 323, 329, 350, 426, 435, 436], "choose_inertia_funct": 340, "chosen": [201, 247, 286, 299, 301, 323, 325, 329, 346, 401, 403], "chunk": 62, "ci": 204, "circ": [3, 9, 12, 17, 31, 50, 51, 59, 88, 109, 110, 182, 272, 286, 299, 325, 339, 415, 416, 435, 436], "circuit": [0, 1, 2, 3, 4, 5, 7, 9, 13, 15, 16, 17, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 45, 47, 48, 52, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 79, 80, 85, 88, 89, 90, 91, 101, 103, 110, 113, 130, 140, 155, 160, 164, 182, 184, 203, 231, 234, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 268, 269, 271, 272, 276, 277, 278, 279, 281, 283, 286, 299, 301, 305, 308, 312, 319, 323, 324, 325, 326, 327, 328, 332, 333, 335, 336, 337, 339, 342, 345, 348, 350, 351, 391, 392, 394, 395, 396, 397, 399, 400, 401, 403, 406, 411, 417, 424, 436, 437], "circuit1": [16, 109], "circuit2": [16, 109], "circuit_ab": 16, "circuit_build": [56, 103, 225], "circuit_class": [16, 243], "circuit_gener": [10, 130, 278], "circuit_implement": 88, "circuit_nam": 110, "circuit_qft": [16, 243], "circuitgener": [278, 283, 286, 301, 424, 427], "circuitinlin": 321, "circular_ladder_graph": 409, "circumst": [5, 409], "circumv": 33, "cirq": [4, 56, 57, 408, 409, 411, 416], "cirq_bind": 4, "cirq_to_qlm": [58, 414], "civil": 5, "cl": 264, "claim": 5, "clarifi": [7, 437], "clariti": [23, 437], "clasic": [79, 230], "class": [1, 5, 9, 10, 13, 16, 20, 23, 24, 25, 26, 28, 31, 33, 34, 35, 40, 41, 43, 48, 50, 51, 53, 62, 64, 65, 68, 71, 72, 74, 75, 77, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 109, 112, 113, 115, 116, 117, 122, 124, 128, 129, 130, 131, 133, 137, 140, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 176, 179, 181, 186, 187, 194, 201, 202, 203, 206, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 241, 242, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 360, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 402, 407, 409, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436], "class_nam": [261, 272], "class_typ": 261, "classarith": [9, 15, 16, 56, 230, 243, 244, 245, 247], "classic": [1, 9, 23, 28, 29, 33, 34, 41, 79, 83, 85, 89, 101, 103, 109, 110, 159, 182, 230, 233, 235, 236, 241, 261, 266, 267, 269, 280, 284, 285, 287, 288, 289, 300, 304, 321, 327, 329, 333, 342, 344, 353, 408, 409, 424, 432, 433, 436], "classicalqpu": 349, "classicctrl": [79, 89], "classmethod": [107, 108, 109, 112, 113, 153, 156, 157, 158, 161, 283, 286, 299, 301, 320], "claus": [25, 34, 230, 266, 278, 279, 283], "clean": [4, 16, 35], "cleaner": 409, "cleanli": [90, 272], "cleanup_jump_oper": [226, 228], "clear": 109, "clear_gate_set": 242, "clearer": 1, "clearli": 51, "client": [31, 33, 35, 39, 40, 90, 117, 222, 331, 343, 357, 409], "clifford": [45, 333, 337, 390, 391, 392, 393, 395, 399, 402, 403, 406], "clifford_norm": 390, "clifford_tableau": 333, "cliffordnorm": [46, 333, 390], "clinalg": [2, 33, 48, 90, 327, 349, 355, 409], "cliqu": [220, 278, 287, 289, 294, 297, 408, 418, 427], "clone": 408, "close": [15, 52, 261, 272, 278, 289, 299, 320, 390, 422, 435], "closer": 23, "clpso": 340, "clunki": 14, "cluster": [44, 184, 188, 193, 435, 437], "cluster_op": 184, "cluster_oper": 436, "cmake": 6, "cnot": [0, 1, 2, 3, 9, 10, 12, 15, 16, 17, 29, 30, 31, 40, 42, 44, 45, 46, 47, 51, 52, 53, 54, 76, 109, 182, 194, 241, 242, 246, 250, 252, 266, 271, 272, 279, 281, 283, 286, 299, 301, 308, 311, 319, 327, 333, 335, 339, 341, 348, 350, 353, 394, 395, 396, 399, 401, 402, 404, 409, 415, 416, 435, 436], "cnot_count": 279, "cnot_left": 402, "cnot_right": 402, "co": [17, 137, 140, 151, 154, 337, 391, 399], "co_diag_backend": 399, "co_diagon": 390, "cobyla": [3, 43, 344, 427, 428, 429, 430, 431, 432, 435, 436], "code": [0, 1, 3, 5, 14, 16, 17, 23, 28, 31, 34, 35, 39, 40, 41, 49, 50, 51, 53, 62, 79, 82, 90, 91, 92, 93, 94, 107, 109, 113, 137, 181, 264, 271, 272, 281, 283, 286, 299, 301, 306, 319, 325, 341, 409, 410, 412, 413, 416, 425, 433, 435], "codiag": [46, 391], "codiag_arg": 391, "codiagon": 390, "codiagonalize_with_architectur": 390, "coeff": [160, 345], "coeffcient": 160, "coeffici": [0, 11, 20, 23, 52, 153, 160, 186, 190, 201, 202, 345, 348, 374, 383, 403, 436], "coincid": 337, "colab": 409, "collaps": [203, 261], "collect": [5, 8, 11, 17, 19, 43, 45, 49, 56, 103, 113, 128, 129, 213, 242, 261, 281, 283, 286, 299, 301, 305, 319, 327, 329, 331, 338, 339, 340, 344, 345, 346, 399, 409, 424, 435], "collection_from_target": [54, 310], "collectivelli": 399, "color": [279, 281, 283, 286, 299, 301, 337], "coloring_oracl": 16, "colour": [215, 218, 278, 284, 418, 423, 427, 431], "column": 88, "comb_prob": 25, "comb_prob_ob": 25, "combin": [5, 16, 25, 28, 51, 198, 269, 278], "combinatori": [7, 9, 11, 22, 34, 217, 218, 219, 220, 221, 223, 283, 286, 295, 296, 299, 301, 418, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439], "combinatorial_optim_appl": [7, 417], "combinatorial_result": [427, 428, 429, 430, 431, 432], "combinatorialoptimizergener": [215, 218, 219, 220, 221, 223, 294], "combinatorialproblem": [23, 24, 25, 34, 278, 286, 295, 299, 301, 424, 439], "combinatorialresult": [217, 294], "combintori": 427, "come": [1, 4, 10, 11, 15, 16, 17, 18, 23, 43, 45, 52, 90, 203, 219, 220, 223, 230, 241, 280, 283, 285, 286, 287, 299, 301, 304, 327, 333, 351, 352, 399, 425, 436], "comm": [42, 48, 55, 56, 79, 80, 85, 409], "command": [4, 12, 17, 64, 408, 416], "comment": [5, 261], "commerci": 5, "commod": 98, "common": [4, 5, 15, 50, 132, 133], "commonli": [28, 358], "commonqpu": [112, 116, 132], "commun": [5, 410], "communic": 5, "commut": [26, 51, 323, 333, 337, 399, 434, 436], "commutation_collect": 54, "commute_improv": 399, "compact": 306, "compani": 5, "compar": [16, 19, 51, 230, 350, 357], "comparison": [16, 230, 261, 267, 269], "comparison_ep": 261, "compat": [91, 264, 327, 409, 427, 434], "compatibl": 328, "compel": 5, "compens": [5, 226, 228], "compet": 5, "compil": [2, 5, 6, 7, 9, 11, 12, 13, 35, 39, 41, 42, 47, 52, 54, 62, 63, 64, 65, 68, 103, 109, 113, 242, 312, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 356, 357, 390, 391, 408, 411, 438], "compile_circuit": [333, 390, 391], "compile_job": 46, "compiled_circuit": 333, "compiled_job": [45, 52], "compiler_opt": [45, 335], "complet": [4, 5, 36, 41, 96, 114, 201, 204, 205, 358, 364, 369, 418, 420, 430], "complex": [26, 44, 50, 51, 53, 88, 113, 114, 137, 138, 139, 143, 144, 146, 147, 148, 150, 156, 157, 158, 164, 226, 228, 308, 336, 338, 350, 404, 432], "complex128": 350, "complexnumb": [88, 158], "compli": 5, "complianc": 5, "compliant": [46, 48, 53, 336, 341, 401], "complic": [1, 16, 261, 264], "compon": [0, 35, 154], "compos": [0, 3, 9, 10, 16, 20, 26, 31, 32, 35, 39, 40, 42, 49, 50, 51, 53, 59, 62, 64, 67, 73, 75, 84, 85, 88, 91, 107, 112, 116, 153, 203, 213, 215, 226, 228, 230, 235, 241, 308, 325, 331, 339, 341, 342, 347, 388, 403, 409, 412, 413, 415, 416], "composit": [20, 26, 109, 226, 228, 233], "comprehens": [8, 19], "compress": [35, 44, 45, 49, 181, 192, 309, 315, 321, 335, 408, 435], "compris": [36, 45, 203, 327], "comput": [0, 1, 2, 5, 7, 12, 13, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 35, 40, 41, 43, 44, 46, 51, 52, 79, 85, 89, 95, 102, 104, 109, 113, 129, 153, 156, 157, 158, 181, 186, 187, 188, 201, 203, 204, 205, 206, 215, 217, 218, 219, 220, 221, 223, 225, 227, 241, 242, 261, 266, 272, 279, 280, 281, 283, 284, 285, 286, 287, 290, 292, 299, 300, 301, 304, 312, 323, 325, 332, 333, 337, 339, 350, 351, 356, 361, 362, 363, 364, 365, 366, 367, 368, 382, 397, 401, 412, 417, 419, 420, 421, 422, 423, 425, 427, 434, 435, 436, 437], "compute_active_space_integr": 181, "concaten": [109, 307, 399], "concept": [7, 31, 39, 46, 103, 292, 381, 391], "concern": [50, 51, 160, 410, 418], "concurr": 96, "conda": [4, 6, 409], "condit": [4, 5, 12, 17, 216, 261, 266, 269, 418], "condition": 12, "conduct": 29, "confer": [48, 241], "confidenti": 5, "configur": [4, 5, 23, 28, 34, 45, 46, 77, 109, 134, 135, 136, 158, 204, 327, 331, 338, 339, 352, 419, 420, 421, 422, 423], "conflict": [4, 5], "confus": 23, "conj": 17, "conjug": [53, 88, 186, 187, 206, 261, 276, 390, 393, 402, 407], "conjugate_observable_tableau": 390, "conjugate_with": [402, 407], "conjunct": 54, "connect": [5, 31, 33, 39, 45, 46, 48, 50, 68, 71, 72, 75, 112, 116, 117, 133, 161, 165, 166, 168, 176, 179, 215, 216, 222, 308, 321, 322, 335, 336, 341, 343, 349, 351, 356, 357, 399, 401, 403, 408, 411, 418, 419, 421, 426, 428, 429, 432, 438], "connector": 77, "consecut": [44, 49, 50, 52, 54, 162, 283, 286, 299, 301, 308, 321, 332, 346], "consent": 5, "consequ": [4, 15, 23, 47, 109, 113, 272, 282], "consequenti": 5, "consid": [1, 10, 14, 16, 17, 26, 28, 42, 44, 96, 113, 154, 241, 258, 261, 272, 279, 342, 350, 399, 401, 409, 412, 434, 436], "consider": [203, 436], "consist": [1, 5, 8, 12, 18, 24, 31, 34, 46, 79, 160, 203, 261, 278, 283, 322, 333, 345, 351, 399, 419, 420, 421, 422, 423, 426, 428, 429, 430, 431, 432], "consol": [103, 109, 326], "consolid": 5, "conspicu": 5, "const": 253, "constain": 109, "constant": [10, 16, 17, 23, 118, 121, 140, 153, 154, 183, 186, 187, 201, 202, 204, 206, 219, 220, 223, 225, 226, 228, 230, 243, 244, 245, 247, 248, 249, 251, 255, 257, 280, 285, 287, 289, 304, 340, 348, 425, 435, 436], "constant_coeff": [26, 153, 186, 187, 201, 202, 206, 435], "constant_list": 306, "constitu": [17, 158], "constitut": [5, 17, 86], "constrain": 44, "constraint": [45, 48, 51, 53, 137, 261, 280, 321, 336, 403, 408, 419, 420, 423, 439], "constru": 5, "construct": [1, 3, 8, 14, 16, 17, 19, 26, 27, 41, 46, 52, 54, 114, 140, 153, 160, 181, 182, 185, 191, 194, 195, 196, 198, 201, 229, 231, 241, 261, 264, 269, 301, 323, 341, 369, 373, 374, 376, 377, 378, 379, 393, 409, 424, 433, 435], "construct_ucc_ansatz": [181, 437], "constructor": [17, 35, 41, 53, 128, 130, 226, 231, 261, 272, 281, 283, 286, 299, 301, 308, 319, 327, 331, 338, 339, 355, 383, 385, 409, 427, 435], "consult": [5, 434], "contain": [0, 1, 2, 4, 5, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 45, 46, 48, 54, 62, 74, 78, 80, 81, 84, 85, 88, 89, 90, 91, 109, 110, 113, 114, 118, 120, 133, 144, 154, 156, 158, 160, 163, 165, 186, 187, 203, 204, 213, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 237, 243, 260, 261, 262, 271, 272, 273, 280, 281, 283, 284, 285, 286, 287, 288, 294, 295, 299, 300, 301, 304, 327, 339, 342, 344, 351, 352, 360, 394, 396, 408, 409, 416, 424, 434, 436], "content": [4, 5, 16, 88, 109, 110, 242, 250, 252, 254, 256, 257, 408, 409], "context": [2, 16, 23, 349, 354, 358, 435], "continu": [5, 31, 50, 53, 279, 425], "contract": [5, 113, 351], "contrari": [5, 46], "contrib": 409, "contribut": [5, 195, 438], "contributor": 5, "contributori": 5, "control": [1, 5, 9, 16, 17, 18, 41, 44, 45, 51, 53, 79, 88, 89, 110, 123, 161, 204, 230, 237, 241, 261, 272, 276, 350, 401, 402, 404, 405, 408, 409], "controlled_phas": 307, "contruct": 272, "conv": 193, "conveni": [10, 39, 409], "convent": [10, 22, 23, 109, 156, 158, 191, 195, 350, 351, 363], "converg": [345, 424], "convers": [5, 60, 76], "convert": [23, 24, 28, 48, 58, 59, 60, 64, 66, 67, 69, 70, 73, 76, 79, 80, 81, 84, 181, 185, 186, 187, 200, 201, 358, 362, 386, 387, 388, 389, 407, 434, 435], "convert_density_mat_to_pauli_vec": 358, "convert_pauli_vec_to_density_mat": 358, "convert_to_h_integr": [181, 434], "cooper": 5, "coordin": [141, 361, 414], "copi": [4, 5, 16, 109, 155, 186, 187, 206, 269, 320, 350, 409], "coprim": 246, "copyright": 5, "core": [2, 3, 8, 11, 12, 19, 20, 21, 26, 27, 30, 31, 35, 40, 41, 42, 43, 45, 47, 48, 54, 55, 56, 89, 181, 182, 183, 187, 201, 202, 205, 206, 208, 209, 210, 225, 231, 242, 246, 268, 279, 283, 286, 291, 292, 293, 299, 301, 308, 339, 341, 350, 399, 409, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 434, 436], "correct": [35, 53, 259, 269, 281, 283, 286, 291, 292, 299, 301, 418, 436], "correctli": [124, 348, 409], "correl": [193, 229, 434, 435], "correl_typ": 229, "correspond": [16, 17, 18, 24, 27, 29, 35, 40, 45, 50, 51, 52, 62, 64, 68, 71, 72, 75, 82, 88, 89, 104, 109, 112, 113, 114, 130, 136, 151, 154, 161, 186, 187, 191, 193, 201, 206, 225, 226, 227, 228, 231, 241, 276, 280, 283, 284, 285, 287, 288, 289, 300, 304, 313, 314, 315, 316, 317, 318, 331, 332, 338, 348, 350, 351, 354, 356, 380, 382, 390, 392, 406, 407, 409, 416, 424, 426, 436], "correspondig": 261, "cos_expr": 154, "cosinu": [137, 142], "cost": [5, 16, 22, 23, 24, 34, 43, 49, 182, 213, 242, 275, 276, 277, 278, 281, 282, 283, 286, 295, 299, 301, 302, 303, 325, 345, 377, 378, 399, 401, 424, 425, 426, 427, 428, 434, 435], "cost_funct": 325, "costfunctionplugin": 321, "cotanh": 382, "could": [4, 9, 14, 22, 25, 31, 34, 35, 42, 49, 51, 53, 140, 216, 217, 280, 284, 285, 286, 287, 288, 294, 296, 297, 298, 299, 300, 301, 304, 320, 332, 339, 342, 409, 418, 434], "coulomb": [191, 201], "count": [16, 46, 47, 54, 109, 114, 230, 273, 279, 281, 283, 286, 299, 301, 308, 325, 333, 399, 408, 409, 418], "count_pattern": 308, "counter": 16, "counteract": 45, "counterclaim": 5, "coupl": [4, 23, 44, 191, 224, 285, 286, 288, 299, 300, 352, 358, 409, 435, 439], "cours": [1, 10, 15, 16, 26, 28, 46, 425], "court": 5, "cous": 41, "cover": [215, 223, 278, 294, 298, 304, 408, 418, 427], "cowtan": 44, "cp": 364, "cpplist": [276, 277], "cpu": [3, 4, 9, 268, 409], "cpython": [4, 6], "crash": [243, 409], "crawl": [109, 242, 395], "creat": [0, 1, 3, 5, 7, 8, 9, 12, 23, 24, 25, 28, 29, 30, 31, 33, 34, 39, 40, 45, 50, 51, 52, 53, 54, 71, 74, 86, 88, 112, 137, 154, 158, 203, 213, 222, 230, 233, 266, 272, 282, 283, 286, 299, 301, 306, 310, 319, 320, 339, 358, 408, 409, 410, 412, 415, 417, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 435, 439], "creation": [13, 19, 31, 33, 39, 154, 283, 286, 299, 301, 408], "credenti": 412, "creg": [62, 416], "cregist": [230, 261], "criteria": 418, "criterion": 329, "cross": [5, 283, 286, 299, 301, 417], "csd20": [44, 399], "csign": [10, 17, 45, 54, 76, 242, 311, 350], "csq": [191, 193], "ctrl": [1, 10, 17, 31, 45, 76, 88, 109, 242, 326, 409], "ctrl_phase": 53, "ctrl_qubit": 350, "ctrlbit": 261, "cttk09": [249, 250], "cuccaro": 249, "cuccaro_add": [249, 250], "cuda": [3, 9, 268], "cup": [188, 190, 201], "curiou": 1, "current": [16, 35, 40, 89, 109, 162, 186, 187, 206, 215, 231, 242, 272, 290, 291, 308, 321, 324, 345, 349, 351, 354, 427, 428, 429, 430, 431, 432], "current_job": 41, "curs": 4, "custom": [0, 1, 9, 33, 35, 54, 62, 86, 109, 110, 112, 155, 161, 162, 246, 271, 278, 335, 341, 408, 417, 436, 438], "custom_g": 62, "customari": 5, "customg": 10, "cut": [215, 221, 278, 285, 288, 408, 418, 427], "cvbe96": [249, 251], "cvxpy": 4, "cx": 416, "cycl": [192, 194, 196, 198, 345], "cyril": 44, "cz": [45, 54, 242, 311, 335, 402], "cz_left": 402, "cz_right": 402, "d": [5, 51, 52, 53, 54, 109, 185, 193, 201, 276, 285, 363, 366, 368, 374, 382, 387, 389, 424], "d_": [193, 241], "d_1": 384, "d_i": 384, "d_n": 384, "dag": [10, 17, 76, 109, 186, 187, 206, 231, 259, 276, 308, 409], "dagger": [15, 53, 88, 109, 182, 186, 191, 193, 200, 201, 203, 207, 231, 232, 237, 240, 259, 272, 348, 368, 371, 386, 388, 392, 424, 434, 436], "dagger_": 195, "dagger_from_param": 109, "dagstuhl": 241, "dai": 5, "dallair": 196, "damag": 5, "damp": [358, 375, 380], "daniel": 23, "data": [1, 31, 33, 35, 40, 41, 42, 43, 53, 62, 65, 80, 86, 88, 101, 103, 104, 107, 108, 109, 112, 113, 114, 156, 157, 161, 203, 241, 273, 308, 331, 333, 339, 350, 402, 409, 427], "data_s": 40, "data_typ": 40, "datamodel": [56, 79, 80, 86], "dataset": 418, "date": [5, 42, 48], "david": 249, "db12": [44, 390, 402, 407], "dbrugierebv": [44, 401], "de": [16, 44, 401], "deal": [41, 46, 203, 261, 391], "debug": [40, 62, 140, 242, 261, 353], "decai": 336, "decemb": 409, "decent": 1, "decid": [28, 29], "decim": [134, 135, 136, 435], "declar": [0, 5, 8, 15, 16, 17, 19, 25, 26, 45, 103, 109, 151, 231, 236, 264, 268, 269, 270, 278, 283, 412], "decod": [44, 391, 392, 399, 401, 406, 426], "decode_rydberg": [283, 286, 299, 301, 426], "decode_rydberg_meta_data": [283, 286, 299, 301], "decompil": 5, "decompos": [18, 39, 49, 52, 53, 314, 316, 317, 318, 332], "decomposit": [45, 52, 56, 305, 309, 332, 348, 391], "decor": [0, 1, 9, 14, 17, 123, 124, 125, 126, 127, 230, 234, 238, 268, 271, 409], "decreas": [5, 29, 34, 261, 286, 299, 301, 435, 436], "dedic": [0, 5, 8, 18, 43, 158, 305, 339, 358, 418], "deepcopi": [109, 186, 187, 206, 324], "def": [0, 1, 2, 3, 9, 10, 11, 14, 16, 17, 31, 35, 40, 41, 43, 45, 52, 53, 231, 234, 242, 268, 271, 279, 325, 327, 409], "default": [0, 2, 3, 9, 28, 29, 30, 35, 36, 37, 43, 45, 51, 53, 59, 62, 64, 67, 68, 71, 72, 73, 75, 77, 79, 81, 104, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 133, 151, 153, 156, 158, 160, 161, 163, 164, 182, 186, 187, 192, 193, 194, 196, 198, 200, 203, 204, 205, 206, 212, 213, 214, 216, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 241, 242, 247, 249, 250, 261, 269, 271, 272, 273, 276, 279, 280, 281, 283, 285, 286, 287, 289, 299, 301, 304, 308, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 355, 356, 357, 363, 364, 365, 366, 369, 373, 374, 382, 387, 388, 389, 391, 397, 399, 400, 401, 403, 405, 411, 412, 425, 434], "default_g": 242, "default_gate_set": [118, 261, 332], "defaultgatesspecif": 224, "defaulthardwaremodel": [224, 229], "defect": 18, "defend": 5, "defin": [0, 3, 5, 8, 9, 11, 14, 17, 19, 23, 24, 25, 31, 33, 35, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 53, 54, 62, 71, 72, 80, 86, 88, 91, 98, 103, 109, 110, 130, 137, 154, 185, 186, 193, 201, 202, 204, 216, 225, 227, 230, 231, 258, 275, 276, 277, 278, 286, 289, 290, 299, 301, 306, 307, 308, 312, 319, 320, 322, 323, 325, 332, 339, 340, 347, 351, 353, 358, 363, 365, 366, 367, 374, 375, 382, 384, 408, 411, 412, 413, 415, 416, 425, 428, 433, 435, 436], "definit": [5, 14, 22, 23, 33, 47, 50, 53, 62, 88, 109, 162, 201, 229, 242, 261, 281, 283, 286, 299, 301, 305, 363, 374, 408, 409, 434], "degeneraci": [188, 190], "degrad": [46, 327], "degre": [5, 285], "delai": [5, 20], "deleg": [3, 5, 331], "delet": [4, 437], "deliber": 5, "deliv": [36, 38], "deloc": 40, "delta": [34, 203, 314, 336], "delta_": [185, 195, 201], "delta_v": [299, 409], "demand": 261, "demer": 196, "demo": 438, "demonstr": 5, "denot": [154, 374, 376, 426], "dens": [327, 388, 409], "densiti": [46, 154, 204, 358, 362, 367, 368, 386, 388, 389], "density_matrix": [388, 389], "depend": [0, 4, 6, 10, 12, 14, 17, 18, 19, 31, 32, 36, 37, 46, 53, 103, 154, 158, 201, 226, 228, 241, 261, 283, 286, 289, 299, 301, 331, 338, 340, 345, 351, 352, 358, 399, 403, 408, 411, 424, 425, 436], "dependend": 154, "dephas": [358, 382], "depol": [373, 374], "depol_typ": [229, 373, 374], "depolar": [224, 229, 358, 373, 374, 436], "deprec": [88, 389, 413, 433], "deprecationwarn": 409, "depth": [16, 45, 47, 51, 54, 109, 110, 140, 155, 279, 281, 283, 286, 299, 301, 308, 327, 333, 399, 401, 403, 424, 435], "deriv": [5, 43, 71, 113, 299, 358, 409], "descend": [188, 190, 201, 205], "descent": [51, 321, 329, 339, 436], "describ": [0, 5, 7, 8, 10, 11, 14, 16, 17, 18, 22, 25, 27, 28, 31, 32, 35, 36, 38, 43, 46, 50, 51, 88, 89, 95, 96, 97, 99, 103, 112, 128, 130, 137, 151, 153, 156, 158, 160, 161, 162, 165, 181, 184, 224, 225, 227, 228, 230, 231, 233, 241, 262, 265, 266, 267, 276, 280, 283, 284, 285, 287, 288, 289, 295, 296, 300, 304, 308, 319, 327, 329, 332, 333, 345, 356, 358, 392, 393, 403, 406, 408, 409, 424, 426, 433, 434, 436], "descript": [0, 5, 17, 35, 36, 37, 42, 112, 154, 156, 166, 168, 176, 179, 283, 286, 299, 301, 308, 350, 399, 418, 425], "descriptor": 85, "deseri": 109, "design": [4, 5, 7, 8, 12, 13, 14, 23, 27, 31, 33, 39, 40, 44, 48, 57, 88, 109, 116, 140, 215, 230, 233, 262, 264, 265, 266, 267, 269, 272, 305, 309, 314, 315, 316, 317, 318, 325, 327, 409, 412, 424, 427, 435, 438], "desir": [4, 25, 32, 203, 411, 417, 420], "despit": 72, "destroi": 261, "detail": [0, 1, 2, 16, 32, 34, 35, 45, 46, 51, 54, 57, 89, 113, 213, 222, 230, 241, 261, 268, 269, 327, 332, 335, 336, 340, 343, 399, 401, 402, 407, 409, 419, 420, 421, 422, 423, 434, 435, 436], "detect": 110, "determin": [5, 89, 313, 359, 427, 436], "detun": [299, 409], "develop": [5, 350, 403, 438], "deviat": [156, 203], "devic": [18, 44, 45, 46, 47, 48, 55, 56, 95, 96, 99, 112, 333, 417, 426], "devicetyp": 97, "devis": 436, "devoid": 30, "dgd20": [44, 403], "diag": [10, 23, 439], "diagon": [1, 23, 24, 182, 195, 203, 279, 281, 282, 283, 286, 299, 303, 337, 391, 392, 399, 409, 424, 435, 439], "diagram": [230, 296, 297, 298, 426], "diamond": [358, 364], "dict": [35, 62, 68, 72, 75, 107, 108, 109, 110, 112, 113, 129, 140, 161, 204, 225, 226, 227, 228, 276, 283, 286, 299, 301, 314, 315, 316, 317, 318, 331, 335, 338, 339, 340, 344, 346, 350, 351, 356, 382, 391, 396, 397, 400, 403, 405, 409, 428, 429, 430, 431, 432], "dictio": 129, "dictionari": [35, 42, 62, 89, 109, 110, 113, 129, 140, 155, 161, 204, 225, 226, 227, 228, 259, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 332, 338, 350, 382, 403, 405], "dictionnari": [156, 276], "did": [16, 17, 23, 48, 158, 353, 434], "didn": [16, 109], "diff": [1, 151], "differ": [5, 7, 8, 15, 16, 18, 21, 24, 27, 28, 29, 30, 47, 50, 51, 53, 54, 88, 102, 116, 201, 203, 216, 230, 279, 299, 306, 322, 327, 330, 334, 336, 337, 346, 348, 351, 356, 358, 363, 399, 409, 418, 424, 427, 428, 429, 430, 431, 432, 435, 436], "differenti": [113, 140, 151, 163, 408, 409], "diffus": [230, 232, 239], "digit": [18, 281, 409, 424, 427, 436], "dill": 409, "dim": [179, 377, 378, 384, 402], "dimac": 418, "dimens": [44, 168, 179, 191, 241, 271, 377, 378, 384], "dimi": 168, "dimod": [283, 286, 299, 301, 439], "dimx": 168, "ding": 48, "direct": [5, 23, 46, 109, 161, 308, 319, 388, 434, 435], "directli": [0, 9, 12, 16, 17, 23, 28, 43, 47, 48, 52, 80, 155, 160, 237, 266, 271, 272, 283, 286, 299, 301, 314, 315, 316, 317, 318, 325, 350, 409, 411, 424, 435, 436, 437], "directori": 409, "disabl": 409, "disappear": 319, "disassembl": 5, "disast": 5, "disc": 409, "discard": [104, 409], "disclaim": 5, "disclos": 5, "disclosur": 5, "disconnect": [31, 33, 39], "discuss": [5, 9, 43, 44], "diseas": 5, "disjoint": [53, 308], "disk": 299, "displai": [4, 5, 9, 31, 40, 45, 62, 103, 109, 151, 155, 156, 157, 259, 261, 268, 271, 283, 294, 296, 297, 298, 321, 336, 350, 408, 409, 427, 428, 429, 430, 431, 432, 435], "display_pattern": 45, "disput": 5, "dist": 409, "distanc": [358, 366, 368, 436], "distant": [31, 33, 39, 40], "distinct": 230, "distinguish": [89, 229, 374], "distribut": [1, 4, 5, 109, 156, 158, 230, 239, 241, 274, 350, 351, 409, 436], "div": 320, "dive": 1, "divid": [7, 201, 205], "divide_and_conqu": 401, "divis": [23, 409], "dll": 409, "do": [1, 3, 4, 5, 14, 23, 28, 35, 40, 47, 51, 52, 54, 104, 109, 113, 158, 201, 203, 259, 320, 324, 325, 350, 351, 425, 434, 435, 436], "do_link": 261, "do_post_process": [40, 322], "do_validity_check": 160, "doc_rc": 48, "docstr": 409, "document": [1, 5, 7, 9, 36, 37, 41, 48, 57, 79, 103, 202, 229, 237, 264, 265, 269, 278, 283, 327, 335, 336, 344, 346, 350, 373, 409, 412, 434, 435], "doe": [4, 5, 23, 30, 31, 34, 35, 39, 40, 41, 46, 53, 82, 109, 216, 245, 246, 265, 269, 271, 286, 299, 306, 308, 322, 325, 339, 350, 409, 418], "doi": [44, 48, 243, 249, 253], "domain": 5, "don": [1, 5, 41, 82, 226, 228], "done": [10, 12, 14, 16, 17, 31, 45, 51, 75, 109, 187, 250, 252, 254, 272, 283, 290, 336, 338, 350, 400, 434, 436], "door": 18, "dot": [154, 258, 351, 374, 379], "doubl": [47, 109, 114, 158, 187, 188, 190, 219, 220, 223, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 350, 352], "down": [41, 45, 191, 193, 331, 335, 424, 436], "downarrow": [191, 193, 195], "download": [4, 5, 408], "dq": 433, "dr": 201, "draper": 249, "draw": 426, "draw_networkx": [296, 297, 298], "drechsler": 48, "dress": 194, "drive": [19, 20, 21, 158], "driven": 158, "dtype": 401, "due": [5, 22, 29, 30, 45, 109, 188, 190], "dummi": [31, 43, 62, 216, 409], "dummyenergyminim": 31, "dump": [17, 28, 32, 43, 71, 74, 107, 108, 109, 112, 113, 153, 156, 158, 161, 286, 299, 339, 409], "duncan": [44, 399], "duplic": 334, "durat": [51, 154, 225, 226, 227, 228, 275, 276, 283, 286, 289, 299, 301, 358, 380, 382], "durationmetr": [51, 275], "dure": [5, 12, 17, 19, 31, 33, 39, 45, 46, 201, 205, 243, 245, 261, 272, 339, 425, 436], "dwave": [283, 286, 299, 301, 439], "dx": 151, "dynam": [15, 31, 39, 54, 109, 226, 228, 261, 344, 358, 425], "dynamicpattern": 332, "e": [1, 3, 5, 7, 9, 10, 11, 13, 15, 16, 17, 19, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 62, 75, 79, 82, 88, 99, 104, 109, 113, 140, 151, 153, 158, 162, 182, 184, 187, 193, 200, 201, 203, 207, 225, 226, 227, 233, 236, 238, 241, 244, 245, 247, 258, 261, 264, 265, 266, 269, 270, 272, 278, 279, 281, 283, 286, 289, 299, 301, 325, 329, 331, 338, 342, 344, 345, 347, 348, 358, 363, 365, 366, 372, 374, 382, 386, 387, 388, 389, 393, 399, 403, 405, 409, 412, 419, 420, 421, 423, 424, 426, 428, 429, 430, 431, 432, 435, 436, 438], "e_": [201, 203, 380, 382], "e_i": [286, 352], "e_k": [371, 388], "e_min": 182, "e_q": 301, "e_qs": 182, "e_target": [203, 435], "e_vq": 182, "each": [5, 8, 16, 23, 27, 28, 29, 30, 31, 34, 40, 50, 51, 53, 84, 91, 104, 109, 113, 116, 153, 154, 161, 165, 191, 195, 203, 216, 225, 226, 227, 228, 229, 261, 276, 278, 282, 283, 284, 286, 299, 303, 319, 320, 322, 326, 327, 332, 334, 336, 337, 339, 342, 345, 348, 351, 352, 356, 380, 382, 393, 397, 399, 407, 418, 419, 426, 429, 436], "eager": [327, 409], "eagerli": [211, 213], "eagerstrategi": [211, 327], "earlier": [435, 436], "earthquak": 5, "easi": [52, 112, 325, 438], "easier": [5, 123, 325], "easili": [54, 109, 232, 325, 351, 418, 434], "ecount": 41, "edg": [16, 299, 397, 400, 418, 419, 420, 421, 423, 426, 428, 429, 430, 431, 432], "edit": [44, 322, 350], "editori": 5, "edward": [289, 424], "effect": [5, 24, 25, 30, 109, 140, 230, 264, 269, 272, 308, 351, 425], "effici": [11, 16, 17, 20, 43, 44, 48, 49, 153, 181, 190, 194, 305, 321, 388, 409, 424, 435, 436], "eigenenergi": [203, 435], "eigensolv": [41, 408, 409, 433], "eigenst": [192, 196, 203, 282], "eigenvalu": [182, 186, 371, 435, 437], "eigenvector": 435, "eigh": 435, "eight": 435, "eigstate_ind": [192, 196], "eigval": [186, 435], "eigvalsh": [186, 435, 436], "either": [1, 5, 10, 17, 26, 32, 35, 39, 40, 45, 53, 98, 109, 156, 161, 163, 203, 216, 217, 218, 219, 220, 221, 223, 226, 228, 229, 241, 268, 278, 282, 313, 323, 335, 339, 348, 350, 355, 412, 436], "ekert": [243, 249], "elabor": 5, "electron": [5, 181, 186, 187, 188, 189, 190, 201, 202, 203, 204, 205, 435], "electronicstructurehamiltonian": [181, 185, 187, 191, 193, 195, 200, 201, 203, 208, 209, 210, 347, 434, 435], "element": [1, 23, 24, 144, 154, 163, 182, 224, 228, 236, 270, 286, 299, 301, 331, 352, 377, 378, 409, 439], "elementari": [243, 249], "elif": 279, "elimin": [44, 401], "els": [62, 279, 333, 351, 434], "emb": [41, 193, 299, 409], "embed": [68, 72, 75, 193, 299, 323, 329, 340, 344, 345, 346, 350, 351, 356, 409, 417, 426, 434], "emerg": 5, "emploi": 403, "employe": 5, "empti": [16, 17, 46, 54, 109, 113, 156, 242, 261, 356, 389, 435], "emul": [28, 33, 90, 109, 321, 324, 341, 342, 408, 409], "en": 346, "enabl": [3, 4, 9, 18, 204, 268, 276, 401], "encapsul": 32, "enclos": [5, 145, 203], "encod": [8, 18, 22, 25, 34, 103, 113, 153, 154, 158, 181, 269, 278, 280, 281, 283, 284, 285, 286, 287, 288, 300, 301, 302, 304, 325, 417, 419, 420, 423, 424, 425, 426, 439], "encount": [90, 333], "end": [4, 5, 11, 13, 17, 21, 23, 35, 109, 203, 261, 289, 308, 333, 334, 339, 351, 356, 367, 375, 380, 382, 399, 403, 409], "end_ham": 291, "endeavor": 5, "endo": 436, "energi": [3, 11, 18, 22, 23, 31, 34, 41, 43, 113, 156, 182, 190, 191, 201, 202, 203, 204, 268, 280, 283, 284, 285, 286, 287, 288, 299, 300, 301, 304, 325, 352, 409, 417, 424, 435, 436], "energy_dist": 329, "enforc": [5, 112], "eng": 415, "engin": [5, 40, 63, 64, 65, 335, 415], "engine_list": 415, "enhanc": [28, 409], "enough": [16, 34, 95, 333, 435], "ensur": [15, 35, 40, 41, 57, 103, 280, 287, 304, 335, 341], "ent": 365, "entail": [289, 327], "entangl": [45, 46, 47, 194, 279, 335, 337, 358, 365, 400], "entangling_g": 194, "enter": [5, 23, 41, 154, 203, 345], "entir": [5, 32, 36, 37, 38, 84, 204, 276, 277, 351], "entiti": [4, 5], "entitl": 5, "entri": [41, 52, 89, 109, 289, 313, 403, 407], "enumer": [31, 40, 90, 91, 98, 103, 162, 279, 325, 360, 436], "environ": [4, 6, 71, 72, 109, 137, 224, 226, 227, 228, 358, 408, 413], "ep": 364, "epidem": 5, "epr": 408, "eps1": 229, "eps2": 229, "epsilon": 191, "epsilon_": 373, "epsilon_a": 190, "epsilon_b": 190, "epsilon_i": [190, 191], "epsilon_j": 190, "eqnarrai": 367, "equal": [5, 10, 28, 39, 40, 51, 53, 225, 247, 340, 358, 359, 409, 419, 422, 426, 429, 434], "equal_prob": 374, "equat": [113, 219, 220, 223, 226, 228, 280, 285, 287, 304], "equi": 289, "equip": [3, 34], "equit": 5, "equiv": [104, 157, 185, 195, 201, 258, 363, 387, 389], "equival": [3, 5, 14, 26, 29, 40, 45, 46, 49, 50, 51, 53, 54, 62, 84, 109, 113, 305, 306, 319, 320, 327, 328, 332, 333, 335, 336, 339, 391, 395, 399, 401, 409, 424, 436], "er": 16, "era": 48, "erdos_renyi_graph": [47, 54, 333, 425], "err": [29, 32, 156, 157, 182], "error": [5, 14, 29, 30, 32, 35, 40, 48, 53, 90, 91, 92, 93, 94, 104, 105, 106, 156, 157, 229, 373, 380, 409, 436], "error_data": 40, "errortyp": [90, 92, 93, 94], "erupt": 5, "escap": [34, 401], "escartin": 253, "especi": 19, "estim": [28, 29, 30, 75, 96, 104, 156, 157, 203, 230, 260, 408, 409, 412, 433, 436], "estimate_resources_for_batch": 356, "estimated_batch_completion_tim": 96, "et": [181, 196, 197, 198, 199, 279, 323, 345, 399, 401, 403, 436], "eta": [329, 436], "etc": [0, 1, 2, 5, 9, 17, 19, 35, 39, 44, 45, 62, 88, 89, 109, 140, 156, 225, 227, 230, 231, 272, 281, 283, 286, 299, 301, 331, 338, 353, 370, 409, 418, 433], "euclid": 246, "euclidean": 436, "eula": [4, 5], "euler": 312, "europ": 48, "eval": [109, 113, 182, 320], "evalu": [1, 21, 41, 79, 83, 89, 103, 109, 113, 137, 145, 151, 154, 156, 203, 261, 262, 264, 265, 266, 267, 268, 269, 282, 303, 320, 338, 348, 350, 351, 409], "evaluate_term": 350, "evalut": 346, "even": [5, 11, 14, 18, 23, 24, 31, 33, 34, 39, 46, 54, 188, 194, 202, 203, 230, 333, 403, 409], "event": 5, "everi": [18, 124, 190, 347, 418, 423, 431, 432, 434], "everyth": [1, 16, 46, 436], "everytim": 271, "eviden": [0, 97, 438], "evolut": [18, 36, 38, 158, 181, 200, 289, 352, 424], "evolv": [8, 18, 34, 158, 425], "exact": [3, 28, 36, 89, 182, 289, 435], "exact_eigen_energi": 437, "exact_energi": 435, "exactli": [1, 16, 269, 289], "exampl": [5, 9, 18, 19, 25, 26, 27, 28, 29, 31, 32, 34, 35, 42, 43, 46, 48, 49, 50, 52, 53, 62, 88, 109, 153, 154, 182, 186, 187, 201, 202, 203, 206, 208, 209, 210, 216, 235, 241, 242, 266, 268, 269, 272, 279, 289, 290, 306, 320, 325, 341, 344, 358, 373, 374, 380, 382, 395, 399, 401, 402, 408, 409, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 435, 436, 439], "exc_typ": 124, "except": [5, 35, 40, 45, 48, 52, 56, 79, 83, 86, 105, 106, 110, 118, 122, 123, 124, 128, 131, 202, 230, 283, 286, 299, 301, 355, 403, 409], "exception_onli": 123, "exceptions_util": [56, 103], "exceut": 35, "excit": [181, 192, 196, 198, 435], "exclud": [5, 409], "exclus": [5, 332, 401, 409], "excp": 90, "execut": [0, 3, 5, 7, 8, 9, 10, 14, 17, 18, 22, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 48, 50, 68, 71, 72, 75, 91, 96, 99, 103, 109, 113, 116, 158, 203, 215, 218, 219, 220, 221, 222, 223, 261, 264, 265, 269, 276, 277, 294, 321, 324, 331, 338, 341, 343, 349, 350, 351, 352, 356, 408, 409, 411, 412, 417, 418, 426, 427, 428, 429, 430, 431, 432, 436, 438], "exemplifi": 25, "exercis": 5, "exhaust": 403, "exhibit": 48, "exisit": 43, "exist": [5, 44, 272, 420, 430, 437], "exit": [1, 16], "exp": [10, 137, 147, 231, 323, 345, 380, 382, 399], "expand": [54, 399], "expans": [182, 399, 408], "expansion_collect": [45, 54], "expansion_oper": 182, "expect": [4, 29, 30, 31, 39, 40, 123, 151, 158, 203, 246, 268, 323, 325, 327, 348, 350, 399, 403, 409, 435, 436], "expectation_valu": 350, "expens": 204, "experi": [75, 203, 409], "experienc": 18, "experiment": 401, "explain": [3, 7, 31, 33, 34, 39, 42, 48, 305, 339, 409, 434, 435, 437], "explanatori": 10, "explicit": [1, 109, 154], "explicitli": [5, 25], "explod": 54, "exploit": 426, "explor": [18, 41, 109, 289], "expon": 246, "exponanti": 243, "exponenti": [36, 37, 137, 143, 246, 348, 436, 437], "export": [0, 5, 63, 64, 261], "exposit": 358, "expr": [16, 137, 140, 163], "expr1": 16, "expr2": 16, "express": [5, 8, 14, 17, 19, 24, 39, 45, 53, 137, 140, 151, 154, 158, 163, 258, 259, 262, 264, 265, 266, 267, 269, 291, 307, 313, 320, 382, 403, 409], "extend": [2, 5, 7, 27, 107, 108, 109, 112, 113, 153, 156, 158, 161, 231, 272, 409], "extens": [107, 108, 109, 112, 113, 153, 156, 158, 161, 403, 426, 436], "extent": 5, "extern": 358, "extra": [51, 308, 336], "extract": [41, 44, 80, 88, 114, 137, 144, 156, 230, 243, 261, 278, 283, 295, 297, 298, 352, 394, 396, 419, 420, 421, 422, 423, 434], "extract_j_and_h_from_ob": 352, "extract_linear_oper": [390, 401], "extract_pauli_rot": [390, 399], "extract_phase_polynomi": 390, "extrap_g": 348, "extrap_method": 348, "extrapol": [321, 348, 409, 433, 436], "extrem": 46, "ey": 388, "f": [0, 1, 2, 3, 9, 30, 31, 40, 52, 53, 62, 88, 137, 154, 186, 187, 193, 206, 208, 209, 210, 222, 268, 325, 348, 363, 365, 366, 367, 373, 382, 403, 426, 434, 435, 436], "f2": 392, "f_": [104, 157, 191, 193, 363, 365], "f_0": 191, "f_1": 191, "f_2": 191, "f_3": 191, "f_j": 193, "f_k": [104, 157], "f_l": 193, "f_p": [191, 193], "f_q": [191, 193], "f_r": [191, 193], "facilit": 12, "fact": [5, 16, 18, 45, 47, 89, 109, 417], "factor": [23, 184, 219, 220, 223, 246, 280, 285, 287, 304, 428], "factori": [0, 28, 289, 424], "fail": [4, 5, 14, 16, 137, 271, 327, 341, 409], "failur": 5, "fair": 16, "faith": 5, "fall": [3, 9, 268], "fals": [1, 16, 35, 40, 46, 59, 62, 64, 67, 73, 75, 88, 89, 90, 104, 105, 106, 109, 110, 117, 137, 151, 156, 161, 164, 182, 186, 187, 192, 196, 198, 203, 204, 206, 222, 230, 238, 242, 261, 269, 271, 273, 279, 281, 283, 284, 285, 286, 287, 288, 289, 295, 296, 297, 298, 299, 301, 304, 308, 324, 325, 326, 327, 329, 331, 334, 336, 338, 340, 342, 343, 344, 345, 346, 350, 353, 357, 364, 387, 388, 389, 391, 397, 399, 400, 401, 402, 403, 409], "falsi": 295, "famili": 231, "famou": [25, 417], "fan": 249, "far": [5, 16, 435], "farhi": [289, 424], "fast": 203, "faster": [1, 19, 36, 37, 53, 211, 289, 328, 333, 409], "fault": [5, 6, 409], "faulti": 436, "fci": 204, "fdr_pso": 340, "featur": [4, 5, 8, 9, 13, 16, 27, 32, 39, 43, 44, 401, 436], "februari": 409, "fed": [9, 19, 23, 24, 29, 109, 226, 228], "fee": 5, "feed": 52, "feel": 109, "fermion": [7, 55, 56, 103, 347, 436, 437], "fermion_comutator_matrix": 434, "fermion_hamiltonian": [208, 209, 210], "fermionhamiltonian": [181, 186, 188, 200, 208, 209, 210, 347, 434], "fermionic_hamiltonian_exponenti": 437, "fermionic_util": 437, "ferromagnet": 23, "fetch": 338, "few": [0, 1, 3, 16, 42, 46, 49, 50, 51, 53, 123, 230, 418, 425], "fgg14": 424, "fidel": [358, 363, 365, 367, 373, 397, 400], "field": [5, 18, 23, 24, 28, 29, 30, 89, 109, 124, 151, 158, 280, 284, 285, 286, 287, 288, 292, 299, 300, 304, 338, 345, 352, 409, 439], "fifti": 5, "figsiz": [296, 297, 298], "figur": [12, 296, 297, 298], "file": [4, 5, 6, 12, 23, 28, 32, 48, 62, 71, 74, 90, 92, 93, 94, 103, 107, 108, 109, 112, 113, 114, 153, 156, 158, 161, 261, 286, 299, 353, 408, 409, 416, 434], "file_extens": [107, 108, 109, 112, 113, 156, 161], "file_nam": [71, 74], "filenam": [107, 108, 109, 112, 113, 153, 155, 156, 158, 161], "filepath": 408, "fill": 109, "fill_matric": 109, "filter": [20, 29], "final": [0, 1, 3, 4, 8, 10, 12, 16, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 40, 43, 46, 47, 51, 85, 100, 102, 109, 153, 158, 231, 256, 257, 272, 278, 280, 283, 284, 285, 287, 288, 300, 302, 304, 319, 325, 333, 335, 336, 338, 391, 395, 396, 399, 401, 403, 425, 435, 436], "final_observ": 399, "final_qpu": 48, "final_tim": [200, 435], "find": [1, 18, 22, 31, 34, 39, 50, 109, 181, 190, 289, 299, 308, 313, 336, 345, 399, 420, 423, 425, 426, 427, 430, 431, 432, 435], "find_pattern": [50, 308], "fine": [12, 45, 289, 418], "finit": [29, 30, 44, 157], "fire": 5, "first": [0, 1, 3, 6, 10, 14, 15, 16, 28, 31, 34, 36, 38, 41, 45, 47, 49, 50, 51, 53, 68, 72, 75, 88, 109, 113, 116, 152, 156, 161, 168, 181, 193, 200, 203, 213, 216, 230, 241, 245, 250, 252, 254, 256, 257, 260, 261, 266, 272, 273, 283, 286, 287, 289, 299, 301, 306, 308, 323, 327, 329, 335, 339, 340, 344, 345, 346, 350, 351, 356, 363, 365, 366, 367, 368, 399, 400, 402, 407, 414, 419, 421, 422, 428, 429, 435, 436], "first_half": 1, "fisher": 436, "fist": 306, "fit": [5, 41, 48, 348, 436], "five": 25, "fix": [31, 52, 137, 161, 289, 321, 334, 342, 399, 425], "flag": [13, 16], "flagship": 435, "flatten": 241, "flawlessli": 416, "flexibl": [31, 59, 64, 67, 73], "flip": [1, 12, 16, 34, 52, 109, 264, 266, 267, 269, 283, 289, 402, 435], "float": [3, 10, 11, 17, 31, 69, 84, 96, 101, 104, 109, 113, 130, 153, 154, 156, 157, 158, 160, 163, 182, 183, 186, 187, 188, 190, 191, 193, 195, 200, 201, 202, 203, 204, 205, 206, 225, 226, 227, 229, 231, 261, 271, 276, 283, 286, 289, 291, 299, 301, 308, 313, 323, 325, 329, 336, 338, 339, 340, 345, 346, 350, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 382, 391, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 435, 436], "float64": 350, "flow": [39, 109, 357], "fly": 324, "fmt": 155, "fname": [107, 108, 109, 112, 113, 153, 156, 158, 161, 261, 286, 299], "fock": [181, 184, 189, 190, 204, 436, 437], "focu": [1, 325], "focus": [409, 426], "fold": 436, "folder": 5, "follow": [0, 1, 4, 5, 12, 14, 16, 17, 18, 22, 23, 24, 30, 31, 32, 34, 35, 39, 40, 41, 45, 48, 50, 51, 52, 53, 54, 88, 91, 103, 109, 113, 116, 137, 151, 160, 165, 190, 193, 215, 216, 229, 230, 231, 232, 239, 241, 242, 244, 246, 248, 264, 271, 272, 278, 281, 283, 286, 289, 290, 299, 301, 306, 308, 311, 319, 321, 335, 336, 341, 348, 349, 350, 351, 358, 360, 374, 399, 401, 409, 413, 414, 416, 424, 425, 426, 427, 433, 435, 436], "font": [296, 297, 298], "font_siz": [296, 297, 298], "foo": [14, 20, 234], "footnot": 5, "footprint": 242, "foral": [17, 24, 53, 183, 201], "forbidden": 163, "forc": [5, 51, 290, 293, 387, 389], "forego": 5, "forese": 5, "forg": 4, "fork": [116, 216, 322, 351, 356], "form": [5, 16, 23, 26, 39, 81, 82, 88, 90, 191, 193, 226, 228, 235, 240, 296, 297, 298, 299, 314, 327, 344, 345, 348, 352, 369, 380, 382, 393, 409, 418, 431, 436], "formal": [28, 34, 44, 325, 426], "format": [4, 5, 12, 16, 28, 32, 64, 79, 80, 89, 109, 111, 151, 155, 159, 163, 204, 261, 279, 289, 370, 371, 411, 413, 436], "formul": [22, 23, 24, 25, 278, 280, 284, 285, 287, 299, 300, 302, 304, 403, 417, 418, 434, 439], "formula": [16, 17, 23, 28, 46, 53, 79, 83, 88, 89, 103, 109, 111, 190, 230, 233, 235, 261, 266, 269, 282, 320], "formula_ev": [89, 103], "formula_str": 111, "forth": [5, 436], "forward": [46, 357], "found": [0, 3, 22, 31, 35, 36, 50, 109, 140, 181, 182, 203, 268, 280, 284, 285, 286, 287, 288, 294, 297, 299, 300, 301, 304, 308, 338, 355, 402, 407, 409, 410, 418, 427, 433, 437], "four": [194, 435], "fourier": [154, 253, 258, 403, 408], "frac": [1, 17, 24, 53, 113, 154, 186, 190, 191, 193, 200, 201, 203, 241, 258, 285, 289, 299, 314, 315, 329, 368, 374, 382, 387, 389, 409, 418, 425, 434], "framework": [1, 2, 3, 4, 7, 8, 9, 11, 12, 18, 31, 33, 35, 39, 40, 41, 43, 86, 103, 137, 231, 286, 299, 325, 425, 438], "franc": 5, "free": [5, 15, 109, 261, 348, 435, 436], "free_ancilla": [16, 261, 272], "freed": [15, 16, 272], "freed_ancilla": 272, "freez": [181, 201, 205], "frequenc": [28, 29, 47, 104, 109, 154, 157, 158, 299, 330, 390, 409], "frequency_map": [47, 330, 390], "frequent": 47, "fresh": [15, 39, 109, 118, 119, 242, 259, 261, 272, 283, 331, 338], "freshli": 109, "friendli": [5, 31, 109, 427], "from": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 59, 60, 62, 64, 67, 71, 72, 73, 76, 80, 82, 88, 89, 90, 91, 97, 98, 101, 103, 107, 108, 109, 110, 112, 113, 114, 117, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 190, 191, 197, 201, 202, 203, 205, 206, 208, 209, 210, 217, 219, 220, 223, 226, 228, 230, 231, 232, 233, 238, 241, 242, 243, 246, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 295, 296, 297, 298, 299, 300, 301, 304, 308, 309, 311, 314, 315, 316, 317, 318, 319, 323, 325, 327, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 344, 348, 350, 351, 352, 353, 357, 358, 373, 374, 379, 380, 382, 384, 388, 390, 394, 395, 399, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "from_byt": [107, 109, 113, 156, 157, 161], "from_decomposit": 332, "from_nx": [42, 161], "from_str": 140, "from_thrift": [107, 108, 109, 112, 113, 156, 157, 161, 286, 299], "front": [160, 327, 409], "frugal": 16, "fsim": 198, "fubini": 436, "fuer": 241, "full": [5, 14, 18, 34, 36, 81, 82, 84, 110, 203, 204, 241, 250, 258, 283, 286, 299, 301, 331, 403, 409, 418, 427, 436], "full_kroneck": 388, "full_rary_tre": [288, 421, 427, 428, 429, 431], "fulli": [109, 166, 333, 416, 424], "fun": [3, 130, 271, 320, 336, 339], "func": [125, 126, 127, 130, 154, 231, 234, 268], "function": [0, 1, 3, 5, 9, 10, 11, 15, 16, 17, 22, 23, 24, 31, 33, 34, 35, 40, 43, 44, 47, 49, 50, 51, 52, 53, 59, 64, 67, 73, 81, 82, 88, 103, 109, 110, 112, 116, 123, 124, 130, 135, 136, 137, 141, 142, 143, 149, 151, 154, 155, 182, 184, 186, 187, 188, 200, 201, 203, 204, 205, 206, 216, 217, 225, 230, 231, 234, 237, 238, 261, 268, 271, 276, 277, 281, 283, 286, 295, 296, 297, 298, 299, 301, 302, 306, 308, 312, 314, 315, 316, 317, 318, 320, 325, 331, 332, 333, 336, 338, 341, 344, 345, 346, 351, 352, 358, 380, 382, 399, 401, 403, 412, 413, 414, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437], "functool": [16, 31], "further": [23, 24, 54, 261, 333, 339], "furthermor": 5, "fuse": [213, 409], "fusion": [55, 56, 327, 350, 409], "fusionplugin": [211, 321, 350, 408, 409], "futur": 20, "futurewarn": 409, "g": [3, 5, 7, 9, 10, 13, 17, 23, 25, 33, 35, 39, 44, 53, 62, 75, 88, 99, 109, 154, 182, 225, 226, 227, 244, 245, 247, 249, 272, 278, 281, 283, 286, 299, 301, 329, 331, 338, 344, 345, 348, 409, 426, 436, 438], "g_": 329, "gadget": 426, "gain": 399, "gamma": [52, 283, 286, 299, 301, 314, 346, 382, 424], "gamma_max": [280, 284, 285, 287, 288, 300, 304], "gamma_min": [280, 284, 285, 287, 288, 300, 304], "gamma_t": [24, 158, 283, 286, 299, 301, 419, 420, 421, 422, 423], "gap": 289, "garcia": 253, "gate": [0, 1, 2, 7, 8, 13, 15, 16, 18, 23, 24, 25, 26, 31, 33, 35, 37, 39, 40, 42, 44, 47, 48, 49, 50, 51, 62, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 103, 109, 110, 112, 118, 119, 120, 121, 128, 129, 130, 155, 161, 162, 194, 198, 200, 211, 212, 213, 214, 225, 226, 227, 228, 229, 231, 232, 238, 240, 241, 242, 243, 246, 260, 261, 264, 268, 272, 273, 276, 277, 278, 279, 281, 283, 286, 299, 301, 305, 306, 307, 308, 311, 314, 315, 316, 317, 318, 319, 321, 323, 325, 327, 328, 332, 333, 336, 337, 338, 339, 341, 342, 345, 348, 350, 351, 353, 358, 381, 386, 387, 389, 394, 396, 397, 399, 400, 402, 403, 408, 409, 415, 416, 417, 436, 438], "gate1": 261, "gate2": 261, "gate_d": [225, 227], "gate_nois": [226, 228], "gate_po": 101, "gate_s": 246, "gate_set": [42, 45, 56, 103, 109, 231, 242, 281, 283, 286, 299, 301, 308, 339, 341], "gate_signatur": 242, "gate_tim": [109, 225, 226, 227, 276], "gate_typ": [225, 227, 381], "gated": [88, 89, 109], "gatedefinit": [87, 89], "gatelist": [276, 277], "gatenam": [53, 305, 308], "gaterewrit": 321, "gates_specif": [226, 228, 381], "gateset": [42, 109, 112, 128, 131, 229, 242, 261, 308, 332, 339, 341], "gatesignatur": [128, 129, 231, 238, 242], "gatesspecif": [224, 225, 226, 228, 381], "gatesyntax": [128, 131], "gatesyntaxredefinit": [128, 129], "gatetyp": [79, 89, 110], "gather": [238, 409], "gauss": 401, "gaussian": [44, 401], "gen": 130, "gener": [0, 5, 9, 11, 14, 15, 16, 17, 18, 22, 23, 28, 29, 34, 36, 37, 44, 45, 46, 47, 54, 55, 56, 59, 62, 64, 67, 73, 88, 109, 113, 115, 116, 118, 119, 120, 130, 140, 154, 158, 163, 181, 182, 203, 224, 225, 230, 231, 238, 241, 242, 244, 245, 246, 247, 248, 251, 252, 259, 260, 261, 269, 271, 272, 279, 281, 283, 286, 289, 295, 296, 299, 301, 302, 308, 321, 327, 332, 333, 335, 336, 338, 346, 350, 358, 375, 398, 399, 403, 404, 405, 407, 415, 416, 417, 418, 424, 425, 435, 436, 437], "generate_gate_set": 230, "generate_nois": 154, "generate_random_observ": 390, "generate_trotter_ansatz": 390, "generator_exception_onli": 123, "generatorexcept": [90, 123, 125], "geometri": [204, 435], "geq": [201, 285], "get": [26, 28, 29, 35, 39, 41, 50, 51, 53, 92, 93, 94, 113, 137, 157, 181, 189, 225, 227, 306, 349, 401, 408, 409, 412, 435, 436, 437, 438], "get_active_space_hamiltonian": 437, "get_average_process_fidel": 358, "get_best_index": [276, 277], "get_best_paramet": [280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 419, 420, 421, 422, 423], "get_circuit": 130, "get_cluster_op": [181, 437], "get_current_qpu": 349, "get_default_qpu": [0, 1, 2, 3, 16, 28, 29, 30, 31, 40, 41, 43, 90, 109, 112, 113, 182, 232, 325, 349, 409, 427, 428, 429, 430, 431, 432, 435, 436], "get_diamond_norm": 358, "get_distribut": 350, "get_electronic_hamiltonian": [201, 434, 435], "get_entanglement_process_fidel": 358, "get_euler_angl": [52, 312], "get_free_ancilla": [261, 272], "get_gate_tim": [225, 227], "get_hf_ket": [181, 437], "get_initial_params_and_cluster_op": 437, "get_ipython": 155, "get_item": 137, "get_item_expr": 144, "get_j_h_and_offset": [286, 299], "get_mapped_distribut": 350, "get_mapped_statevector": 350, "get_matrix": [130, 186, 187, 206, 435, 436, 437], "get_nois": 154, "get_observ": [23, 24, 25, 281, 283, 286, 299, 301, 302], "get_param_gener": [118, 225], "get_permuted_statevector": 350, "get_predef_gener": [118, 225], "get_process_dist": 358, "get_q_and_offset": 301, "get_qaoa_gate_set": [281, 283, 286, 299, 301], "get_qc": 413, "get_quantum_channel": [225, 227], "get_routin": 241, "get_spec": [40, 42, 356], "get_state_fidel": [358, 363, 365], "get_terms_ob": [282, 303], "get_trace_dist": [358, 366], "get_vari": [11, 41, 107, 109, 113, 140, 158, 163, 259, 282, 303, 329, 409], "getbbox": 409, "getlength": 409, "getsiz": 409, "getter": 161, "getting_start": 408, "gg": [280, 348, 436], "gh": 408, "ghostscript": 4, "ghz": 40, "gilchrist": 363, "github": [408, 409, 410, 433], "giurgica": 436, "give": [5, 12, 18, 40, 41, 52, 216, 226, 228, 417], "given": [1, 3, 5, 10, 23, 24, 28, 29, 31, 34, 40, 41, 43, 51, 52, 88, 109, 113, 116, 124, 130, 137, 154, 164, 181, 182, 183, 203, 225, 226, 227, 228, 240, 258, 261, 276, 277, 280, 284, 285, 287, 288, 300, 304, 313, 320, 323, 325, 327, 339, 350, 352, 360, 361, 365, 380, 382, 391, 392, 393, 399, 406, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 435, 436], "glibc": 409, "global": [34, 51, 313, 339, 358, 405, 407, 425, 436], "global_metr": [51, 339], "go": [3, 39, 53, 54, 203, 308, 348, 399, 403, 428, 429, 430, 431, 432], "goal": [45, 51], "god": 5, "goe": [357, 387, 389], "goldston": [289, 424], "good": [1, 5, 16, 35, 46, 203, 418, 436], "goodwil": 5, "googl": [59, 165, 167, 409, 414], "google_circ": 414, "google_sycamor": 165, "got": 266, "goubault": [44, 401], "govern": 5, "government": 5, "gpu": [3, 9, 99, 268], "grad_norm": 329, "gradient": [43, 51, 113, 321, 323, 329, 336, 339, 408, 409, 433, 436], "gradientdescentoptim": [321, 436], "grai": [279, 403], "grant": 5, "graph": [42, 50, 53, 112, 161, 162, 215, 218, 219, 220, 221, 223, 278, 279, 283, 284, 285, 286, 287, 288, 294, 296, 297, 298, 299, 301, 304, 308, 333, 337, 339, 391, 392, 397, 399, 400, 401, 403, 406, 408, 409, 420, 421, 423, 425, 426, 427, 428, 430, 431, 439], "graph_colour": 284, "graph_colouring_appl": 432, "graph_colouring_gener": 432, "graph_colouring_problem": 284, "graph_partit": 285, "graph_partitioning_ann_prob": 418, "graph_partitioning_appl": 429, "graph_partitioning_gener": 429, "graph_partitioning_problem": [285, 419], "graphcircuit": [49, 50, 53, 305, 328, 339], "graphcolour": [278, 301, 432], "graphcolouringgener": [215, 432], "graphpartit": [278, 419, 429], "graphpartitioninggener": [215, 419, 429], "graphpartitioningresult": [218, 219, 221, 284, 285, 287, 288, 294], "grasp": 31, "gray_synth": [279, 403], "gray_synth_on_graph": 403, "graysynth": [279, 399, 403], "greater": [409, 424], "greedi": [44, 47, 281, 283, 286, 299, 301, 330, 337, 390, 391, 397, 399, 401, 403], "greedili": [399, 401, 403], "greedy_depth": 399, "greedy_gauss": 401, "greedy_map": [47, 330, 390], "green": 230, "grid": [45, 165, 168, 179, 414], "griddevic": [45, 47, 165], "gridqubit": 414, "griend": 44, "grimslei": 323, "grossli": 5, "ground": [3, 18, 23, 31, 182, 204, 283, 289, 424, 425, 435, 436], "groundstat": 204, "group": [44, 51, 113, 193, 211, 213, 214, 305, 311, 319, 327, 337, 339, 399, 410, 426], "group_swap": 319, "grover": [230, 232, 239, 408], "grover_diffus": 230, "gset": 418, "gsyntax": 88, "guarante": [45, 203], "guess": [204, 435, 437], "guess_energi": 435, "guess_init_param": [181, 437], "guid": [1, 4, 27, 57, 109, 230, 305, 310, 335, 339, 438], "gushu": 48, "gutmann": [289, 424], "h": [0, 1, 2, 3, 9, 10, 11, 12, 14, 16, 17, 18, 19, 23, 29, 30, 31, 34, 40, 43, 45, 46, 49, 50, 51, 52, 53, 54, 76, 88, 109, 113, 158, 182, 185, 186, 187, 191, 193, 195, 200, 201, 203, 206, 208, 209, 210, 219, 220, 223, 225, 226, 227, 228, 232, 241, 242, 246, 271, 272, 280, 282, 285, 286, 287, 288, 289, 299, 300, 301, 304, 319, 329, 337, 350, 352, 393, 399, 402, 409, 415, 416, 425, 426, 434, 435, 439], "h0": 399, "h1": 399, "h2": 408, "h_": [23, 24, 34, 185, 186, 190, 191, 193, 200, 201, 203, 425, 434], "h_0": [289, 424, 425], "h_1": 399, "h_2": [399, 435], "h_a": [219, 220, 223, 280, 285, 287, 304], "h_b": [219, 220, 223, 280, 285, 287, 304], "h_c": [424, 425], "h_el": 203, "h_elec": 434, "h_fermion": 434, "h_fermion1": 434, "h_fermion2": 434, "h_field": [23, 439], "h_gate": 53, "h_hat_ij": 207, "h_hat_ijkl": 207, "h_i": [18, 113, 158, 352, 426], "h_left": 402, "h_pq": [186, 434], "h_pqr": [186, 434], "h_right": 402, "h_rz": 271, "h_spin": 434, "h_spin1": 434, "h_spin2": 434, "ha": [5, 10, 12, 15, 16, 20, 23, 24, 28, 31, 33, 34, 39, 40, 48, 50, 51, 53, 57, 71, 85, 88, 109, 112, 113, 137, 154, 160, 191, 216, 244, 245, 246, 250, 251, 252, 259, 272, 279, 282, 308, 325, 351, 371, 380, 382, 389, 408, 409, 422, 423, 431, 434, 436, 437], "had": [14, 16, 25, 81, 82, 84], "hadamard": [17, 44, 113, 409], "half": [1, 351, 409], "halt": 158, "ham": [289, 325, 425], "ham_path": 401, "hamiltonian": [3, 8, 18, 22, 24, 33, 103, 153, 154, 158, 182, 185, 200, 201, 202, 203, 208, 209, 210, 219, 220, 223, 226, 228, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 299, 300, 301, 302, 304, 347, 352, 393, 401, 409, 424, 425, 433, 435, 436, 437], "hamiltonian_sp": 435, "hamitonian": 425, "hamming_weight": 289, "hand": [50, 53, 109, 116, 140, 233, 262, 264, 265, 266, 267, 269], "handl": [3, 16, 34, 45, 181, 182, 230, 278, 281, 283, 286, 299, 301, 341, 353, 403, 409, 424, 434, 438], "handler": [133, 357], "happen": [45, 46, 51, 242, 261, 264, 265, 269, 407], "hard": [16, 25, 34, 36, 37, 47, 51, 325, 417, 425, 439], "harder": 51, "hardwar": [10, 18, 31, 35, 42, 44, 45, 46, 48, 53, 55, 56, 99, 112, 155, 181, 194, 222, 321, 322, 325, 326, 332, 335, 336, 341, 342, 392, 406, 408, 409, 435], "hardware_model": 155, "hardware_spec": 40, "hardwaremodel": [154, 224], "hardwarespec": [35, 39, 40, 42, 48, 103, 109, 113, 116, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 218, 219, 220, 221, 222, 223, 322, 325, 326, 328, 332, 336, 339, 341, 342, 347, 356, 391, 392, 406, 409], "harm": 5, "harmless": 5, "harre": 436, "hartre": [181, 184, 189, 190, 204, 436, 437], "has_matric": 109, "has_statevector": [40, 156], "hat": [103, 182, 201, 207, 348, 387, 403, 436], "hate": 391, "have": [1, 2, 4, 5, 7, 10, 11, 14, 15, 16, 18, 19, 28, 31, 34, 35, 41, 45, 46, 48, 51, 53, 71, 81, 82, 84, 88, 89, 107, 108, 109, 112, 113, 124, 137, 140, 153, 154, 156, 158, 161, 162, 181, 195, 226, 228, 230, 261, 266, 269, 271, 276, 286, 299, 301, 306, 308, 319, 320, 325, 327, 333, 335, 336, 337, 339, 345, 350, 353, 388, 391, 399, 403, 409, 410, 418, 424, 425, 434, 435, 436, 437], "haven": 416, "hay": 44, "he": 28, "head": [17, 408], "health": 5, "heavi": 72, "heavisid": [20, 137, 409], "heisenberg": 3, "hello": 0, "help": [1, 8, 16, 31, 47, 50, 51, 181, 182, 279, 331, 409, 410, 420, 433, 434, 436], "helper": [161, 181, 201, 202, 204, 418, 435], "henc": [1, 18, 25, 203, 271, 417], "here": [3, 4, 10, 12, 14, 15, 16, 17, 19, 25, 29, 30, 46, 51, 52, 79, 89, 90, 181, 193, 201, 241, 242, 264, 268, 272, 327, 341, 351, 358, 409, 417, 418, 426, 427, 428, 429, 430, 431, 432, 435, 436], "herebi": 5, "herein": 5, "hereinaft": 5, "hermitian": [18, 153, 158], "hess_inv": 3, "heurist": [34, 46, 51, 281, 283, 286, 299, 301, 321, 333, 336, 339, 350, 399, 401, 403, 424], "hf": 184, "hf_init": 436, "hidden": 128, "high": [1, 8, 9, 11, 16, 18, 34, 49, 109, 113, 188, 190, 201, 205, 237, 243, 300, 321, 336, 351, 404, 422, 428, 429, 430, 431, 432], "higher": [8, 41, 107, 108, 109, 112, 156, 157, 161, 200, 202, 230, 261, 325, 336, 338, 350, 403, 409, 426], "highest": [72, 418], "highlight": 409, "hilbert": [103, 153], "hilebrt": 363, "hinder": 47, "hint": [417, 418], "hirata": 48, "hiratanakanishiyamashitanakashima09": [48, 336], "histogram": 156, "histor": 34, "hold": [5, 12, 16, 250, 252, 254, 255, 256, 257], "home": 409, "homebrew": 6, "hood": 338, "hop": [193, 195], "hopefulli": 34, "host_ip": [116, 216, 322, 351, 356], "hostnam": 216, "hous": 46, "household": [230, 232, 239], "how": [1, 3, 5, 7, 16, 17, 18, 20, 22, 31, 33, 34, 39, 41, 42, 48, 50, 51, 52, 54, 109, 193, 241, 272, 339, 397, 399, 401, 424, 434, 435, 436, 437], "howev": [5, 6, 10, 17, 18, 25, 29, 45, 103, 154, 203, 261, 280, 284, 285, 287, 288, 300, 304, 345, 350, 417, 418, 436], "hpq": [186, 435], "hpqr": [186, 435], "hpso_tvac": 340, "html": 409, "http": [5, 23, 48, 243, 249, 253, 346, 363, 408, 413], "htype": 434, "hubbard": [181, 195, 408, 434, 435], "huge": [377, 378], "human": [5, 12], "hundr": 19, "hurrican": 5, "hw": 112, "hybrid": [9, 193, 321, 344, 409, 433, 436], "hypercub": 340, "hz": 50, "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 62, 64, 67, 68, 71, 72, 73, 75, 76, 77, 79, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 103, 104, 105, 106, 109, 110, 113, 116, 118, 122, 124, 128, 129, 130, 131, 137, 140, 144, 145, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 353, 355, 356, 357, 358, 363, 365, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 382, 383, 384, 386, 387, 389, 390, 391, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439], "iT": 184, "i_": [183, 185, 190, 193, 201, 202, 207, 241, 351, 434], "i_0i_1i_2i_3": 350, "i_1": [241, 376, 384], "i_2": 376, "i_3i_2i_1i_0": 350, "i_k": 241, "i_l": 241, "i_m": 384, "i_n": 376, "ibm": [45, 48, 52, 71, 72, 75, 165, 169, 170, 171, 172, 173, 174, 175, 315, 335, 409, 412], "ibm_backend": [71, 72, 412], "ibm_brisban": [71, 72, 412], "ibm_burlington": 165, "ibm_johannesburg": 165, "ibm_melbourn": 165, "ibm_quantum": 412, "ibm_rueschlikon": 165, "ibm_singapor": 165, "ibm_tokyo": 165, "ibm_yorktown": 165, "ibmq_qasm_simul": [75, 412], "ic": 436, "icreas": 113, "id": [74, 88, 96], "idea": [203, 426, 436], "ideal": [29, 30, 36], "ident": [17, 49, 54, 261, 348, 363, 365, 366, 374, 376, 436], "identif": 5, "identifi": [5, 62, 97, 190, 303, 347, 358], "identify": 89, "idl": [226, 228, 229, 276], "idle_nois": [226, 228], "idx": [10, 31, 43, 325], "idx_var": 144, "ieee": 48, "ieeexplor": 48, "iff": [156, 161, 322], "ignor": [163, 261, 264, 271, 279, 327, 335, 337, 347, 391, 401, 409], "ignore_large_g": [276, 336], "ii": [5, 183, 201], "iii": 5, "iint": [185, 201], "ij": [23, 24, 34, 183, 188, 190, 193, 195, 201, 207, 329, 352, 386, 389, 426], "ijij": [183, 201], "ijji": [183, 201], "ijkl": [193, 201, 207], "illeg": 124, "illegal_g": 91, "illustr": [3, 29, 43, 47, 202, 325, 399, 435], "im": 88, "imag": [137, 143], "imagemagick": 4, "imagin": [14, 17, 154], "imaginari": [137, 146], "imbric": 351, "immedi": 5, "imp": 193, "impact": 5, "imperfect": 224, "implement": [1, 9, 10, 13, 14, 15, 16, 17, 18, 34, 35, 41, 46, 49, 77, 87, 88, 89, 103, 109, 110, 130, 151, 153, 181, 184, 187, 200, 201, 205, 206, 230, 232, 234, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 261, 273, 279, 289, 291, 292, 302, 309, 323, 324, 325, 331, 333, 336, 337, 338, 339, 345, 356, 380, 381, 383, 385, 388, 390, 392, 396, 399, 401, 402, 403, 409, 424, 434, 436], "impli": [5, 36, 37, 401, 403], "implicitli": [266, 380], "import": [0, 1, 2, 3, 5, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 62, 88, 89, 90, 91, 97, 98, 109, 110, 112, 113, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 186, 187, 201, 202, 206, 208, 209, 210, 231, 232, 233, 241, 242, 246, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 299, 300, 301, 304, 308, 309, 314, 315, 316, 317, 318, 319, 325, 327, 333, 335, 339, 341, 344, 350, 353, 358, 373, 374, 380, 382, 388, 395, 399, 401, 402, 404, 405, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439], "importerror": 48, "impos": [51, 308, 419, 420, 423, 439], "improperli": 47, "improv": [5, 35, 39, 47, 182, 190, 327, 333, 339, 342, 409, 436, 437], "impur": [181, 191, 193, 434, 437], "in_memori": 40, "inabl": 5, "inaccuraci": 5, "inact": [201, 205], "inactive_occupied_so": 205, "inadequ": 5, "inbound": 272, "incident": 5, "includ": [1, 4, 5, 9, 23, 25, 28, 34, 44, 48, 59, 62, 64, 67, 73, 82, 103, 109, 154, 192, 194, 196, 200, 203, 230, 231, 242, 245, 246, 261, 294, 295, 296, 297, 298, 327, 331, 332, 334, 336, 350, 376, 409, 433, 434, 437, 438], "include_default_gate_set": 109, "include_lock": [242, 261], "include_matric": [62, 90, 242, 261], "include_matrix": 332, "inclus": [5, 112], "incom": [39, 41, 109, 327, 330, 333], "incompat": 90, "incorpor": 5, "increas": [16, 34, 53, 109, 110, 203, 211, 212, 242, 308, 319, 348, 424, 425, 436], "increment": 16, "incur": [5, 34], "inde": [16, 24, 41, 46, 203], "indemn": 5, "indemnifi": 5, "indentif": 261, "indep": 230, "independ": [5, 224, 227, 272, 278, 289, 291, 299, 338, 409, 425], "independantli": 45, "independentaqo": [289, 290], "indepent": 230, "index": [10, 17, 31, 40, 41, 85, 89, 92, 93, 94, 109, 140, 144, 156, 161, 162, 181, 189, 192, 195, 196, 226, 228, 235, 263, 264, 265, 269, 276, 277, 279, 282, 303, 308, 329, 351, 388, 399, 402], "indic": [5, 17, 50, 74, 88, 89, 181, 183, 193, 201, 207, 225, 226, 227, 228, 230, 261, 271, 272, 351, 384, 435], "indices_spin_1": [419, 420, 421, 422, 423], "indices_spin_minus_1": [419, 421, 422], "indirect": 5, "individu": [4, 5, 32, 250, 337, 419, 429], "induc": 113, "induct": 282, "inertia": 340, "inertia_funct": 340, "inertia_kwarg": 340, "inertia_weight": 340, "inexact": 289, "infer": [261, 348, 409, 436], "infil": 17, "infinit": [4, 28, 29, 30, 157, 158, 182], "infix": [137, 151], "influenc": [279, 350, 403, 436], "info": [82, 204, 334, 435], "inform": [0, 2, 3, 5, 10, 28, 29, 32, 33, 35, 36, 37, 39, 40, 48, 71, 89, 90, 109, 156, 157, 158, 159, 202, 217, 218, 219, 220, 221, 223, 224, 229, 237, 241, 253, 259, 264, 265, 332, 335, 338, 339, 357, 373, 397, 401, 408, 409, 412, 426, 434, 435, 436], "informatik": 241, "infrastructur": 5, "infring": 5, "infti": 382, "inherit": [33, 35, 40, 41, 132, 230, 278, 283, 286, 299, 301, 331, 333, 338, 351, 390, 409, 424, 434], "init": [50, 162, 276, 277, 308, 320], "init_non": 161, "init_st": 399, "init_vec": 203, "initi": [5, 10, 13, 21, 28, 33, 35, 36, 38, 39, 40, 47, 50, 51, 52, 85, 109, 113, 158, 181, 190, 201, 202, 203, 225, 227, 241, 242, 259, 261, 283, 286, 289, 290, 291, 292, 293, 299, 301, 302, 327, 329, 331, 333, 334, 336, 340, 342, 344, 345, 346, 353, 391, 399, 409, 424, 425, 426, 435, 436, 437], "initial_job": [41, 45], "initial_map": [47, 390], "initial_object": 331, "initialmap": [45, 321], "initialstatebuild": [289, 290, 291], "initil": 344, "inject": 292, "inject_initial_st": [291, 292, 293], "injunct": 5, "inlin": [17, 48, 109, 110, 155, 230, 242, 261, 321, 324, 408, 409], "innov": 241, "inoccupi": 188, "inplac": [324, 397, 400], "input": [10, 16, 23, 45, 54, 60, 62, 76, 79, 85, 110, 113, 158, 188, 215, 241, 242, 258, 266, 271, 272, 279, 283, 286, 299, 301, 305, 313, 326, 327, 333, 335, 341, 351, 393, 394, 396, 397, 399, 400, 401, 403, 409, 426, 428, 429, 430, 431, 432, 434, 435], "ins": 348, "insert": [31, 43, 45, 46, 47, 51, 109, 321, 336, 339, 342, 348, 403], "insert_g": 109, "insert_in": 279, "insid": [4, 9, 10, 13, 14, 15, 16, 19, 41, 46, 47, 90, 103, 109, 110, 111, 116, 140, 155, 156, 203, 216, 219, 220, 223, 236, 244, 245, 246, 247, 248, 261, 270, 271, 272, 280, 281, 283, 285, 286, 287, 299, 301, 304, 321, 322, 323, 329, 331, 335, 337, 338, 340, 344, 345, 346, 351, 356, 357, 403, 408], "inspir": [197, 243, 253, 424], "instal": [0, 3, 5, 9, 57, 203, 268, 408, 409, 411], "instanc": [2, 9, 10, 12, 14, 16, 17, 23, 24, 25, 28, 31, 33, 35, 36, 39, 40, 42, 45, 47, 48, 49, 50, 51, 53, 68, 80, 88, 89, 107, 108, 109, 112, 113, 137, 151, 153, 156, 157, 158, 161, 165, 230, 231, 242, 250, 261, 264, 265, 269, 279, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 306, 307, 308, 319, 320, 325, 333, 335, 339, 350, 358, 380, 382, 399, 401, 409, 412, 416, 418, 424, 425, 427], "instantan": 226, "instanti": [0, 3, 11, 35, 71, 72, 88, 116, 140, 182, 233, 234, 237, 242, 259, 262, 264, 265, 266, 267, 271, 281, 283, 286, 299, 301, 319, 327, 332, 334, 335, 352], "instantli": 418, "instead": [4, 10, 19, 28, 109, 164, 230, 232, 243, 276, 319, 333, 338, 382, 409, 427, 434, 437], "institut": 5, "instruct": [8, 9, 12, 63, 90, 109, 233, 292], "int": [1, 10, 14, 17, 72, 76, 81, 84, 88, 92, 93, 94, 96, 97, 99, 101, 109, 110, 112, 113, 114, 116, 117, 130, 135, 136, 140, 151, 153, 156, 158, 159, 160, 161, 166, 168, 176, 179, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 216, 218, 220, 222, 225, 226, 227, 228, 231, 234, 235, 239, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 269, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 297, 298, 299, 300, 301, 303, 304, 308, 322, 323, 327, 329, 333, 334, 336, 339, 340, 343, 345, 346, 348, 350, 351, 352, 356, 357, 363, 373, 374, 376, 377, 378, 381, 386, 387, 388, 389, 391, 392, 398, 399, 401, 402, 404, 405, 406, 419, 420, 421, 422, 423], "int_": 382, "int_kernel": 193, "int_msb_valu": 159, "integ": [35, 53, 81, 82, 84, 88, 89, 109, 135, 136, 144, 159, 184, 262, 264, 265, 267, 269, 271, 272, 278, 280, 340, 342, 399, 418], "integer_to_spin": [134, 419, 420, 421, 422, 423], "integr": [35, 181, 183, 185, 190, 201, 202, 204, 207, 308, 382, 435], "intellectu": 5, "intend": [5, 271, 327, 409], "intens": [191, 382, 436], "intention": 5, "intep": 45, "interact": [4, 23, 35, 47, 124, 187, 204, 278, 350, 390, 397, 400, 434, 435], "interest": [11, 16, 18, 182, 203, 348, 434, 436], "interfac": [0, 4, 5, 8, 9, 11, 26, 34, 36, 37, 41, 45, 49, 71, 132, 133, 216, 261, 278, 281, 289, 290, 292, 302, 305, 322, 331, 333, 338, 349, 352, 356, 390, 409, 424, 435, 438], "intermedi": [3, 9, 16, 31, 32, 85, 90, 100, 101, 104, 156, 157, 203, 230, 327, 409], "intermediari": [82, 345], "intermediate_measur": [32, 156, 157], "intermediatemeasur": [85, 100, 156, 157], "intern": [5, 15, 48, 80, 117, 204, 222, 242, 282, 283, 286, 295, 299, 301, 308, 323, 324, 339, 343, 357, 402, 409], "interop": [4, 55, 56, 408, 409, 412, 413, 414, 415, 416], "interoper": [7, 409], "interoperability_ann": 7, "interpol": [283, 286, 299, 301, 302], "interpret": [5, 217, 218, 219, 220, 221, 223, 397, 399, 400], "interrupt": [5, 12], "interv": 203, "intim": 22, "intprob": 82, "intprob_list": 81, "introduc": [11, 27, 31, 43, 390, 399, 401, 403, 435], "introduct": [402, 407], "intuit": 350, "inv": 401, "invalid": [31, 35, 91, 409], "invalid_arg": 91, "invers": [140, 284, 285, 287, 288, 295, 304, 382, 401, 402, 436], "invert": [109, 246], "investig": [5, 154, 334], "involut": 319, "involv": [17, 34, 294, 296, 425], "ion": [45, 52, 312, 314, 335], "ions_decomposit": 312, "iordani": 241, "ip": [31, 33, 39, 117, 222, 343, 357, 413], "ipynb": [4, 408], "ipython": [110, 155, 409], "ipython_dir": 409, "iqm": [45, 335], "irrepar": 5, "irrevoc": 5, "is_completely_posit": 358, "is_conj": 88, "is_ctrl": 88, "is_dag": 88, "is_direct": 161, "is_equal_sign": 434, "is_palindrom": 1, "is_result_argu": 325, "is_trace_preserv": 358, "is_trace_reduc": 358, "is_tran": 88, "is_unit": 358, "isclos": 31, "ising": [23, 24, 25, 26, 153, 283, 286, 299, 301], "issu": [5, 409, 436], "iswap": [10, 17, 45, 54, 350], "it_": 188, "itc": 241, "item": [0, 31, 91, 114, 137, 309, 319, 405], "iter": [0, 1, 3, 29, 31, 41, 46, 216, 217, 238, 261, 272, 319, 321, 323, 324, 329, 331, 333, 336, 339, 340, 346, 409, 436], "iterate_simpl": [11, 16, 35, 40, 46, 47, 52, 62, 109, 241, 242, 279, 333, 399, 415, 416], "iterativeexplor": 41, "its": [1, 5, 7, 10, 11, 15, 16, 18, 23, 29, 31, 34, 35, 39, 41, 43, 50, 51, 103, 104, 109, 113, 135, 137, 144, 154, 157, 158, 182, 200, 203, 224, 227, 237, 238, 261, 266, 278, 283, 289, 290, 327, 371, 386, 387, 389, 392, 406, 409, 418, 434, 435, 436], "itself": [9, 11, 46, 283, 338, 435], "iv": 5, "ix": 402, "ixx": 399, "izi": 407, "izz": 399, "j": [16, 23, 24, 34, 40, 44, 182, 187, 188, 190, 193, 195, 201, 206, 207, 271, 285, 286, 288, 289, 299, 300, 352, 373, 374, 380, 382, 386, 389, 409, 426, 434, 436, 439], "j_": [23, 24, 34, 352, 384, 426], "j_1": 384, "j_coupling_matrix": [23, 286, 299], "j_mat": [23, 439], "jac": 3, "jamiolkowski": [358, 366, 387], "januari": [5, 409], "jax": [3, 4, 9, 268, 409], "jaxlib": [3, 9, 268, 409], "jeffrei": [289, 424], "jenkin": 48, "job": [0, 1, 2, 3, 9, 16, 23, 24, 26, 27, 31, 32, 33, 34, 35, 39, 40, 41, 44, 46, 47, 48, 52, 54, 68, 70, 71, 72, 74, 75, 90, 91, 96, 99, 107, 109, 158, 182, 215, 217, 218, 219, 220, 221, 223, 232, 242, 268, 281, 283, 286, 291, 292, 293, 299, 301, 302, 321, 323, 325, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 391, 399, 408, 411, 412, 413, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438], "job_2": 11, "job_3": 11, "job_count": 99, "job_fixed_angl": 325, "job_id": 74, "job_to_run": 113, "job_typ": [23, 109, 158, 217, 218, 219, 220, 221, 223, 283, 286, 299, 301, 409, 427, 428, 429, 430, 431, 432, 436], "jobv1": 71, "johannesburg": [165, 170], "join": [409, 410], "jordan": [181, 186, 187, 200, 203, 209, 347, 409, 433, 434], "journal": 23, "jq": [201, 207], "json": [35, 43, 339], "json_dump": 339, "juan": 253, "judici": 5, "jul": [243, 249], "juli": 409, "jump": [34, 226, 228], "jump_oper": [226, 228], "jun": 48, "junction": [39, 321, 338, 408, 409], "june": 409, "jupyt": [4, 48, 103, 155, 156, 408, 409, 433, 434, 435, 436], "jurisdict": 5, "just": [16, 18, 23, 51, 333, 425], "jw": 209, "k": [1, 4, 44, 84, 104, 113, 157, 193, 195, 200, 220, 241, 258, 260, 271, 273, 278, 287, 289, 294, 329, 350, 388, 399, 408, 418, 420, 427, 434], "k_0": 374, "k_1": [241, 374], "k_2": 374, "k_3": 374, "k_cliqu": 287, "k_clique_problem": 287, "k_i": [241, 374], "k_j": 374, "k_n": 241, "kak": [44, 49, 52, 305], "kakcompress": [45, 49, 52, 305, 309, 312, 314, 315, 316, 317, 318, 321, 328], "kcliqu": [215, 220, 278, 297, 430], "kclique_ann_prob": 418, "kclique_appl": 430, "kclique_gener": 430, "kclique_problem": 420, "kcliquegener": [215, 297, 420, 430], "kcliqueresult": [220, 294], "kdg19": [44, 401], "keen": [181, 199], "keep": [1, 4, 16, 31, 43, 47, 242, 261, 321, 334, 342, 408, 409, 426], "keep_intermea": 104, "keep_topologi": 342, "kei": [7, 35, 62, 89, 116, 117, 161, 216, 222, 225, 226, 227, 228, 259, 261, 276, 280, 284, 285, 287, 288, 300, 304, 311, 322, 332, 335, 338, 343, 351, 356, 357, 382, 405], "kept": 336, "kerenidi": [241, 409], "kerinidi": [230, 241], "ket_hf": 184, "keyword": [14, 17, 50, 71, 72, 108, 109, 216, 222, 261, 271, 283, 286, 299, 301, 308, 336, 339, 401, 403, 409], "kickstart": 204, "kin": 201, "kind": [5, 51, 331, 340, 435], "kissing": [44, 401], "kitaev": [181, 186, 187, 200, 203, 208, 347, 409, 433, 434], "know": [5, 51, 52, 82, 203, 259, 271, 423, 431, 435], "known": [5, 12, 31, 34, 50, 52, 85, 130, 137, 276, 335, 336, 345, 432], "kp": 241, "kp17": 241, "kptree": [230, 409], "kr": [201, 207], "krau": [225, 226, 358, 360, 363, 364, 365, 366, 369, 371, 374, 375, 380, 382, 386, 387, 388, 389], "kraus_oper": 388, "kraus_rank": [385, 388], "kron_circuit": 109, "kroneck": [358, 379, 388], "kunihiro": 249, "kutin": 249, "kwarg": [59, 62, 64, 65, 67, 73, 77, 108, 109, 112, 113, 116, 156, 157, 158, 161, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 231, 259, 261, 264, 268, 271, 272, 280, 281, 283, 284, 285, 286, 287, 288, 296, 297, 298, 299, 300, 301, 302, 304, 308, 322, 326, 327, 333, 336, 337, 339, 340, 344, 346, 353, 355, 399, 401, 403], "l": [17, 44, 193, 201, 207, 241, 434, 436], "l_k": [226, 228], "label": [137, 140, 151, 195, 282], "lamb": 375, "lambda": [10, 14, 16, 17, 109, 151, 193, 225, 226, 227, 228, 231, 313, 315, 329, 375, 382], "lambda_c": 193, "lambda_i": [18, 158], "lambda_step": 329, "landscap": 23, "lang": [0, 1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 16, 17, 29, 30, 31, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 62, 88, 90, 103, 109, 110, 182, 194, 325, 327, 339, 341, 353, 395, 409, 435, 436], "langl": [1, 11, 28, 30, 43, 104, 113, 154, 157, 182, 227, 232, 239, 240, 329, 348, 367, 424, 436], "langle0": 380, "langle1": 380, "languag": [0, 5, 17, 48, 408], "larg": [16, 18, 34, 45, 46, 113, 186, 187, 203, 206, 276, 279, 289, 333, 399, 401, 425], "larger": [203, 272, 327, 401, 409, 418, 424], "largest": [109, 158], "last": [15, 16, 23, 31, 42, 45, 47, 48, 62, 112, 193, 226, 228, 260, 273, 353, 354, 407, 434], "later": [13, 16, 28, 32, 74, 230, 261], "latest": 409, "latter": [201, 205, 348, 426, 436], "lattic": [283, 286, 299, 301, 417], "law": [5, 16], "lawsuit": 5, "layer": [11, 194, 196, 279, 336, 399, 424, 435], "layout": 409, "layout_bas": 409, "lazi": [44, 321, 333, 403, 408], "lazili": [46, 333], "lazy_synth": 403, "lazysynthesi": [45, 321, 335, 403], "lbrace": [225, 227, 374, 388], "ldca": [181, 192, 196, 435], "ldot": [376, 384], "ldx19": [48, 336], "lead": [19, 46, 47, 322, 409, 417, 425, 436], "learn": [5, 50, 51, 409, 436], "learning_paramet": 436, "leas": 5, "least": [5, 16, 41, 46, 156, 327, 350, 399, 409, 418, 424], "leav": [15, 19, 46, 77, 89, 203, 282], "led": [46, 399], "left": [12, 23, 24, 49, 50, 53, 54, 104, 154, 157, 181, 185, 189, 200, 201, 225, 227, 232, 233, 240, 258, 261, 267, 269, 289, 313, 327, 329, 348, 351, 363, 367, 375, 380, 382, 389, 399, 402], "left_pattern": [50, 53], "legal": [4, 5], "leibniz": 241, "leighton": 418, "len": [16, 31, 40, 81, 84, 88, 272, 279, 280, 284, 285, 287, 288, 304, 306, 353, 409, 419, 420, 421, 422, 423, 431], "lend": 5, "length": [3, 14, 31, 40, 81, 109, 113, 158, 176, 236, 261, 265, 269, 270, 272, 283, 289, 306, 403, 407], "length1": 14, "length2": 14, "less": [5, 21, 213, 242, 327, 333, 335, 336, 339, 391, 401, 409], "let": [1, 14, 17, 30, 45, 47, 52, 54, 258, 268, 327, 348, 409, 434, 435, 436], "level": [1, 8, 9, 11, 16, 18, 49, 86, 107, 108, 109, 112, 113, 156, 157, 161, 202, 237, 243, 261, 264, 305, 321, 338, 351, 390, 403, 409, 424, 426, 434, 435, 436, 437], "leverag": [345, 436], "li": [18, 48, 435], "liabil": 5, "liabl": 5, "lib": 48, "lib64": 48, "libcpp_nniz": 336, "libcpp_pbo": 319, "librari": [0, 1, 4, 9, 10, 12, 14, 36, 38, 39, 57, 137, 141, 230, 283, 286, 299, 301, 328, 408, 433, 435, 439], "licenc": 4, "licens": 4, "licensor": 5, "lidar": 23, "lidia": 253, "lie": 203, "life": 22, "lift": [2, 234], "light": 72, "light_circuit": 350, "lightweight": 350, "lih": [408, 435], "like": [4, 5, 6, 14, 16, 18, 23, 35, 40, 41, 45, 52, 53, 89, 109, 157, 158, 203, 278, 319, 327, 332, 409, 418], "limit": [2, 5, 18, 28, 36, 37, 39, 48, 53, 212, 213, 214, 403, 409], "limits_": 193, "linalg": [21, 48, 186, 344, 351, 409, 435, 436], "lindblad": [226, 228, 380], "line": [0, 1, 3, 5, 12, 16, 17, 23, 48, 49, 50, 51, 62, 90, 92, 93, 94, 109, 112, 113, 271, 353, 404, 414, 426, 434], "line_ob": 279, "linear": [24, 44, 46, 48, 162, 165, 176, 278, 280, 283, 286, 299, 301, 302, 327, 348, 349, 350, 351, 390, 394, 396, 401, 403, 404, 408, 409, 424, 436], "linear_method": 403, "linear_oper": 403, "linear_operator_synthesi": [390, 403], "linear_synthesi": [390, 401], "linearli": [203, 286, 299, 301], "linearly_decreas": 340, "linedevic": [46, 165], "linequbit": 414, "link": [5, 10, 13, 15, 16, 31, 57, 72, 161, 230, 243, 246, 249, 250, 261, 276, 277, 281, 283, 286, 299, 301, 319, 320, 339, 408, 409], "link_gat": 242, "link_matric": 242, "linker": [109, 261], "linspac": 41, "linux": [4, 409], "lip": 340, "list": [1, 2, 5, 7, 9, 18, 26, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 45, 46, 50, 52, 53, 54, 59, 62, 64, 67, 68, 72, 73, 75, 76, 79, 81, 82, 84, 85, 88, 89, 92, 93, 94, 96, 99, 101, 103, 107, 108, 109, 111, 112, 113, 130, 133, 137, 140, 144, 153, 156, 157, 158, 159, 160, 161, 163, 181, 182, 183, 184, 187, 188, 190, 194, 201, 202, 204, 205, 206, 224, 226, 228, 231, 238, 242, 259, 261, 264, 265, 266, 267, 269, 272, 276, 277, 282, 283, 284, 285, 287, 288, 289, 295, 303, 304, 305, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 327, 329, 332, 335, 336, 338, 339, 348, 350, 351, 356, 357, 358, 367, 376, 377, 378, 379, 381, 383, 384, 386, 388, 389, 395, 399, 401, 409, 412, 415, 416, 419, 420, 421, 422, 423, 435, 436, 437], "list_decomposit": [52, 305, 312], "list_qubit": [59, 64, 67, 73], "listen": [31, 33, 39, 116, 216, 322, 351, 356, 413], "litig": 5, "littl": 237, "ll": [54, 391], "ln": 137, "lnn": [48, 161, 162, 165, 176, 341], "lnn_topologi": 341, "load": [28, 32, 35, 50, 71, 72, 103, 107, 108, 109, 112, 113, 114, 153, 156, 158, 161, 241, 286, 299, 308, 409], "load_circuit": [50, 308], "load_state_vector_from_bin": 103, "loan": 5, "loc": 193, "local": [23, 34, 45, 48, 51, 54, 90, 133, 339, 345, 356, 357, 399, 401, 403, 413, 436], "local_metr": [51, 339], "localhost": [116, 216, 322, 351, 356], "localis": 212, "locat": [5, 241, 289, 434, 435, 437], "lock": [109, 242, 261, 320], "lockout": 5, "log": [16, 53, 156, 241, 401, 432], "log_2": 241, "log_var": 53, "logarithm": [137, 147], "logic": [17, 79, 103, 110, 111, 233, 235, 246, 261, 266, 278, 282, 283, 397, 400, 436], "login": [71, 72], "long": [3, 23, 34, 109, 214, 261, 344, 409], "longer": [401, 403, 409], "look": [0, 1, 4, 14, 16, 23, 30, 34, 35, 40, 50, 53, 54, 158, 286, 301, 348, 351, 397, 400, 409, 425], "loop": [16, 40, 79, 85, 323, 329, 340, 344, 345, 346, 351], "loss": [5, 436], "lost": [31, 33, 39, 272], "lot": [1, 16, 40, 45, 48, 54, 261, 279, 403], "love": 268, "low": [23, 34, 41, 49, 86, 156, 188, 190, 201, 205, 261, 300, 305, 390, 409, 422, 428, 429, 430, 431, 432, 435, 436], "lower": [23, 28, 34, 35, 45, 113, 145, 201, 202, 205, 213, 230, 243, 281, 283, 286, 299, 301, 331, 346, 350, 403, 424, 435, 437], "lower_bound": 145, "lowest": [22, 43, 203, 334, 417, 424], "lsb": [159, 350], "lsb_first": [40, 156], "lsb_int": 159, "luca": [280, 284, 285, 287, 300, 304], "luckili": 52, "ly": 14, "m": [4, 48, 76, 193, 271, 280, 289, 333, 384, 401], "machin": [3, 5, 9, 23, 96, 268, 409, 434], "maco": [4, 409], "made": [5, 15, 33, 34, 194, 237], "magic": 4, "magnet": [18, 23, 24, 280, 284, 285, 286, 287, 288, 299, 300, 304, 352, 409, 439], "magnetic_field_h": [23, 286, 299], "mai": [3, 4, 5, 6, 9, 18, 28, 31, 39, 48, 50, 51, 53, 88, 144, 157, 158, 181, 195, 198, 203, 268, 276, 279, 281, 283, 286, 299, 301, 308, 328, 334, 340, 409, 411, 418, 425, 434], "mail": 5, "main": [7, 8, 35, 46, 49, 89, 124, 203, 242, 261, 289, 308, 324, 335, 341, 351, 353, 412, 413], "main_onli": 308, "mainengin": 415, "mainli": [8, 32, 78, 79, 153], "maintain": [213, 226, 228, 327, 333], "mainten": [409, 437], "majeur": 5, "major": [409, 438], "make": [4, 5, 23, 24, 33, 39, 44, 48, 154, 203, 231, 246, 281, 283, 286, 299, 301, 324, 336, 350, 410, 439], "make_anderson_model": [181, 434], "make_avg_fid_equiv_depol_channel": 358, "make_compressed_ldca_circ": [181, 435], "make_depolarizing_channel": [229, 358, 373], "make_depolarizing_hardware_model": 224, "make_embedded_model": [181, 434], "make_general_hwe_circ": [181, 435], "make_generalized_amplitude_damp": 358, "make_hubbard_model": [181, 434, 435], "make_ldca_circ": [181, 435], "make_mr_circ": [181, 435], "make_mrep_circ": [181, 435], "make_pauli_matrix_basi": 358, "make_shallow_circ": [181, 435], "make_standard_matrix_basi": 358, "make_standard_vector_basi": 358, "make_trotterisation_routin": [181, 435], "malfunct": 5, "manag": [5, 13, 16, 51, 54, 96, 123, 324, 336, 339, 408], "manager_from_target": 54, "mandatori": [12, 31, 116, 216, 322, 351, 356], "mani": [14, 18, 19, 22, 25, 28, 31, 41, 43, 154, 158, 203, 241, 278, 280, 281, 283, 284, 285, 286, 287, 299, 300, 301, 304, 391, 397, 409, 417, 418, 434, 436], "manipul": [8, 9, 17, 18, 25, 27, 39, 49, 109, 153, 233, 266, 267, 271, 321, 339, 351, 358, 408, 409, 433], "manner": [5, 18], "manual": [4, 9, 28, 68, 88, 305, 319, 435], "manufactur": 97, "many_ctrl": 307, "map": [42, 48, 54, 108, 109, 113, 118, 120, 121, 156, 161, 184, 186, 187, 200, 259, 330, 336, 338, 350, 358, 397, 400, 401, 403, 409, 426], "mapintdoubl": 350, "mapintfloat": 350, "mapintint": 350, "mapsto": [1, 244, 245, 246, 248, 250, 251, 252, 254, 255, 256, 257, 403], "marc": 44, "march": 409, "margin": 350, "mark": 5, "market": 5, "markov": [23, 34, 44], "martiel": 44, "master": 408, "mat": [10, 361], "mat2nparrai": 79, "mat_0_0": 313, "mat_0_1": 313, "mat_1_0": 313, "mat_1_1": 313, "mat_list": 379, "match": [23, 44, 46, 53, 109, 261, 271, 282, 299, 303, 306, 336, 342, 345, 388, 409], "matchgat": 196, "materi": [5, 18], "math": [53, 104, 137, 141, 142, 143, 147, 149, 320, 333], "math_util": 358, "mathbb": [186, 193, 201, 403, 407, 434], "mathcal": [1, 183, 188, 190, 201, 348, 363, 365, 366, 372, 373, 374, 386, 387, 388, 389], "mathemat": [10, 34, 320], "mathrm": [29, 184, 185, 191, 193, 194, 201, 203, 225, 227, 258, 329, 348, 363, 365, 366, 367, 368, 373, 382, 387, 389, 436], "matplotlib": [296, 297, 298], "matric": [17, 62, 80, 103, 109, 118, 121, 182, 225, 230, 242, 261, 281, 283, 286, 299, 301, 327, 332, 345, 358, 363, 365, 367, 368, 374, 376, 377, 379, 384, 436], "matrix": [17, 23, 24, 26, 49, 52, 79, 80, 88, 90, 109, 130, 153, 182, 186, 187, 191, 193, 195, 201, 204, 206, 207, 225, 226, 227, 230, 231, 237, 242, 261, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 314, 315, 316, 317, 318, 332, 338, 350, 352, 358, 359, 361, 362, 363, 365, 367, 368, 377, 384, 386, 387, 388, 389, 409, 426, 434, 435, 436, 437, 439], "matrix_": 182, "matrix_basi": [386, 388], "matrix_gen": 231, "matrix_gener": [10, 130, 231], "matrix_h": 182, "matrix_util": [118, 225], "matter": [53, 230, 306, 308], "matthew": 44, "max": [23, 137, 203, 215, 221, 278, 286, 288, 299, 301, 408, 418, 427], "max_cut": 288, "max_cut_ann_prob": 418, "max_cut_appl": [427, 428], "max_cut_gener": 428, "max_cut_problem": 421, "max_depth": [110, 308], "max_it": [46, 340, 391], "max_iter": [336, 339], "max_nb_shot": 35, "max_shot": 74, "max_wir": 272, "maxcut": [47, 54, 278, 286, 299, 333, 408, 409, 421, 425, 428], "maxcutgener": [31, 215, 421, 427, 428], "maxcv": 3, "maxim": [22, 28, 35, 51, 110, 113, 280, 283, 285, 325, 336, 339, 346, 417], "maximis": 280, "maximum": [5, 116, 137, 145, 152, 211, 216, 278, 288, 299, 308, 322, 323, 329, 339, 340, 348, 351, 356, 391, 409, 421, 428], "maxit": [3, 43, 329, 344, 346, 427, 428, 429, 430, 431, 432, 436], "mayb": [54, 409], "mb": 96, "mdb20": [44, 46], "mea": [17, 84, 225, 227], "mean": [5, 23, 24, 28, 29, 35, 46, 48, 51, 75, 90, 104, 109, 114, 157, 158, 226, 228, 230, 250, 261, 283, 353, 401, 409, 412, 434, 435, 436], "meant": [28, 107, 113, 203, 204, 282, 435], "measur": [2, 3, 5, 9, 12, 17, 18, 28, 29, 30, 32, 33, 35, 39, 42, 43, 59, 62, 64, 67, 73, 75, 76, 79, 82, 84, 85, 89, 90, 100, 101, 104, 109, 110, 113, 156, 157, 158, 182, 203, 225, 227, 230, 246, 261, 268, 327, 337, 342, 345, 348, 350, 408, 409, 412, 416, 425, 435, 436], "measured_qubit": 35, "measureless": [59, 64, 67, 73], "mechan": [5, 11, 14, 28, 43, 103, 305], "media": 5, "medium": 5, "meet": [5, 12], "mehdi": 48, "meijer": 44, "melbourn": [165, 171], "mem_necessary_biggest_job_mb": 99, "mem_ptr": 40, "member": [259, 320], "memori": [28, 36, 37, 44, 96, 99, 241, 242, 350, 377, 378, 434], "mention": [16, 26, 345], "merchant": 5, "mere": [5, 29], "merg": [5, 20, 42, 44, 49, 53, 211, 212, 213, 321, 327, 332, 333, 350, 409], "merging_pattern": 54, "messag": [3, 35, 40, 48, 90, 92, 93, 94, 105, 106, 124, 261], "met": 216, "meta": [33, 35, 41, 43, 46, 107, 108, 112, 321, 331, 339, 401, 409], "meta_data": [3, 28, 32, 35, 40, 41, 42, 43, 68, 72, 75, 104, 107, 108, 112, 113, 156, 182, 283, 286, 299, 301, 331, 338, 339, 350, 351, 356, 409, 435], "metadata": [28, 32], "method": [0, 1, 2, 3, 12, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 39, 41, 43, 44, 47, 48, 50, 51, 52, 53, 54, 103, 110, 112, 113, 116, 140, 154, 158, 159, 160, 161, 164, 182, 184, 186, 187, 200, 202, 204, 206, 216, 222, 230, 231, 232, 236, 241, 242, 243, 244, 245, 246, 250, 251, 252, 259, 261, 264, 265, 266, 269, 270, 272, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 296, 297, 298, 299, 300, 301, 302, 304, 306, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 329, 330, 331, 333, 336, 337, 338, 339, 340, 344, 345, 347, 350, 351, 356, 358, 373, 374, 383, 385, 394, 396, 399, 401, 403, 404, 405, 409, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439], "method_2q": [373, 374], "metric": [51, 275, 329, 336, 339, 401, 436], "mi": 426, "michel": 44, "micro": 48, "middl": [41, 50, 306], "might": [10, 14, 16, 23, 41, 46, 47, 109, 137, 156, 230, 242, 244, 247, 248, 271, 272, 279, 281, 283, 286, 292, 299, 301, 324, 333, 337, 393, 399, 403, 416, 425, 434, 436], "migrat": 433, "mimimum": 426, "min": [34, 41, 137, 285, 286, 289, 299, 301, 435, 436], "min_": [23, 24], "min_val": 41, "mind": [16, 47, 434], "minim": [2, 3, 11, 22, 24, 31, 41, 43, 47, 49, 51, 276, 277, 283, 299, 308, 321, 325, 340, 344, 346, 356, 401, 408, 409, 417, 419, 424, 426, 428, 429, 435, 436], "minima": 401, "minimize_idle_tim": 276, "minimize_overall_tim": [51, 276], "minimum": [3, 22, 23, 34, 285, 286, 301, 327, 345, 425], "mininm": 356, "minus_1": 143, "mirror": 1, "misc": [17, 230], "miscellan": [5, 36, 37], "mislead": 203, "mismatch": 6, "miss": [281, 283, 286, 299, 301, 327, 409], "mitig": [5, 408, 409, 433, 436], "mix": [278, 283, 286, 289, 290, 291, 299, 301, 302, 348, 399, 414, 425], "mixing_factori": [56, 278], "mixingfactori": [278, 425], "mod": [244, 245, 246, 248], "mode": [0, 1, 3, 11, 29, 30, 31, 33, 35, 39, 40, 75, 109, 117, 158, 191, 222, 325, 342, 343, 357, 409, 412], "model": [1, 18, 34, 53, 97, 155, 181, 191, 195, 225, 226, 229, 230, 283, 286, 299, 301, 434, 435, 436, 437, 439], "modern": 23, "modif": [5, 28], "modifi": [5, 32, 109, 113, 202, 242, 291, 292, 293, 397, 400, 401], "modul": [1, 2, 5, 8, 9, 12, 18, 23, 39, 47, 48, 49, 50, 51, 57, 62, 78, 79, 86, 88, 92, 93, 94, 95, 103, 112, 137, 151, 165, 181, 211, 224, 230, 238, 242, 243, 253, 261, 275, 278, 305, 310, 312, 327, 351, 353, 358, 360, 390, 409, 410, 412, 413, 433, 434, 435, 437], "modular": 243, "modular_exp": 243, "modulenam": [90, 92, 93, 94], "modulenotfounderror": 409, "modulo": [243, 245, 246, 250, 252, 254, 255, 256, 257], "modulu": [244, 245, 246, 248], "mol_h": [201, 202, 435], "mol_h_act": 435, "mol_h_new_basi": 435, "molecul": [202, 204, 408, 409, 433, 435, 436], "molecular": [185, 190, 201, 204, 435], "molecular_hamiltonian": 201, "molecularhamiltonian": [181, 202, 434], "moleculeinfo": 181, "mollet": 437, "monei": 5, "mont": [280, 284, 285, 287, 288, 300, 304], "month": 5, "more": [0, 1, 3, 5, 11, 16, 17, 21, 23, 25, 26, 27, 31, 34, 35, 39, 41, 47, 50, 51, 53, 54, 59, 64, 67, 73, 89, 103, 109, 113, 160, 202, 203, 217, 229, 241, 242, 264, 265, 268, 269, 279, 327, 332, 333, 335, 339, 340, 348, 350, 373, 391, 401, 407, 409, 412, 418, 425, 426, 434, 435, 436], "moreov": [13, 31, 39, 53, 109, 264, 269, 272, 289, 392, 409], "morgan": 16, "mosca": 44, "most": [11, 14, 17, 18, 23, 25, 28, 41, 48, 53, 62, 86, 103, 112, 113, 181, 243, 258, 269, 289, 350, 353, 390, 399, 409, 417, 418, 434, 436], "mostli": [8, 86, 140, 418], "mother": [237, 259], "moulton": 249, "move": [289, 425], "mp2": 190, "mr": [181, 197, 435], "mrep": [181, 198, 435], "msb": [40, 159], "mu": [191, 193, 195, 435], "much": [409, 434], "mul": 320, "mult": [16, 20, 253], "mult_const": [243, 253], "mult_const_mod": [243, 246], "multi": [116, 181, 197, 198, 216, 322, 351, 356, 435], "multi_qubit": 229, "multikron": 358, "multipl": [5, 16, 20, 23, 27, 35, 88, 204, 243, 247, 253, 256, 257, 262, 409, 436], "multiplelaunchesanalyz": [43, 321, 436], "multiplelaunchesplugin": 408, "multiplexor": 241, "multipli": [26, 53, 219, 220, 223, 256, 257, 280, 285, 287, 304, 308, 436], "multiply_right": 402, "multiqubit": [229, 408, 409, 433, 436], "multivari": 409, "must": [2, 5, 9, 31, 40, 41, 50, 53, 110, 113, 162, 183, 185, 186, 188, 193, 194, 226, 228, 276, 277, 308, 325, 329, 334, 337, 339, 345, 356, 383, 385, 394, 401, 409, 412, 437], "mutliplexor": 241, "mutual": [332, 401], "mwi": [278, 283, 286, 301, 409], "my": 39, "my_add": 14, "my_angl": 52, "my_aqasm": 17, "my_circuit": 109, "my_cnot_implement": 242, "my_condit": [35, 40], "my_custom_g": 62, "my_cz": 17, "my_funct": [268, 325], "my_gat": [234, 339], "my_ibm_token": 412, "my_job": [344, 409], "my_lib": 17, "my_list": 144, "my_min": 137, "my_minus_z": 10, "my_num": [146, 148], "my_observ": 26, "my_plugin": [281, 283, 286, 299, 301], "my_program": [10, 12], "my_qft": 17, "my_qpu": [39, 40], "my_routin": 10, "my_rxrz": 17, "my_rz": [231, 259], "my_spec": 42, "my_stack": [31, 39], "my_var": 53, "my_z": 17, "mybind": 408, "myplugin": 40, "myproblem": 283, "myqlm": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439], "myqpu": 35, "m\u00f6ller": 204, "m\u00f8ller": [181, 190, 435], "n": [10, 14, 17, 19, 20, 23, 24, 25, 31, 34, 36, 40, 44, 48, 50, 52, 85, 200, 201, 208, 209, 210, 250, 252, 254, 255, 256, 257, 258, 260, 271, 273, 279, 280, 285, 289, 308, 327, 333, 342, 348, 350, 351, 373, 376, 384, 399, 401, 402, 403, 404, 407, 409, 419, 420, 421, 422, 423, 425, 432, 434, 436], "n1": 14, "n2": 14, "n_": [29, 194, 195, 348, 387, 389, 436], "n_adiab_step": 203, "n_b": 191, "n_calibr": 346, "n_cycl": 194, "n_e": 201, "n_electron": [188, 189, 190, 201, 202, 205, 435], "n_fsim_cycl": 198, "n_i": [188, 190, 201], "n_in": 348, "n_iter": [323, 436], "n_monte_carlo_upd": [280, 284, 285, 287, 288, 300, 304], "n_phase_bit": 203, "n_qbit": 188, "n_run": 334, "n_shot": 203, "n_site": 195, "n_spin": 135, "n_step": [184, 352, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "n_thread": 388, "n_trotter": [280, 284, 285, 287, 288, 300, 304], "n_trotter_step": [200, 203, 435], "n_u": 299, "n_v": [299, 409], "n_w": [299, 409], "na": [24, 411], "nabla": [329, 436], "naiv": [41, 211, 214, 327, 337, 392, 399, 401, 406], "naivestrategi": [211, 327], "nakanishi": [48, 345, 436], "nakashima": 48, "name": [0, 5, 8, 10, 13, 17, 21, 23, 35, 39, 48, 49, 50, 51, 62, 71, 72, 74, 75, 88, 89, 90, 99, 107, 108, 109, 110, 112, 113, 118, 122, 130, 131, 140, 153, 155, 156, 158, 161, 163, 226, 228, 230, 234, 237, 242, 259, 261, 271, 276, 279, 283, 286, 299, 305, 306, 307, 308, 311, 333, 335, 336, 347, 353, 358, 360, 380, 382, 386, 387, 388, 389, 399, 409, 434, 439], "name_method_us": 340, "nameerror": [23, 62, 353], "namespac": [14, 17, 230, 250], "nan": 23, "nano": 48, "narrow": 203, "natgrad_opt": 436, "nativ": [1, 15, 28, 45, 109, 335], "natur": [5, 28, 72, 137, 143, 147, 181, 188, 190, 197, 201, 202, 205, 321, 329, 408, 409, 433, 435, 436], "natural_gradi": [329, 436], "nb_adiab_step": 203, "nb_fermionic_mod": [192, 196], "nb_node": 99, "nb_sampl": 81, "nb_shot": 35, "nbcbit": [91, 109], "nbctrl": 88, "nbit": [232, 239, 260, 273, 274, 289], "nbqbit": [0, 14, 26, 31, 35, 40, 42, 45, 88, 91, 99, 109, 112, 153, 156, 161, 166, 187, 206, 246, 262, 269, 327, 337, 398, 404, 405, 435, 436], "nbqbits_target": 212, "nbshot": [26, 28, 29, 30, 35, 90, 104, 109, 113, 158, 182, 203, 281, 283, 286, 299, 301, 350, 351, 409], "nbterm": [398, 405], "nbthread": 350, "nbvar": 283, "ncol": 88, "ncycl": [182, 192, 196, 345], "nd": 84, "ndarrai": [80, 81, 82, 84, 85, 113, 130, 153, 158, 182, 183, 185, 186, 187, 190, 191, 193, 195, 201, 202, 204, 205, 206, 207, 241, 291, 293, 338, 340, 345, 350, 351, 361, 362, 376, 377, 378, 379, 384, 388, 392, 394, 396, 401, 403, 404], "nearest": [48, 165, 176, 194, 198], "nearshor": 5, "necessari": [5, 8, 28, 211, 224, 228, 259], "necessarili": [3, 5, 16, 308], "need": [1, 4, 5, 6, 10, 12, 18, 19, 23, 24, 28, 31, 34, 39, 40, 41, 50, 52, 54, 71, 72, 81, 84, 86, 99, 103, 109, 151, 154, 161, 188, 246, 268, 271, 272, 280, 284, 285, 287, 288, 300, 304, 308, 322, 327, 335, 339, 352, 356, 397, 409, 410, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 432, 434, 435, 436], "need_flip": 40, "neg": [233, 266, 282, 409, 428], "neg_claus": 282, "negat": 282, "neglect": 403, "neglig": [5, 34], "neighbor": [48, 165, 176], "neighbour": [194, 198], "neither": [5, 31, 35, 51], "nel": 204, "nenergi": 435, "neq": [16, 24, 425], "nest": 15, "network": [5, 243, 249], "networkx": [16, 42, 47, 54, 112, 161, 218, 219, 220, 221, 223, 284, 285, 287, 288, 296, 297, 298, 304, 333, 391, 397, 399, 400, 403, 409, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 439], "neutral": 204, "never": [46, 53, 237, 272], "nevertheless": [3, 39, 50, 51, 435, 437], "new": [10, 16, 39, 40, 41, 43, 46, 50, 89, 109, 116, 124, 129, 137, 181, 192, 201, 203, 207, 213, 215, 216, 231, 242, 249, 259, 261, 272, 283, 299, 306, 308, 322, 331, 332, 344, 351, 356, 392, 412, 435, 437], "new_circuit": [45, 47, 54, 109, 412], "new_gate_set": 129, "new_group": [51, 54, 319, 339], "new_job": 46, "new_pattern": 308, "new_tabl": 401, "new_var": [3, 11, 25, 31, 103, 109, 182, 261, 283, 325, 435, 436], "new_wir": [1, 10, 14, 15, 16, 232, 242, 262, 264, 265, 266, 267, 269, 272], "next": [51, 326, 399, 401, 407], "nfev": 3, "nice": [9, 16, 43, 82], "niel": 44, "nisq": [3, 44, 48, 321, 335, 438], "nisqcompil": [45, 54, 321, 408, 409], "nit": 3, "niter": 401, "njev": 3, "nn": 432, "nnizat": [321, 333, 336], "nnize": [51, 55, 56, 336, 409], "nnizer": [45, 46, 47, 275, 276, 277, 321, 335, 409], "no_trivi": 405, "noboru": 249, "node": [16, 50, 95, 98, 99, 140, 161, 282, 283, 284, 285, 286, 287, 288, 296, 297, 298, 299, 301, 304, 418, 419, 420, 421, 423, 426, 428, 429, 430, 431, 432], "node_s": [296, 297, 298], "node_typ": [98, 99], "nodetyp": [95, 99], "nois": [29, 30, 36, 43, 154, 224, 225, 226, 227, 228, 229, 321, 348, 358, 380, 381, 382, 408, 409, 433, 436], "noise_channel": 381, "noise_spectrum": 382, "noisi": [3, 5, 36, 182, 224, 348, 436], "non": [5, 17, 24, 34, 51, 53, 88, 90, 109, 156, 241, 272, 333, 337, 349, 399, 403, 405, 409, 418, 425], "nondisclosur": 5, "none": [17, 29, 35, 40, 45, 46, 54, 62, 68, 69, 71, 72, 75, 76, 88, 89, 90, 101, 107, 109, 110, 112, 113, 116, 117, 129, 130, 133, 140, 151, 153, 154, 155, 156, 157, 158, 159, 161, 182, 186, 187, 188, 190, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 216, 222, 225, 226, 227, 228, 232, 233, 234, 237, 242, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 279, 281, 283, 286, 289, 295, 299, 301, 302, 306, 308, 322, 323, 327, 329, 332, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 348, 350, 351, 352, 356, 357, 360, 363, 365, 366, 382, 383, 384, 388, 391, 392, 399, 401, 402, 403, 406, 407, 427, 428, 429, 430, 431, 432], "noneresult": 91, "noon": [188, 190, 201, 202, 205, 435], "nor": [31, 35], "norm": [21, 28, 82, 323, 358, 364, 369, 370, 372], "normal": [5, 59, 64, 67, 73, 187, 241, 409], "normal_ord": 187, "not_simulat": 91, "notat": [26, 230], "note": [9, 17, 20, 44, 109, 184, 195, 200, 229, 276, 299, 337, 367, 371, 373, 436, 438], "notebook": [4, 34, 43, 48, 50, 51, 103, 109, 110, 155, 156, 408, 409, 418, 419, 420, 421, 422, 423, 433, 434, 435, 436], "noth": [5, 35, 40, 46, 226, 265, 269, 325], "notic": [1, 5, 16, 17, 21, 41, 45, 46, 54, 245, 327, 356, 399, 401, 402], "notion": 272, "notwithstand": 5, "novemb": 409, "now": [1, 3, 4, 14, 15, 30, 42, 45, 50, 52, 54, 163, 182, 281, 283, 286, 299, 301, 339, 409, 434, 435, 436, 437], "nowarn": 409, "np": [1, 3, 10, 11, 21, 23, 24, 25, 31, 34, 41, 85, 113, 130, 151, 153, 158, 164, 182, 183, 185, 186, 187, 190, 191, 193, 195, 201, 202, 204, 205, 206, 207, 231, 241, 268, 271, 280, 284, 285, 286, 287, 299, 300, 301, 304, 327, 338, 344, 345, 346, 351, 361, 362, 376, 377, 378, 379, 384, 386, 387, 388, 389, 392, 394, 396, 401, 403, 404, 405, 417, 419, 420, 421, 422, 423, 425, 426, 430, 432, 434, 435, 436, 439], "nqbit": [112, 153, 158, 161, 164, 187, 188, 189, 194, 201, 202, 206, 362, 373, 374, 376, 389, 434, 435], "nqbits_phas": 435, "nrow": 88, "nstep": [1, 41, 399], "ntheta": 435, "nuclear": [204, 435], "nuclear_repuls": [204, 435], "null": [5, 28, 113], "number": [0, 1, 2, 10, 15, 16, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 45, 46, 49, 52, 53, 54, 69, 81, 88, 90, 91, 96, 99, 109, 112, 113, 114, 117, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 161, 163, 166, 176, 181, 182, 184, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 218, 222, 226, 228, 241, 245, 246, 250, 252, 254, 255, 256, 257, 258, 260, 261, 262, 271, 272, 273, 274, 277, 278, 280, 283, 284, 285, 287, 288, 289, 300, 304, 308, 319, 321, 323, 325, 327, 329, 333, 334, 335, 336, 338, 339, 340, 343, 345, 346, 348, 350, 351, 352, 357, 373, 374, 376, 388, 391, 393, 398, 399, 401, 402, 403, 404, 405, 408, 409, 418, 419, 421, 423, 424, 428, 429, 431, 432, 434, 435, 436, 439], "number_1": 152, "number_2": 152, "number_of_colour": [218, 284, 423], "number_of_edg": [16, 166], "number_partit": 300, "number_partitioning_ann_prob": 418, "number_partitioning_problem": [300, 422], "numberpartit": [278, 286, 299, 422], "numbers_arrai": 300, "numbers_set": 422, "numer": [137, 140, 151, 163, 182, 403], "numpi": [1, 3, 10, 11, 21, 23, 24, 31, 36, 38, 41, 53, 79, 80, 81, 82, 84, 85, 103, 114, 130, 135, 136, 151, 153, 154, 156, 182, 186, 187, 201, 202, 241, 268, 271, 280, 284, 285, 286, 287, 289, 291, 293, 299, 300, 301, 304, 327, 340, 344, 350, 352, 388, 401, 404, 405, 409, 419, 420, 421, 422, 423, 426, 430, 432, 434, 435, 436, 439], "numpy_arrai": 350, "nvidia": [3, 9, 268], "nx": [16, 42, 47, 54, 161, 284, 285, 287, 288, 299, 304, 333, 397, 400, 401, 403, 409, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 439], "nx_graph": [112, 161], "o": [4, 23, 24, 28, 30, 103, 182, 183, 188, 190, 201, 289, 333, 348, 404, 413, 432, 436], "o_i": 182, "ob": [3, 11, 26, 28, 30, 31, 43, 109, 153, 158, 268, 283, 352, 436], "obei": [280, 418], "object": [0, 1, 2, 5, 8, 9, 12, 14, 15, 16, 17, 18, 19, 28, 29, 31, 32, 33, 35, 39, 40, 41, 42, 48, 50, 53, 60, 62, 71, 72, 74, 76, 77, 86, 89, 107, 108, 109, 112, 113, 116, 140, 144, 153, 156, 157, 158, 160, 161, 162, 163, 165, 191, 194, 216, 222, 224, 228, 230, 233, 234, 238, 241, 242, 261, 264, 271, 272, 278, 282, 283, 286, 289, 292, 299, 301, 306, 308, 319, 320, 321, 322, 328, 331, 336, 338, 339, 349, 350, 356, 390, 392, 406, 409, 433, 434, 436], "oblig": 5, "obs1": 26, "obs2": 26, "obs3": 26, "obs_typ": [281, 283, 286, 299, 301, 302], "observ": [2, 3, 8, 9, 11, 18, 20, 21, 24, 25, 28, 31, 32, 33, 35, 39, 41, 42, 43, 46, 75, 102, 109, 113, 158, 160, 182, 226, 228, 268, 279, 281, 282, 283, 286, 289, 291, 299, 301, 303, 321, 323, 325, 333, 334, 337, 347, 348, 350, 351, 352, 390, 393, 398, 399, 408, 409, 412, 434, 435, 436, 438], "observablesplitt": [28, 30, 321, 409], "obtain": [5, 8, 28, 32, 104, 153, 157, 192, 204, 329, 401, 422, 436, 437], "occup": [181, 188, 190, 201, 202, 205, 435], "occupi": [183, 188, 201, 435], "occupied_indic": [183, 435], "occur": [49, 50, 54, 81, 82, 84, 85, 109, 350, 409, 436], "occurr": [51, 308, 348, 409], "octob": 409, "odd": 194, "oei": 418, "off": [5, 435], "offer": [5, 8, 10, 11, 32, 41, 215, 321, 333, 349, 418], "offset": [23, 24, 109, 113, 114, 236, 270, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 352, 409, 439], "offset_i": [23, 286, 299, 352, 439], "offset_q": [24, 301], "often": [8, 18, 19, 35, 279, 397, 425, 434], "ohmic": 382, "old": 50, "old_method": 388, "old_pattern": 308, "older": 409, "omega": [382, 407], "omega_v": [299, 409], "omit": [151, 273], "ommit": 403, "omp_num_thread": 350, "onc": [1, 11, 12, 22, 26, 89, 241, 323, 424, 435, 436], "one": [0, 3, 5, 9, 10, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 30, 31, 35, 39, 41, 44, 46, 49, 50, 51, 52, 53, 82, 84, 85, 88, 90, 109, 116, 123, 140, 151, 154, 158, 160, 161, 181, 183, 185, 194, 197, 201, 202, 203, 204, 207, 216, 226, 228, 229, 230, 241, 261, 268, 271, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 299, 300, 301, 304, 308, 314, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 331, 332, 336, 339, 340, 341, 345, 348, 350, 351, 356, 358, 374, 388, 399, 401, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436], "one_body_integr": [183, 185, 201, 202, 204, 207, 435], "ones": [23, 26, 33, 48, 50, 53, 203, 401, 417, 418], "onli": [1, 4, 5, 12, 15, 16, 17, 18, 21, 25, 26, 28, 29, 30, 32, 35, 40, 41, 42, 43, 45, 48, 49, 50, 51, 53, 54, 69, 107, 108, 109, 110, 112, 113, 116, 123, 124, 137, 151, 156, 157, 161, 162, 181, 182, 187, 192, 196, 203, 204, 216, 229, 236, 242, 245, 250, 252, 254, 256, 257, 259, 261, 264, 266, 267, 270, 272, 281, 283, 286, 296, 297, 298, 299, 301, 308, 322, 327, 333, 335, 336, 337, 345, 349, 350, 351, 353, 356, 363, 382, 394, 396, 401, 403, 409, 416, 417, 418, 428, 429, 430, 431, 432, 435, 436], "onlin": 5, "onlt": 279, "onsit": 193, "onto": [23, 79, 82, 342, 354], "op": [11, 16, 40, 47, 52, 79, 83, 87, 88, 109, 160, 182, 241, 242, 272, 279, 399, 409, 415], "op_po": 83, "open": [11, 15, 18, 19, 41, 181, 272, 327, 409, 433], "openqasm": [56, 57, 408, 411], "openqasm_cod": 62, "oper": [1, 9, 10, 11, 16, 17, 18, 19, 20, 23, 31, 36, 38, 40, 41, 43, 46, 48, 80, 87, 89, 109, 110, 137, 140, 151, 153, 158, 160, 181, 182, 184, 187, 188, 200, 201, 206, 225, 226, 227, 228, 230, 232, 233, 235, 237, 240, 242, 243, 244, 246, 248, 249, 253, 260, 261, 262, 266, 267, 268, 269, 278, 282, 289, 320, 323, 327, 331, 333, 351, 369, 371, 372, 374, 375, 380, 382, 388, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 406, 407, 408, 409, 435, 436, 437], "operand": [262, 266], "operator_pool": 323, "operatortableau": [390, 393, 395, 407], "opim": 49, "opinion": 5, "oplu": [282, 403], "opportun": 5, "oppos": [225, 401], "opposit": 51, "opt": [23, 24, 25, 47, 54, 55, 56, 333, 409, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 439], "opt_circ": [51, 182], "optim": [0, 3, 5, 7, 11, 12, 22, 23, 25, 31, 32, 34, 39, 41, 43, 44, 45, 49, 52, 53, 72, 182, 217, 218, 219, 220, 221, 223, 261, 281, 283, 286, 289, 291, 292, 295, 296, 299, 301, 302, 305, 325, 329, 332, 333, 334, 335, 336, 339, 340, 342, 344, 345, 346, 348, 356, 391, 399, 401, 403, 409, 418, 428, 433, 435, 436, 437, 438], "optima": 34, "optimization_level": 72, "optimization_trac": 43, "optimize_initi": [45, 46, 391], "optimized_circ": 50, "optimizer_arg": 43, "optimizer_data": [3, 338], "optimizer_scipi": 3, "optimum": 34, "option": [3, 18, 28, 31, 33, 35, 40, 43, 50, 51, 53, 59, 62, 64, 67, 72, 73, 75, 76, 81, 88, 89, 90, 92, 93, 94, 96, 97, 99, 101, 104, 109, 110, 113, 114, 116, 117, 130, 133, 140, 151, 153, 154, 156, 157, 158, 159, 161, 164, 182, 186, 187, 188, 192, 193, 196, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 216, 219, 220, 222, 223, 225, 226, 227, 228, 229, 232, 241, 242, 245, 246, 261, 262, 264, 265, 266, 267, 271, 272, 273, 276, 279, 280, 281, 283, 285, 286, 287, 289, 295, 296, 297, 298, 299, 301, 304, 308, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 356, 357, 363, 364, 365, 366, 369, 373, 374, 382, 387, 388, 389, 391, 392, 397, 399, 400, 401, 403, 405, 406, 409, 427, 428, 429, 430, 431, 432, 434, 436], "optyp": 89, "oqasm2circ": 416, "oqasm_cod": 62, "oqasm_tab": 62, "oqasmpars": [61, 416], "or_claus": 282, "oracl": [9, 230, 232, 269, 273, 350, 353], "orbit": [181, 185, 188, 189, 190, 193, 195, 197, 201, 202, 204, 205, 321, 435], "orbital_energi": [190, 202, 204, 435], "order": [5, 10, 14, 17, 18, 23, 26, 28, 39, 45, 46, 47, 52, 53, 54, 89, 109, 113, 151, 156, 181, 187, 188, 190, 193, 200, 201, 203, 204, 205, 230, 231, 246, 258, 266, 269, 272, 279, 281, 283, 286, 291, 292, 293, 299, 301, 306, 308, 327, 333, 336, 350, 399, 400, 401, 403, 408, 409, 414, 418, 424, 434, 435, 437], "org": [4, 5, 6, 23, 48, 243, 249, 253, 346, 363, 408, 409], "orient": [418, 438], "origin": [1, 5, 436], "os": 409, "ostaszewski": [345, 436], "other": [4, 5, 16, 23, 31, 33, 39, 51, 53, 103, 109, 124, 144, 153, 200, 203, 204, 233, 237, 261, 262, 266, 267, 269, 289, 327, 345, 348, 351, 374, 391, 401, 411, 416, 433, 436], "other_exc_typ": 124, "other_var": [140, 163], "otherwis": [4, 5, 40, 53, 68, 75, 109, 113, 161, 342], "otim": [30, 50, 289, 374, 376, 379, 384, 387, 425], "our": [0, 1, 2, 3, 4, 14, 16, 22, 23, 28, 31, 33, 35, 39, 40, 41, 47, 50, 51, 52, 53, 243, 266, 280, 289, 325, 351, 390, 408, 409, 410, 420, 422, 423, 424, 426, 435, 436], "out": [5, 17, 28, 29, 39, 40, 43, 46, 81, 109, 140, 158, 201, 249, 258, 286, 299, 334, 350, 384, 401, 420, 430], "outbreak": 5, "outcom": [12, 100, 101, 225, 227], "outermost": 10, "outfil": 17, "outperform": 436, "output": [1, 3, 16, 31, 32, 33, 35, 45, 46, 50, 54, 62, 85, 89, 109, 113, 156, 158, 203, 258, 262, 264, 266, 267, 272, 276, 333, 350, 351, 364, 395, 401, 403, 404, 408, 418], "outsid": [41, 203], "outstand": 5, "over": [0, 1, 5, 11, 23, 29, 34, 40, 65, 68, 79, 85, 89, 103, 109, 153, 154, 160, 241, 261, 268, 272, 289, 301, 308, 348, 350, 384, 392, 399, 404, 405, 407], "overal": [39, 51, 109, 276, 279, 281, 283, 286, 299, 301, 399, 418, 436], "overhead": [47, 283, 286, 299, 301, 330, 333], "overlap": [182, 289, 308, 424, 425], "overload": [11, 20, 41, 109, 133, 140, 151, 159, 269, 278, 282, 383, 409], "overrid": [35, 242, 339, 341, 390], "overview": [4, 12], "overwhelm": 16, "own": [1, 5, 9, 10, 14, 18, 31, 33, 39, 50, 88, 103, 154, 181, 290, 331, 338, 408], "owner": 5, "ownership": [5, 350], "p": [44, 62, 113, 190, 191, 193, 196, 201, 207, 225, 227, 258, 271, 345, 373, 374, 375, 380, 382, 389, 401, 407, 436], "p1": 388, "p2": 388, "p_": [34, 104, 157, 407], "p_0": 407, "p_i": 374, "p_k": [104, 157], "pack": 90, "packag": [0, 5, 6, 12, 48, 204, 250, 261, 355, 433, 435], "pad": 241, "page": [1, 4, 5, 11, 26, 29, 33, 35, 36, 37, 43, 50, 51, 54, 57, 350, 409, 410, 411, 426, 434, 435], "paid": 5, "pair": [0, 9, 19, 29, 30, 42, 47, 48, 160, 161, 162, 225, 227, 289, 332, 342, 348, 395, 396, 397, 403, 407, 408, 416, 436], "paler": 48, "palindrom": 1, "paradigm": [1, 7, 8, 417], "parallel": [20, 96], "parallel_job_count": 96, "param": [17, 109, 225, 226, 227, 259, 333, 346, 375], "param_gener": 225, "paramet": [0, 3, 10, 11, 12, 17, 19, 23, 29, 32, 35, 40, 41, 45, 50, 59, 60, 62, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 84, 85, 88, 92, 93, 94, 96, 97, 99, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 124, 129, 130, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 168, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 308, 311, 313, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 418, 419, 420, 421, 422, 423, 424, 427, 435, 436, 437], "parameter": [10, 323, 345, 436], "parameter_map": [2, 31, 41, 43, 113, 156, 182, 325], "parametr": [0, 3, 11, 17, 43, 49, 69, 103, 113, 118, 120, 181, 184, 190, 194, 225, 226, 227, 230, 231, 259, 335, 336, 345, 358, 383, 399, 403, 424, 435], "parametricamplitudedamp": 358, "parametricgatenois": 358, "parametricpuredephas": 358, "parametricquantumchannel": [226, 228, 358, 381], "paramg": [230, 231], "params_specif": [226, 228], "parent": [33, 35, 41, 230, 237, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304], "pari": 5, "pariti": [181, 186, 187, 200, 203, 210, 347, 403, 405, 409, 433, 434], "pars": [31, 62, 215, 216, 217, 218, 219, 220, 221, 223, 294, 295, 296, 297, 298, 427, 428, 429, 430, 431, 432], "parse_result": [284, 285, 287, 288, 304], "parsedpostprocessedresult": 216, "parser": [61, 62, 416], "parsiad": 44, "part": [7, 14, 15, 18, 23, 24, 41, 103, 137, 146, 148, 181, 203, 216, 237, 283, 286, 299, 301, 331, 333, 339, 409, 426, 433], "parti": [5, 57], "partial": [113, 329, 358, 384, 409], "partial_trac": 358, "particl": [201, 321, 340], "particul": 338, "particular": [5, 15, 28, 36, 38, 41, 43, 45, 54, 109, 218, 219, 220, 221, 223, 250, 261, 272, 289, 291, 292, 293, 294, 333, 340, 341, 344, 345, 346], "particularli": [1, 90], "partit": [215, 219, 278, 284, 285, 287, 288, 294, 296, 297, 298, 300, 408, 418, 421, 427, 428], "pass": [15, 46, 109, 113, 116, 154, 203, 222, 231, 242, 259, 261, 271, 272, 279, 283, 286, 296, 297, 298, 299, 301, 308, 309, 319, 325, 327, 332, 335, 336, 338, 339, 340, 341, 344, 355, 391, 399, 401, 403, 427, 428, 429, 430, 431, 432], "past": 20, "patel": 44, "patent": 5, "path": [12, 116, 117, 216, 222, 276, 277, 322, 343, 351, 356, 357, 401, 408], "path_graph": [16, 47], "pathfind": 401, "patter": 52, "pattern": [44, 45, 49, 192, 194, 306, 308, 310, 311, 314, 315, 316, 317, 318, 319, 321, 328, 332, 336, 339, 408], "pattern_to_remov": [51, 54, 319], "patterngroup": [305, 311, 339], "patternmanag": [45, 49, 51, 53, 305, 310, 319, 321, 336, 408], "pauli": [17, 19, 26, 54, 103, 153, 160, 200, 225, 226, 229, 281, 283, 286, 299, 301, 335, 345, 358, 361, 362, 363, 365, 373, 374, 376, 389, 390, 391, 393, 395, 399, 402, 407, 409, 436], "pauli_op": 160, "pauli_oper": 407, "pauli_str": 407, "pauli_synth": [390, 399], "pauli_term": [19, 20, 21, 26, 30, 153, 436], "pauli_vec": 362, "payment": 5, "pblinalg": 350, "pbm": [409, 426], "pbn": 336, "pbo": [45, 49, 50, 51, 52, 53, 54, 55, 56, 339, 409], "pd": 382, "pdf": [4, 155, 409], "per": [25, 51, 85, 96, 325, 332, 336, 351, 399, 419, 420, 421, 422, 423, 428, 430, 431], "perceiv": 5, "percent": [5, 373], "perez": 253, "perf_count": 327, "perfect": [203, 224, 225, 226, 227, 229, 289, 350, 399, 409], "perfectli": [31, 164], "perfom": 324, "perform": [1, 3, 5, 9, 16, 18, 28, 30, 33, 34, 35, 36, 38, 39, 41, 43, 45, 46, 51, 53, 54, 79, 95, 109, 113, 158, 181, 200, 203, 204, 230, 232, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 266, 273, 283, 286, 289, 299, 301, 302, 321, 322, 323, 324, 327, 329, 337, 338, 339, 347, 348, 350, 384, 391, 397, 399, 401, 403, 409, 436], "perform_phase_estim": [181, 435], "perform_pyscf_comput": [181, 435], "period": 5, "perman": 5, "permiss": [5, 409], "permit": [4, 5], "permut": [51, 89, 330, 333, 350, 401, 403], "perpetu": 5, "person": 5, "pertain": 5, "perturb": [181, 190, 204, 321, 346, 435, 437], "petri": 249, "ph": [10, 15, 17, 44, 45, 53, 54, 62, 109, 246, 249, 289, 307, 337, 350, 363, 395, 396], "ph_gate": 53, "phase": [10, 17, 44, 45, 53, 203, 230, 232, 260, 264, 266, 267, 269, 313, 358, 359, 390, 396, 402, 403, 405, 407, 408, 409, 433], "phase_estim": [181, 230, 435], "phase_g": 10, "phase_matrix": 10, "phase_polynomi": [390, 403], "phase_polynomial_synthesi": 390, "phase_reg": 246, "phaseoracl": 350, "phi": [198, 201, 313, 315, 407, 435], "phi_": [185, 201], "phi_u": [185, 201], "phy": [243, 249, 363, 365, 366], "physic": [5, 18, 22, 23, 33, 36, 97, 288, 388, 397, 400, 434], "physreva": [243, 249], "pi": [1, 10, 17, 41, 45, 52, 53, 54, 62, 141, 142, 143, 149, 151, 201, 203, 207, 230, 258, 268, 271, 311, 314, 315, 327, 335, 337, 402, 403, 407, 436], "pick": [4, 46, 289, 327, 340, 355, 399, 401, 402, 407, 424, 436], "pictur": [12, 34], "piec": [14, 16, 29, 46, 89, 113, 137, 241, 262, 264, 281, 283, 286, 299, 301, 403, 425], "pillow": 409, "pip": 4, "pipe": [20, 40, 41, 71, 116, 215, 216, 331, 356, 409, 427], "pivot": 403, "place": [1, 5, 17, 40, 109, 113, 242, 250, 252, 254, 261, 286, 291, 292, 293, 299, 324, 397, 400, 401, 407, 425], "placehold": [109, 305, 356], "placement": 45, "planar": 418, "plane": [137, 139], "platform": [4, 409], "pleas": [4, 5, 9, 26, 32, 35, 36, 37, 41, 44, 50, 51, 53, 57, 71, 72, 88, 109, 203, 276, 306, 308, 319, 332, 333, 335, 336, 339, 350, 391, 408, 409, 410, 411, 412, 426, 436], "plesset": [181, 190, 204, 435, 437], "plot": [154, 155, 156, 268], "plot_in_notebook": [103, 109, 110], "plugabl": 77, "plugin": [2, 3, 27, 28, 30, 31, 32, 35, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 68, 71, 72, 86, 90, 93, 103, 109, 112, 113, 133, 182, 211, 215, 216, 218, 219, 220, 221, 223, 275, 281, 283, 286, 299, 301, 309, 314, 315, 316, 317, 318, 319, 351, 356, 357, 391, 403, 424, 427, 428, 429, 430, 431, 432, 433, 435, 438], "plugin1": 39, "plugin2": 39, "plugin_exception_onli": 123, "pluginexcept": [40, 48, 90, 105, 123, 126], "pm": [53, 162, 348, 436], "pmatrix": 23, "pmh": 401, "pmh03": [44, 401], "pmh_opt": 401, "po": [50, 308], "point": [41, 141, 154, 271, 334, 338, 348, 351, 409], "polynomi": [44, 289, 390, 396, 403, 405, 408], "polynomila": 390, "ponder": 20, "pool": [116, 216, 272, 322, 323, 351, 356, 436], "pop": [15, 41, 272], "pop_prohibited_valu": 320, "port": [31, 33, 39, 116, 117, 216, 222, 322, 343, 351, 356, 357, 413], "portion": [109, 333], "posit": [88, 101, 109, 137, 147, 150, 193, 219, 220, 223, 280, 285, 287, 304, 306, 308, 340, 358, 369, 397, 400], "possibl": [5, 10, 11, 14, 15, 16, 17, 19, 21, 23, 26, 27, 28, 41, 50, 52, 102, 103, 109, 153, 158, 200, 203, 204, 226, 229, 231, 271, 281, 283, 286, 289, 290, 299, 301, 327, 329, 333, 335, 353, 409, 410, 422, 424, 425], "possibli": [113, 143, 146, 148, 158, 159, 225, 226, 227], "post": [5, 32, 33, 39, 40, 41, 46, 54, 109, 113, 158, 216, 217, 222, 321, 322, 342, 357, 409], "post_process": [31, 32, 39, 216, 217, 222, 322], "postprocess": 409, "pot": 201, "potenti": [17, 185, 191, 193, 195, 201, 261, 330, 422], "povm": [225, 227], "pow": 320, "power": [0, 3, 5, 9, 27, 34, 154, 230, 241, 382, 407, 438], "ppol": 405, "pq": [185, 186, 191, 193, 200, 201, 203, 207, 434], "pqr": [185, 186, 191, 193, 200, 201, 207, 434], "practic": [1, 15, 18, 28, 30, 34, 35, 46, 52, 82, 283, 403, 417, 418, 424, 425], "practis": [31, 35, 325], "prakash": [230, 241], "prakashqram": 409, "pre": [33, 39, 40, 54, 230, 312, 350, 425], "precis": [22, 41, 89, 101, 114, 203, 346, 350, 435], "predecessor": 327, "predef_gener": 225, "predefg": 194, "predefin": 17, "predict": 47, "predif": [276, 277], "prefer": [5, 434, 435], "prefix": [53, 89, 111, 230], "preliminari": 203, "premis": 5, "prepar": [3, 5, 28, 181, 182, 184, 197, 203, 224, 225, 230, 240, 241, 260, 273, 274, 289, 290, 291, 292, 293, 399, 406, 409, 425, 433, 436], "prepart": 409, "prepend": [290, 291, 292], "preprint": 289, "present": [3, 5, 9, 18, 22, 33, 34, 47, 50, 51, 82, 109, 153, 226, 228, 230, 242, 268, 305, 323, 325, 329, 335, 340, 344, 345, 346, 418, 435, 439], "preserv": [181, 192, 196, 198, 289, 320, 358, 370, 388, 435], "preset": [45, 335], "press": 326, "pretti": [52, 140, 151, 157], "pretty_print": 140, "pretty_token": 151, "prevent": [5, 41, 54], "previou": [10, 31, 43, 45, 50, 52, 53, 203, 412, 434], "previous": [26, 350, 435, 436], "primari": [5, 237, 409], "primit": [75, 412], "print": [0, 1, 2, 3, 5, 9, 11, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 40, 41, 43, 45, 46, 47, 48, 51, 52, 54, 62, 64, 88, 90, 109, 112, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 186, 187, 201, 202, 206, 208, 209, 210, 232, 233, 241, 242, 246, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 279, 280, 283, 284, 285, 287, 288, 300, 304, 319, 325, 326, 327, 333, 334, 339, 345, 350, 353, 373, 374, 380, 382, 388, 395, 399, 401, 402, 404, 405, 407, 415, 416, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436], "printer": [103, 109], "prior": [5, 266, 321], "prioriti": 213, "pro": [365, 366], "prob": [81, 84, 164, 374, 375, 380, 382, 383, 435], "probabl": [1, 2, 14, 29, 31, 32, 34, 35, 40, 46, 54, 81, 82, 84, 101, 104, 109, 113, 156, 157, 158, 164, 203, 229, 232, 271, 325, 350, 351, 374, 380, 382, 425], "probail": 113, "problem": [1, 9, 11, 16, 22, 23, 24, 31, 34, 44, 47, 48, 51, 135, 153, 181, 182, 215, 217, 218, 219, 220, 221, 223, 280, 281, 283, 284, 285, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 321, 336, 345, 352, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 439], "problem_is": [23, 439], "problem_ising_job": 23, "problem_ising_ob": 23, "problem_job": [419, 420, 421, 422, 423], "problem_parameters_dict": [419, 420, 421, 422, 423], "problem_qubo": 24, "problem_qubo_ising_ob": 24, "problem_qubo_job": 24, "problem_result": [419, 420, 421, 422, 423], "problem_s": [23, 24, 439], "proce": [45, 435], "procedur": [7, 16, 17, 41, 50, 57, 182, 268, 299], "proceed": 5, "process": [0, 2, 5, 8, 12, 22, 27, 28, 29, 32, 34, 35, 39, 40, 41, 42, 45, 46, 48, 54, 100, 102, 103, 109, 112, 116, 158, 216, 217, 222, 242, 253, 261, 321, 322, 324, 342, 349, 352, 356, 357, 358, 363, 366, 373, 391, 409, 436, 438], "processing_typ": [42, 112, 409], "processingtyp": [35, 42, 100, 112, 113, 351], "processor": [0, 3, 28, 103, 109, 158, 165, 335, 351, 408, 409, 438], "prod": 31, "prod_": 200, "prod_i": 399, "prod_j": 399, "produc": [16, 23, 24, 26, 45, 109, 113, 203, 241, 269, 278, 283, 286, 295, 299, 301, 333, 341, 391, 399, 401, 403, 404, 405, 424, 425], "produce_j_h_and_offset": [285, 288, 300], "produce_q_and_offset": [280, 284, 287, 304], "product": [4, 5, 15, 26, 113, 153, 200, 229, 272, 289, 345, 358, 363, 374, 379, 384, 388, 399, 407, 425, 436], "profile_default": 409, "profit": 5, "prog": [3, 9, 11, 14, 15, 16, 31, 45, 46, 47, 48, 50, 51, 88, 90, 109, 110, 182, 233, 241, 242, 243, 261, 272, 325, 327, 341, 353, 395, 409, 435, 436], "program": [0, 3, 4, 7, 10, 11, 13, 14, 15, 16, 29, 30, 31, 40, 41, 45, 46, 47, 48, 50, 51, 59, 67, 73, 88, 90, 103, 109, 110, 182, 184, 232, 233, 241, 242, 243, 246, 264, 265, 269, 270, 272, 278, 280, 308, 325, 327, 341, 353, 395, 417, 418, 425, 435, 436, 438], "program_pragma": 69, "progress": 350, "prohibit": [53, 320], "prohibited_valu": 53, "project": [28, 79, 81, 182, 350], "project_then_reset": 350, "projectq": [4, 56, 57, 408, 409, 411], "projectq_bind": 4, "projectq_to_qlm": [64, 415], "promin": 5, "prompt": 4, "promptli": 4, "propag": 424, "proper": [14, 16, 41, 109, 151, 264, 265, 268, 424, 439], "properli": [10, 57], "properti": [5, 18, 107, 108, 109, 112, 113, 154, 156, 157, 159, 161, 286, 297, 298, 299, 301, 350, 358, 389, 402, 418], "proport": 241, "proportion": 5, "propos": [36, 37, 181, 199], "propto": 348, "prost": 322, "protect": [5, 124], "protest": 5, "protocol": [351, 356], "provabl": 403, "prove": [5, 286, 299, 301, 426], "provid": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 26, 28, 31, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 62, 68, 71, 72, 75, 77, 79, 85, 86, 89, 95, 103, 109, 112, 117, 130, 137, 165, 181, 182, 184, 203, 211, 222, 230, 231, 253, 261, 279, 283, 286, 296, 299, 301, 305, 310, 312, 323, 325, 327, 329, 331, 332, 338, 340, 341, 343, 344, 345, 346, 350, 351, 356, 357, 390, 399, 401, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 424, 427, 433, 434, 435, 437, 438], "provis": 5, "prune": [46, 109, 158], "psd": [154, 387, 389], "psd_expr": 154, "pseudo": [34, 436], "psi": [11, 28, 29, 30, 43, 113, 182, 289, 329, 351, 367, 388], "psi_": 258, "psi_0": [21, 113, 158, 289, 292, 293, 409], "psi_0_str": 350, "psi_i": 113, "pso": [321, 340], "psominimizeplugin": 321, "ptild": 382, "ptm": [358, 360, 363, 364, 365, 366, 387, 388, 389], "public": [5, 244, 245, 246, 251, 252, 272, 323, 329, 401, 409, 436], "publicli": 5, "publish": [5, 116, 216, 322, 351, 356, 390, 409], "pull": 399, "purchas": 5, "pure": [9, 12, 13, 107, 108, 109, 112, 113, 156, 161, 230, 358, 382], "purpos": [5, 17, 34, 46, 153, 159, 202, 242, 261, 289, 327, 353, 436], "pursuant": 4, "push": 354, "put": [1, 59, 64, 67, 73, 193, 350], "py": [17, 62, 112, 408, 409], "pyaqasm": [9, 10, 11, 12, 14, 16, 17, 59, 67, 73, 89, 103, 109, 230, 233, 241, 242, 408], "pybind11": [36, 37, 390], "pybindlinalg": 90, "pybindlinalgwcircuit": 350, "pydo": 4, "pylinalg": [37, 55, 56, 261, 325, 341, 349, 350, 355, 409, 412], "pyopenssl": 4, "pypi": [4, 6, 409], "pyplot": [296, 297, 298], "pyquil": [4, 56, 57, 408, 409, 411], "pyquil_bind": 4, "pyquil_circuit": 413, "pyquil_prog": 67, "pyquil_to_qlm": [66, 413], "pyquilqpu": [66, 413], "pyscf": [181, 204, 435], "pyscf_tool": [181, 435], "python": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 33, 37, 116, 130, 151, 157, 163, 222, 238, 242, 261, 262, 264, 265, 268, 308, 324, 325, 349, 390, 411, 413, 416], "python3": 48, "q": [16, 17, 24, 53, 62, 75, 84, 184, 190, 191, 193, 201, 207, 258, 261, 269, 280, 284, 287, 301, 304, 319, 326, 415, 416, 426], "q1": 342, "q2": 342, "q_": 24, "q_3": 16, "q_4": 16, "q_5": 16, "q_mat": 24, "q_matrix": [24, 301], "qalloc": [0, 1, 3, 9, 10, 11, 12, 14, 15, 16, 29, 30, 31, 45, 46, 47, 48, 50, 51, 88, 90, 109, 110, 182, 232, 241, 242, 243, 246, 261, 264, 265, 269, 270, 272, 325, 327, 341, 353, 395, 435, 436], "qaoa": [9, 25, 47, 51, 54, 217, 218, 219, 220, 221, 223, 279, 281, 283, 286, 299, 301, 327, 333, 408, 417, 427, 428, 429, 430, 431, 432, 438], "qaoa_circuit": 279, "qaoa_job": [281, 283, 286, 299, 301, 427], "qaptiva": [0, 1, 11, 12, 18, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 43, 48, 58, 63, 66, 70, 96, 98, 107, 108, 109, 112, 113, 137, 153, 156, 158, 161, 164, 181, 203, 215, 281, 283, 286, 299, 301, 309, 321, 333, 335, 336, 339, 358, 391, 394, 396, 399, 401, 403, 404, 405, 409, 411, 418, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436], "qaptivaqpu": 97, "qarithexp": [230, 269], "qasm": 416, "qat": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 409, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439], "qat_circ": 324, "qatdisplai": 4, "qb": [17, 31, 45, 109, 279, 325], "qb1": [161, 402], "qb2": [161, 402], "qbit": [0, 1, 9, 11, 14, 15, 16, 17, 29, 30, 31, 40, 43, 45, 46, 47, 48, 50, 51, 88, 89, 90, 103, 109, 110, 113, 153, 160, 212, 213, 214, 225, 227, 230, 232, 241, 242, 243, 250, 252, 254, 255, 256, 257, 258, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 279, 313, 325, 327, 333, 337, 341, 350, 353, 373, 374, 388, 389, 395, 398, 402, 404, 405, 435], "qbit_idx": 11, "qbit_limit": [212, 213, 214], "qbit_list": [17, 265], "qbits_c": 350, "qbits_compilation_threshold": [327, 409], "qbits_list": [264, 265, 266, 267, 269, 270], "qbits_reg": [10, 12, 231], "qblist": 261, "qbool": [16, 230, 261, 272], "qbool_arrai": [264, 265], "qboolarrai": [16, 230, 261, 264, 266], "qchan": 364, "qchem": 437, "qclaus": [230, 264, 265, 269], "qcompexp": [230, 269], "qcs_settings_applications_pyquil_qvm_url": 413, "qdldl": 6, "qft": [9, 10, 16, 17, 48, 53, 88, 109, 230, 243, 246, 253], "qftarith": [9, 15, 16, 17, 48, 56, 88, 109, 110, 230, 243, 244, 245, 246, 247], "qfunc": [1, 3, 9, 230, 409], "qi": [201, 207], "qiksit": 409, "qint": [16, 230, 232, 261, 264, 272], "qint1": [16, 269], "qint2": [16, 269], "qint3": [16, 269], "qiskit": [4, 56, 57, 408, 409, 411], "qiskit_bind": 4, "qiskit_circuit": [73, 412], "qiskit_ibm_runtim": 412, "qiskit_result": 412, "qiskit_to_qlm": [70, 412], "qiskit_token": [71, 72], "qiskitjob": [70, 71, 412], "qiskitruntimeqpu": [70, 409, 412], "qiskitruntimeservic": [75, 412], "qj": [201, 207], "qlm": [5, 41, 59, 60, 62, 64, 67, 68, 69, 71, 73, 76, 77, 112, 279, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 309, 331, 335, 338, 397, 398, 399, 400, 409, 412, 415], "qlm_batch": [71, 74], "qlm_circ": 414, "qlm_circuit": [60, 69, 76, 412, 413], "qlm_job": [68, 413], "qlm_obj": 268, "qlm_object": 331, "qlm_to_cirq": [58, 414], "qlm_to_pyquil": [66, 413], "qlm_to_qiskit": [70, 412], "qlmaa": 409, "qpe": 203, "qprog": [0, 29, 30], "qpu": [0, 1, 2, 3, 7, 8, 9, 14, 16, 18, 23, 24, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 44, 45, 48, 55, 56, 66, 68, 70, 71, 72, 75, 77, 78, 86, 90, 91, 94, 95, 97, 99, 103, 109, 112, 113, 116, 117, 154, 156, 158, 164, 182, 203, 215, 218, 219, 220, 221, 222, 223, 226, 228, 232, 281, 283, 286, 299, 301, 312, 322, 323, 325, 327, 329, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 408, 411, 417, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 435, 436, 438], "qpu_exception_onli": 123, "qpuexcept": [35, 90, 106, 123, 127, 203, 409], "qpuhandl": [33, 35, 77, 109, 113, 132, 182, 349, 350, 351, 357], "qpuskeleton": 35, "qputobackend": [70, 412], "qram": [241, 350], "qreg": [40, 62, 109, 157, 159, 261, 409, 416], "qreg_list": 156, "qregist": [40, 109, 157, 158, 159, 230, 261, 272], "qrout": [0, 1, 2, 9, 10, 11, 40, 41, 43, 45, 52, 230, 268, 409, 435], "qroutin": [1, 9, 10, 13, 14, 15, 16, 17, 184, 200, 203, 230, 232, 234, 239, 240, 241, 242, 244, 246, 247, 248, 258, 260, 262, 264, 265, 266, 267, 269, 271, 273, 274, 337, 435], "qse": 181, "quad": 24, "quadrat": [1, 22, 34, 283, 286, 299, 301, 403, 409, 439], "qualiti": [5, 34, 47, 182, 403], "qualnam": 360, "quameleon": [112, 341], "quameleonplugin": [48, 112, 321, 409], "quant": [44, 249, 289, 363], "quantiti": [103, 325, 424], "quantiz": [23, 191, 193], "quantul": 230, "quantum": [0, 3, 4, 5, 7, 9, 11, 15, 18, 21, 23, 24, 25, 26, 28, 31, 34, 35, 36, 38, 39, 41, 43, 48, 50, 51, 52, 54, 68, 71, 72, 75, 79, 80, 82, 87, 88, 89, 100, 102, 103, 109, 156, 157, 158, 159, 165, 182, 203, 215, 224, 225, 226, 227, 228, 231, 232, 237, 240, 241, 242, 243, 249, 253, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 272, 273, 275, 276, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 291, 292, 299, 300, 301, 302, 304, 305, 321, 327, 328, 335, 336, 339, 344, 349, 352, 353, 360, 364, 365, 369, 370, 371, 372, 381, 383, 385, 386, 387, 388, 389, 391, 395, 396, 399, 403, 411, 417, 427, 433, 434, 436], "quantum_channel": [225, 227, 369, 370, 371, 372], "quantum_count": 230, "quantumchannekrau": 370, "quantumchannel": [225, 226, 227, 228, 358, 363, 364, 365, 366, 369, 370, 371, 372], "quantumchannelchi": [358, 388], "quantumchannelchoi": [358, 388, 389], "quantumchannelkrau": [225, 227, 358, 373, 374, 375, 386, 387, 389], "quantumchannelptm": [358, 370, 387, 388], "quantumcircuit": 76, "quantumcostmetr": [275, 336], "qubit": [1, 9, 10, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 29, 30, 31, 35, 36, 37, 39, 42, 44, 45, 48, 49, 50, 51, 54, 59, 62, 64, 67, 73, 75, 76, 79, 81, 82, 84, 85, 88, 89, 91, 99, 103, 112, 113, 153, 156, 158, 160, 161, 162, 166, 176, 181, 187, 188, 189, 192, 194, 196, 197, 198, 199, 201, 202, 203, 206, 225, 226, 227, 228, 229, 230, 232, 241, 244, 245, 246, 247, 248, 251, 252, 260, 261, 264, 265, 266, 267, 269, 272, 273, 281, 283, 286, 289, 299, 301, 303, 306, 308, 314, 315, 316, 317, 318, 319, 321, 325, 327, 330, 332, 333, 335, 336, 337, 339, 342, 350, 351, 353, 373, 374, 376, 387, 388, 389, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 412, 414, 416, 434, 435, 436, 439], "qubit1": 350, "qubit2": 350, "qubit3": 350, "qubo": [22, 23, 25, 34, 280, 283, 284, 286, 287, 299, 304, 409, 418, 424, 439], "question": 410, "quick": 408, "quickli": [16, 51, 268, 401], "quit": [10, 15, 16, 39, 41, 45, 54, 299], "quop": [55, 56, 225, 226, 409], "qutip": 4, "qvm": 413, "qx": 48, "r": [17, 45, 48, 52, 76, 113, 137, 140, 163, 185, 190, 191, 193, 201, 202, 434], "r_": [185, 201, 315, 389], "r_x": [53, 314, 315, 424], "r_y": 313, "r_z": [53, 231, 313, 314, 315], "rabi": [299, 409], "radian": [139, 141, 142, 149], "rais": [35, 40, 48, 53, 79, 83, 90, 91, 92, 93, 94, 105, 106, 109, 110, 118, 122, 123, 124, 125, 126, 127, 128, 129, 131, 226, 228, 261, 283, 286, 299, 301, 355, 403, 409], "raise_break": 79, "ram": [36, 37], "ramp": 424, "rand": [23, 24, 201, 202, 439], "randint": [300, 422], "randn": [201, 202], "random": [1, 11, 21, 23, 24, 34, 201, 202, 229, 241, 268, 300, 327, 334, 340, 344, 345, 346, 350, 352, 353, 373, 374, 398, 401, 404, 405, 408, 418, 422, 436, 439], "random_circuit": 327, "random_linear_oper": [390, 401], "random_phase_polynomi": 390, "randomli": [329, 346], "rang": [1, 3, 10, 11, 17, 20, 31, 35, 39, 43, 45, 46, 52, 182, 203, 232, 271, 272, 279, 289, 327, 353, 401, 418, 426], "rangl": [1, 11, 13, 15, 16, 28, 29, 30, 31, 43, 46, 50, 79, 85, 104, 113, 154, 157, 182, 184, 227, 230, 232, 239, 240, 241, 244, 245, 246, 248, 250, 251, 252, 254, 255, 256, 257, 258, 261, 268, 269, 272, 274, 283, 289, 325, 329, 348, 350, 351, 367, 380, 403, 406, 424, 425], "rangle_": 436, "rank": 388, "rate": [229, 373, 436], "rather": [10, 17, 31, 41, 51, 107, 113, 203, 233, 262, 264, 265, 267, 269, 434], "ration": 409, "raw": [107, 109, 113, 156, 157, 161, 294], "raw_data": [32, 40, 104, 156, 353, 419, 420, 421, 422, 423], "rb": 373, "rb_ep": 373, "rbrace": [225, 227], "rbrace_": [374, 388], "rdm1": [204, 435], "re": [3, 5, 16, 35, 39, 40, 44, 88, 109, 124, 156, 329, 435], "reach": [23, 24, 39, 45, 211, 348, 435], "read": [4, 5, 43, 107, 108, 109, 112, 113, 156, 161, 203], "readabl": [5, 12, 23], "readi": [23, 24, 276, 277, 278, 281, 283, 286, 299, 301, 399, 409, 424], "readonli": 350, "readonly_statevector": 350, "readout": [224, 229], "real": [22, 23, 24, 50, 68, 113, 137, 138, 139, 143, 144, 145, 152, 153, 241, 289, 371, 403, 409, 418, 422, 426], "realiz": [18, 154, 299], "reason": [5, 109, 434], "reasonn": 54, "receiv": [5, 34, 41, 63, 89, 90, 109, 226, 228, 331, 345], "recent": [23, 48, 62, 112, 353, 434], "recept": [41, 331, 338], "recip": [231, 424], "recipi": 5, "recit": 5, "recommend": [5, 6, 187, 241, 350], "recomput": 82, "reconstruct": [28, 32], "record": 418, "recov": 415, "recurs": [15, 231, 283, 399, 401, 403], "redefin": [118, 122, 128, 129, 131], "redesign": 409, "redistribut": 5, "reduc": [5, 16, 31, 47, 49, 51, 52, 54, 204, 272, 276, 279, 283, 286, 299, 301, 321, 330, 333, 358, 371, 399, 435], "reduct": 45, "refer": [5, 23, 26, 32, 36, 37, 50, 51, 88, 90, 109, 181, 193, 195, 197, 198, 234, 271, 272, 280, 284, 285, 287, 288, 300, 304, 319, 327, 332, 335, 339, 346, 350, 363, 365, 366, 399, 401, 408, 409, 411, 412, 418, 426, 435, 436, 438], "referenc": 17, "refrain": 5, "refus": 320, "reg": [3, 182, 435, 436], "reg1": 232, "reg2": 232, "reg_control_s": 246, "reg_siz": [243, 244, 245, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258], "reg_size_2": [250, 252, 254, 256, 257], "regard": [5, 22, 35, 109, 203, 289], "regener": 109, "regim": 436, "regist": [10, 13, 16, 28, 51, 53, 62, 109, 156, 157, 159, 225, 227, 236, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 261, 262, 264, 265, 269, 270, 272, 273, 305, 306], "regroup": [279, 358], "regul": 5, "regular": [53, 59, 64, 67, 73, 165, 307, 329], "relat": [22, 28, 154, 258, 358, 382], "relax": 380, "releas": [16, 109, 242, 261, 272, 438], "relev": [5, 89], "reli": [1, 23, 44, 45, 363, 409, 417, 434], "relief": 5, "reloc": 437, "remain": [0, 5, 201, 203, 205, 241, 242, 333, 409], "remap": [39, 47, 88, 89, 109, 246, 321, 330, 397, 400, 403], "remap_circuit": [47, 397, 400], "remark": [36, 37], "remedi": 5, "rememb": 1, "remot": [5, 31, 33, 35, 39, 40, 90, 115, 137, 215, 222, 321, 343, 409], "remote_stack": 409, "remoteappl": 115, "remotebatchgener": [31, 215], "remoteplugin": [39, 321, 409], "remoteqpu": [33, 349, 409], "remov": [35, 44, 46, 48, 50, 53, 54, 109, 113, 226, 228, 242, 261, 279, 308, 319, 320, 321, 342, 384, 409], "remove_lock": [109, 261], "renam": 437, "renaming_dict": [110, 155], "render": 4, "renorm": [46, 81, 82], "rent": 5, "reorder": [333, 403], "repair": [39, 40], "repeat": [1, 28, 30, 41, 256, 257, 418, 422], "repeatedli": 272, "repetit": [28, 261], "replac": [5, 45, 46, 49, 50, 51, 53, 109, 230, 242, 268, 271, 305, 308, 321, 328, 339, 348, 408, 412, 436, 437], "replace_pattern": [50, 51, 53, 308, 339], "replica": [280, 284, 285, 287, 288, 300, 304], "report": [104, 409, 410], "repositori": 408, "repr": 388, "reprensent": 159, "repres": [5, 14, 16, 18, 19, 22, 27, 42, 88, 89, 101, 103, 129, 136, 137, 140, 151, 153, 154, 158, 159, 201, 230, 241, 272, 278, 282, 283, 286, 294, 295, 299, 301, 303, 320, 351, 352, 358, 390, 392, 394, 402, 405, 407, 417, 418, 436], "represent": [5, 12, 36, 81, 84, 103, 135, 140, 153, 159, 182, 184, 186, 187, 200, 206, 208, 209, 210, 219, 220, 223, 225, 226, 230, 280, 284, 285, 286, 287, 288, 296, 299, 300, 301, 304, 308, 358, 360, 365, 366, 382, 386, 387, 388, 389, 390, 417, 426, 435, 436], "reproduc": [5, 410], "reproduct": 5, "repuls": [191, 193, 201, 202, 204, 435], "request": [28, 75, 95, 116, 156, 216, 322, 351, 356], "requir": [1, 3, 4, 5, 6, 16, 26, 31, 35, 40, 41, 43, 45, 46, 86, 89, 96, 99, 109, 113, 151, 156, 161, 243, 261, 272, 292, 302, 322, 324, 325, 332, 337, 345, 401, 403, 409, 418, 419, 420, 421, 422, 423, 425, 428, 429, 430, 431, 432, 439], "res_reg_s": 256, "rescal": [20, 345], "resdata": 40, "research": 5, "resel": 5, "resembl": 34, "reserv": [5, 95, 96, 98, 99], "reservation_id": 96, "reset": [12, 13, 17, 79, 82, 89, 109, 242, 246, 261, 276, 350, 409], "reset_to_str": 350, "resili": 43, "resiz": 350, "resolut": 5, "resolv": 4, "resort": 51, "resourc": [15, 16, 17, 56, 86, 156, 356], "resourcemodel": [95, 356], "resp": [185, 188, 201], "respect": [19, 23, 24, 33, 53, 154, 158, 203, 283, 286, 299, 301, 335, 352, 365, 371, 376, 418, 436, 439], "respons": [5, 77, 95], "ressourc": 17, "rest": [28, 31, 34, 40, 41, 45], "restart": 409, "restrain": 5, "restrict": [5, 23, 181, 183, 201, 289, 425, 435], "restrict_active_spac": 202, "restrict_to": 289, "restructur": 409, "resubmit": [39, 40], "result": [0, 1, 2, 3, 5, 8, 14, 15, 16, 17, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 47, 48, 56, 59, 60, 64, 67, 68, 72, 73, 74, 75, 76, 79, 81, 82, 83, 84, 89, 90, 91, 101, 108, 109, 113, 115, 116, 135, 145, 158, 164, 182, 200, 203, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 241, 247, 250, 252, 254, 255, 256, 257, 260, 261, 266, 267, 269, 271, 272, 273, 278, 281, 282, 283, 284, 285, 286, 287, 288, 299, 301, 303, 304, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 329, 331, 333, 334, 336, 338, 339, 340, 342, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 388, 393, 399, 401, 402, 403, 409, 412, 413, 418, 426, 427, 428, 429, 430, 431, 432, 435, 436], "result_fixed_angl": 325, "resulting_circuit": [59, 64, 67, 73], "retain": 5, "retri": 401, "retriev": [27, 42, 65, 71, 241, 325, 409], "retrieve_job": [71, 74], "return": [1, 3, 9, 10, 14, 16, 17, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 50, 51, 52, 53, 59, 60, 62, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 80, 81, 82, 84, 85, 89, 103, 104, 107, 108, 109, 111, 112, 113, 116, 118, 120, 121, 129, 130, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 239, 240, 241, 242, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 326, 327, 329, 331, 332, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 412, 427], "return_matric": 182, "reus": [13, 30, 272], "rev": [243, 249, 363, 365, 366], "revers": [1, 5, 15, 20, 39, 44, 46, 258, 269, 279, 336, 350, 401, 435], "reverse_bit_ord": [262, 269], "revert": [1, 109, 156], "review": 23, "revis": 5, "revmodphi": 23, "rewir": 89, "rewrit": [7, 45, 46, 50, 51], "rewriting_method": 336, "rhel": 409, "rho": [225, 227, 363, 374, 386, 387, 388], "rho1": [367, 368], "rho2": [367, 368], "rho_": [348, 365, 366], "rho_0": [225, 227], "rho_1": [367, 368], "rho_2": [367, 368], "rho_i": 365, "rich": 18, "richardson": 436, "rigetti": [68, 165, 177, 178], "rigetti_agav": 165, "rigetti_aspen": [112, 165, 333], "right": [5, 10, 12, 23, 24, 31, 49, 50, 53, 104, 154, 157, 181, 185, 189, 200, 201, 205, 225, 227, 232, 233, 240, 258, 267, 269, 280, 285, 287, 289, 304, 313, 327, 329, 339, 348, 351, 363, 367, 375, 380, 382, 389, 399, 402, 418, 419, 420, 423], "right_pattern": [50, 53], "rightarrow": [1, 226, 228], "rightmost": 350, "riot": 5, "rippl": [230, 249], "risk": 5, "rm": 17, "rmp": 23, "robert": 48, "role": 399, "rolf": 48, "root": [5, 53, 137, 150, 246], "ross": 44, "rotat": [17, 46, 52, 53, 109, 113, 192, 194, 196, 231, 261, 281, 283, 286, 299, 301, 333, 335, 345, 390, 391, 395, 399, 402, 403, 424], "rotation_g": 194, "rotosolv": 345, "round": [96, 435], "rout": [16, 47, 234, 242, 262, 264, 265, 266, 267, 269, 272, 401], "rout_0": 241, "rout_1": 241, "rout_2": 241, "routin": [1, 9, 10, 15, 16, 17, 28, 41, 109, 194, 196, 198, 203, 232, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 258, 260, 261, 272, 273, 274, 337, 403, 409], "routine_1": 241, "routine_state_prep": 241, "routop_l": 272, "row": 88, "royalti": 5, "rpf": 89, "rpge17": 253, "rpn": [140, 163], "rst": [0, 7, 8, 9, 13, 18, 22, 27, 28, 33, 39, 44, 45, 49, 411, 417, 418, 427, 433, 438], "rueschlikon": [165, 172], "ruiz": 253, "rule": [5, 44, 46, 49, 50, 51, 53, 109, 113, 203, 305, 321, 329, 345, 409, 436], "run": [0, 1, 2, 3, 5, 11, 14, 23, 24, 27, 35, 36, 37, 39, 41, 44, 52, 68, 99, 109, 113, 116, 215, 216, 218, 219, 220, 221, 223, 261, 271, 278, 281, 283, 286, 299, 301, 321, 322, 323, 327, 331, 341, 344, 351, 356, 401, 409, 412, 413, 424, 436, 438], "run_fci": 204, "runtim": [5, 70, 403, 409, 412], "runtime_linux": 48, "rx": [2, 10, 17, 31, 42, 45, 52, 53, 54, 76, 109, 231, 268, 271, 316, 317, 325, 327, 335, 345, 350, 395, 402, 409, 435, 436], "rx_conj": 54, "rx_i": 31, "rx_minus_left": 402, "rx_minus_right": 402, "rx_plus_left": 402, "rx_plus_right": 402, "rx_rz": 271, "rxx": 76, "ry": [3, 10, 11, 17, 41, 43, 52, 54, 76, 109, 182, 194, 231, 241, 318, 337, 345, 350, 402, 435, 436], "ry_minus_left": 402, "ry_minus_right": 402, "ry_plus_left": 402, "ry_plus_right": 402, "ryd": [217, 283, 286, 299, 301, 409, 417, 426, 427], "ryd_job": [283, 286, 299, 301, 426], "rydber": 409, "rydberg": [283, 286, 299, 301, 417, 426, 427], "rz": [10, 11, 17, 42, 43, 45, 46, 52, 53, 54, 76, 88, 90, 182, 225, 227, 230, 231, 261, 271, 308, 316, 317, 318, 327, 335, 345, 350, 396, 402, 436], "rz_minus_left": 402, "rz_minus_right": 402, "rz_plus_left": 402, "rz_plus_right": 402, "rzz": 76, "s11128": [48, 253], "s_": [23, 24, 34, 182, 289], "s_i": [352, 426], "s_j": [352, 426], "sa": [4, 5, 23, 25, 34, 280, 283, 284, 285, 286, 287, 288, 299, 300, 301, 304, 418, 419, 420, 421, 422, 423], "sa_qpu": [419, 420, 421, 422, 423], "sabr": 336, "saeedi": 48, "saemlessli": 331, "safe": [52, 238, 403], "sai": [16, 54, 194, 268], "said": 436, "sake": [435, 436], "sam": [289, 424], "same": [5, 9, 10, 14, 16, 19, 21, 22, 23, 29, 31, 50, 51, 53, 54, 71, 89, 103, 109, 113, 118, 122, 140, 191, 202, 225, 226, 227, 228, 229, 241, 243, 261, 320, 329, 333, 339, 341, 345, 393, 399, 403, 409, 417, 432, 436], "sampl": [0, 1, 2, 8, 9, 11, 16, 21, 26, 28, 30, 31, 32, 33, 35, 39, 40, 42, 46, 75, 79, 81, 82, 102, 103, 109, 113, 135, 153, 154, 156, 158, 217, 232, 264, 265, 268, 269, 271, 284, 285, 287, 288, 294, 295, 296, 297, 298, 304, 321, 325, 337, 342, 348, 350, 351, 353, 391, 399, 409, 410, 412, 419, 420, 421, 422, 423, 426, 427], "sample_subset": 350, "sampler": [75, 412], "sampling_frequ": 154, "samuel": 249, "sat": [25, 278], "satfisfi": 41, "satisfactori": 5, "satisfi": [5, 12, 278, 282, 408], "save": [16, 40, 46, 155, 242, 261, 333, 412], "save_account": 412, "scalabl": 289, "scalar": [19, 20, 26, 32, 156, 226, 228, 268, 363, 407], "scale": 3, "sched": 158, "schedul": [0, 2, 8, 18, 21, 23, 24, 33, 34, 35, 103, 113, 154, 226, 228, 283, 286, 289, 290, 292, 299, 301, 408, 409, 417, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "schedule1": 20, "schedule2": 20, "schedule_gener": 278, "schedulegener": 278, "schema": [383, 385], "scheme": [11, 15, 43], "schloss": 241, "schmidt": 363, "scienc": [18, 44, 241], "scipi": [3, 39, 43, 153, 321, 344, 408], "scipy_arg": [428, 429, 430, 431, 432], "scipyminimizeplugin": [2, 3, 31, 43, 281, 283, 286, 299, 301, 321, 325, 409, 427, 428, 429, 430, 431, 432, 435, 436], "scope": [13, 16, 40, 238, 262, 263, 264, 265, 266, 267, 269, 270, 272, 408, 409], "score": [51, 295, 336, 339], "screen": 40, "script": 416, "seamless": [417, 438], "search": [1, 41, 53, 203, 232, 401, 403, 408, 425], "sec": 418, "second": [1, 15, 16, 23, 24, 29, 30, 31, 45, 50, 53, 152, 161, 168, 191, 193, 198, 216, 230, 245, 257, 283, 286, 299, 301, 306, 308, 336, 351, 363, 365, 366, 367, 368, 391, 399, 402, 403, 418, 419, 421, 422, 428, 429], "second_half": 1, "section": [0, 1, 2, 3, 5, 7, 9, 10, 14, 17, 18, 22, 25, 26, 31, 33, 35, 39, 40, 42, 43, 44, 45, 51, 57, 88, 89, 109, 216, 222, 230, 280, 284, 285, 287, 300, 304, 305, 310, 332, 335, 336, 339, 343, 409, 413, 417, 418, 426, 435, 437], "secur": 5, "see": [1, 4, 5, 17, 19, 22, 23, 26, 29, 30, 31, 34, 41, 45, 50, 51, 52, 81, 89, 92, 93, 94, 109, 113, 140, 193, 196, 202, 213, 229, 235, 241, 261, 264, 265, 266, 268, 269, 271, 276, 285, 287, 288, 300, 304, 327, 330, 333, 335, 337, 338, 340, 344, 346, 373, 399, 401, 403, 409, 424, 434, 435, 436], "seed": [23, 24, 54, 154, 333, 346, 350, 352, 401, 404, 405, 409, 439], "seek": 5, "seem": 14, "seen": [24, 26, 41, 53, 89, 283, 331, 426, 434, 435, 436], "segment": [6, 342, 409], "seiichiro": 249, "select": [2, 50, 51, 113, 181, 201, 205, 308, 323, 336, 339, 409, 433, 435, 436], "select_active_orbit": 181, "select_active_spac": [201, 202, 435], "select_excitation_oper": 437, "self": [10, 31, 35, 40, 41, 264, 269, 303, 338, 350, 402, 407, 412], "sell": 5, "semant": [0, 9, 27, 39, 151, 438], "send": [18, 35, 40, 48, 63, 65, 103, 137, 158, 409, 419, 420, 421, 422, 423], "sens": [45, 350], "sensit": [43, 436], "sent": [5, 12, 18, 22, 28, 62, 64, 65, 216, 218, 219, 220, 221, 223, 283, 286, 299, 301, 348, 357], "sep": 44, "sep_measur": [59, 64, 67, 73], "separ": [5, 14, 23, 50, 59, 64, 67, 73, 230, 350, 437], "septemb": 409, "seqoptim": [43, 182, 321, 436], "sequenc": [8, 9, 13, 16, 17, 45, 52, 109, 231, 241, 261, 321, 395], "sequenti": [0, 1, 3, 11, 39, 345, 408, 409, 433, 436], "sequential_round_count": 96, "seri": [8, 28, 203], "serial": [12, 17, 28, 32, 35, 40, 79, 80, 103, 107, 109, 113, 156, 160, 409], "serializ": [107, 108, 109, 112, 156, 157, 161, 163], "serv": [31, 33, 39, 116, 216, 222, 322, 351, 356, 400], "server": [31, 33, 35, 39, 40, 75, 90, 116, 117, 215, 216, 222, 321, 322, 343, 349, 351, 356, 357, 401], "server_typ": [116, 216, 322, 351, 356], "servic": [5, 12, 31, 75, 352, 409], "set": [1, 2, 5, 10, 12, 13, 17, 28, 29, 31, 35, 39, 41, 42, 43, 44, 46, 49, 51, 53, 54, 59, 64, 67, 68, 73, 75, 77, 81, 88, 89, 103, 109, 110, 112, 118, 119, 121, 129, 130, 137, 140, 151, 156, 157, 158, 161, 182, 187, 190, 198, 201, 203, 204, 205, 206, 225, 231, 238, 242, 259, 261, 264, 266, 269, 271, 272, 273, 278, 279, 281, 282, 283, 286, 289, 299, 301, 306, 308, 319, 320, 324, 326, 327, 331, 332, 336, 338, 339, 341, 342, 344, 345, 346, 350, 383, 391, 397, 399, 400, 401, 403, 405, 408, 409, 418, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 436, 437], "set_ancilla": [15, 16, 272], "set_circuit_gener": [10, 130], "set_compile_attribut": 339, "set_dag": 231, "set_gate_set": 242, "set_gate_tim": [51, 276], "set_matrix_gener": [10, 130], "set_nbqbit": 161, "set_nniz": [276, 277], "set_num_thread": 350, "set_opt": 344, "set_phi_to_0": 198, "set_qpu": [68, 77], "set_qreg": 157, "set_valu": [16, 269, 320], "settl": [5, 34], "setup": 292, "sever": [1, 5, 9, 12, 28, 31, 32, 35, 36, 45, 46, 50, 53, 74, 79, 81, 82, 103, 108, 109, 113, 140, 308, 320, 321, 345, 408, 434, 436], "sgd": 436, "shall": [5, 35, 327], "shape": [80, 201, 202, 241, 268, 271, 351, 389, 399, 424, 435], "share": [5, 42, 51, 56, 85, 86], "shell": 155, "shift": [10, 17, 20, 109, 113, 226, 228, 345, 409, 417, 436], "shift_jump_oper": [226, 228], "shift_qbit": [109, 113], "shor": 246, "short": 81, "shorter": [35, 46], "shorthand": 26, "shot": [2, 28, 29, 30, 33, 35, 43, 109, 113, 157, 158, 182, 203, 351, 412, 436], "should": [2, 5, 16, 22, 31, 33, 35, 39, 40, 41, 47, 50, 51, 53, 59, 64, 67, 73, 74, 89, 109, 113, 137, 153, 154, 158, 186, 187, 203, 204, 206, 231, 236, 237, 242, 243, 250, 259, 260, 261, 264, 266, 270, 271, 273, 280, 281, 283, 286, 287, 299, 301, 304, 308, 319, 323, 324, 325, 327, 331, 332, 338, 342, 345, 352, 356, 390, 391, 396, 401, 403, 409, 417, 434, 435, 437], "show": [28, 109, 203, 272, 418, 419, 422, 426, 435, 436], "showcas": 27, "shown": [348, 418, 428, 429, 430, 431, 432], "shuffl": 109, "siam": 191, "side": [31, 35, 39, 40, 50, 53, 109, 341], "sigma": [185, 191, 195, 201, 434], "sigma_": [23, 26, 376], "sigma_1": [185, 201], "sigma_2": [185, 201], "sigma_i": [3, 26, 289, 374], "sigma_v": [299, 409], "sigma_x": [3, 11, 19, 26, 43, 289, 374, 399, 424, 425], "sigma_z": [3, 19, 26, 31, 41, 268, 282, 289, 303, 374, 399], "sign": [1, 52, 109, 116, 203, 216, 283, 322, 348, 351, 356, 402], "signa": 129, "signal": [20, 154], "signatur": [10, 17, 109, 129, 234, 242], "signifi": [88, 261], "signific": [156, 258, 269, 350, 399], "significantli": 333, "sigsegv": 409, "similar": [5, 17, 18, 24, 45, 193, 219, 220, 223, 271, 280, 285, 287, 304, 409], "similarili": 268, "similarli": [10, 12, 16, 17, 21, 236, 269, 270, 286, 357, 428, 429, 430, 431, 432, 434], "simmon": 44, "simon": 44, "simpl": [0, 1, 16, 17, 19, 25, 26, 28, 29, 30, 31, 39, 41, 47, 50, 51, 107, 108, 109, 112, 116, 151, 156, 157, 161, 212, 216, 261, 271, 293, 303, 322, 327, 334, 351, 353, 356, 381, 408, 409, 424, 425, 428, 429, 430, 431, 432, 435, 436], "simplefilt": 409, "simpleinitialst": [289, 290], "simpler": [41, 289], "simplest": [16, 43, 109], "simpleterm": 350, "simplfi": 14, "simpli": [19, 21, 41, 45, 46, 163, 261, 264, 268, 283, 292, 293, 330, 424, 439], "simplic": [10, 435, 436], "simplif": 50, "simplifi": [1, 13, 46, 229, 230, 305, 434, 435], "simul": [0, 3, 5, 7, 9, 10, 12, 18, 21, 22, 23, 25, 28, 29, 32, 34, 35, 51, 56, 68, 71, 72, 78, 90, 103, 109, 157, 158, 164, 203, 211, 230, 231, 243, 261, 280, 283, 284, 285, 286, 287, 288, 289, 299, 300, 301, 304, 324, 327, 336, 339, 341, 350, 351, 352, 353, 417, 419, 420, 421, 422, 423, 438], "simulat": [91, 409], "simulate_circuit": 350, "simulated_ann": [352, 419, 420, 421, 422, 423], "simulatedann": [34, 135, 283, 286, 299, 301, 349, 409, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432], "simultan": [51, 321, 346], "simultaneous_perturbation_stochastic_approxim": 346, "simutil": 103, "sin": [17, 137, 140, 151], "sinc": [12, 16, 28, 45, 46, 47, 50, 51, 53, 71, 90, 226, 228, 230, 237, 242, 243, 264, 268, 272, 382, 417, 425, 428, 436], "singapor": [165, 173], "singl": [14, 16, 17, 20, 28, 31, 34, 41, 42, 45, 46, 49, 50, 51, 54, 68, 71, 72, 75, 89, 103, 116, 163, 181, 187, 191, 201, 216, 226, 228, 229, 230, 232, 241, 292, 315, 321, 322, 323, 329, 332, 337, 338, 340, 344, 345, 346, 350, 351, 356, 391, 399, 434], "single_qubit": 229, "singleton": 303, "sinu": [137, 149], "site": [193, 195, 434], "situat": 399, "six": [5, 158], "sixti": 5, "size": [35, 40, 53, 89, 191, 201, 203, 211, 212, 213, 214, 220, 241, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 261, 272, 280, 285, 287, 288, 296, 297, 298, 300, 308, 327, 329, 332, 333, 336, 339, 340, 384, 388, 401, 405, 418, 419, 420, 422, 429, 430], "size_initial_vector_spac": 340, "size_interv": [203, 435], "size_slic": 336, "skeleton": [35, 230], "sketch": 333, "skip": [46, 68, 75, 230, 237, 242, 261, 399], "skip_transpil": 75, "slack": 410, "slater": [192, 196], "sleep": 412, "slic": 279, "slice": [236, 270, 279, 336], "slightli": [41, 409], "slow": 424, "slower": 436, "slowli": 425, "small": [50, 181, 182, 197, 203, 204, 213, 289], "small_group": 213, "smaller": [213, 269, 418], "smallest": [423, 431], "smart_dagg": 109, "smarter": 109, "smartli": 401, "snippet": [0, 3, 16], "so": [1, 3, 5, 8, 16, 28, 34, 41, 48, 50, 51, 52, 53, 54, 85, 109, 158, 191, 193, 194, 201, 203, 272, 286, 299, 345, 353, 409, 417, 418, 428, 434, 435, 436], "softwar": [5, 33, 409, 438], "sold": 5, "sole": [5, 10], "solut": [22, 31, 34, 190, 283, 284, 285, 287, 288, 289, 296, 304, 352, 401, 418, 419, 420, 421, 422, 423, 424, 425, 427], "solution_configur": [136, 419, 420, 421, 422, 423], "solv": [1, 22, 24, 25, 34, 48, 51, 181, 182, 215, 217, 218, 219, 220, 221, 223, 278, 280, 284, 285, 287, 288, 294, 295, 300, 302, 304, 321, 336, 401, 408, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 436], "solver": [34, 41, 45, 280, 284, 285, 287, 288, 300, 304, 336, 352, 418, 437], "some": [0, 4, 5, 7, 9, 11, 14, 15, 16, 17, 18, 20, 21, 26, 28, 29, 31, 33, 34, 35, 39, 40, 41, 46, 48, 50, 51, 53, 54, 79, 90, 109, 112, 113, 153, 154, 155, 158, 181, 198, 216, 230, 231, 237, 240, 241, 244, 247, 248, 259, 260, 261, 264, 265, 269, 271, 272, 273, 279, 281, 283, 286, 290, 292, 293, 299, 301, 305, 308, 313, 321, 322, 324, 327, 328, 331, 333, 339, 342, 358, 390, 391, 392, 399, 401, 403, 406, 409, 417, 418, 425, 428, 429, 430, 431, 432, 435], "some_random_point": 268, "someon": 4, "someth": [40, 409], "sometim": [16, 23, 47, 367, 399], "sort": [18, 107, 109, 113, 158, 188, 190, 201, 397, 409], "sourc": [17, 41, 62, 79, 181, 409, 418, 433, 435], "space": [1, 23, 41, 103, 153, 181, 201, 205, 261, 358, 409, 433, 435, 436], "span": [103, 153], "spars": [153, 186, 187, 206, 350, 388, 409], "spatial": 205, "speak": 28, "spec": [31, 40, 42, 45, 48, 109, 112, 113, 216, 217, 218, 219, 220, 221, 222, 223, 322, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 339, 341, 342, 343, 347, 348, 391, 392, 406], "special": [5, 23, 34, 87, 218, 219, 220, 221, 223, 278, 280, 284, 285, 287, 288, 290, 300, 304, 321, 390, 438], "specif": [5, 18, 23, 31, 32, 44, 48, 181, 225, 227, 250, 326, 335, 336, 339, 341, 348, 350, 351, 382, 409, 424, 426], "specifi": [1, 2, 3, 14, 16, 17, 18, 19, 25, 26, 28, 34, 45, 52, 71, 72, 79, 81, 82, 84, 109, 154, 160, 161, 203, 224, 225, 226, 227, 228, 230, 232, 241, 242, 250, 252, 254, 255, 256, 257, 261, 267, 268, 271, 280, 283, 286, 290, 299, 301, 325, 337, 352, 399, 403, 409, 419, 420, 421, 422, 423, 424, 425, 439], "spectral": [154, 380, 382], "spectral_funct": 382, "speed": [19, 181, 434], "spend": 391, "spin": [7, 23, 34, 56, 103, 182, 186, 187, 188, 190, 193, 195, 200, 204, 206, 208, 209, 210, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 352, 409, 418, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 435], "spin_1_subset": 422, "spin_comutator_matrix": 434, "spin_hamiltonian": [208, 209, 210], "spin_minus_1_subset": 422, "spinhamiltonian": [181, 182, 184, 186, 187, 200, 203, 208, 209, 210, 347, 434, 436], "spins_arrai": 136, "spins_to_integ": 134, "split": [35, 36, 337, 437], "splitter": 408, "splitting_method": 337, "spmatrix": 153, "spsa": [321, 346], "spsaminimizeplugin": 321, "sqa": [23, 24, 33, 217, 218, 219, 220, 221, 223, 280, 283, 284, 285, 286, 287, 288, 299, 300, 301, 304, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432], "sqa_best_paramet": [428, 429, 430, 431, 432], "sqa_best_parameters_dict": [428, 429, 430, 431, 432], "sqa_job": [283, 286, 299, 301], "sqaqpu": [24, 283, 286, 299, 301, 419, 420, 421, 422, 423], "sqrt": [1, 17, 28, 29, 30, 104, 137, 157, 258, 367, 368, 374, 375, 380, 382, 388], "sqrtswap": [10, 17, 45, 54, 350], "squar": [137, 150, 165, 179, 367, 377, 384, 401], "squaregriddevic": 165, "ssl": [116, 117, 216, 222, 322, 343, 351, 356, 357], "ssl_ca": [116, 216, 322, 351, 356], "ssl_cert": [116, 117, 216, 222, 322, 343, 351, 356, 357], "ssl_kei": [116, 117, 216, 222, 322, 343, 351, 356, 357], "stabil": [44, 46, 390, 406], "stack": [3, 10, 30, 31, 32, 39, 40, 41, 43, 47, 109, 112, 113, 182, 215, 216, 217, 218, 219, 220, 221, 223, 272, 321, 324, 325, 331, 333, 334, 344, 348, 409, 427, 435, 436, 438], "stack1": 47, "stack2": 47, "stack_default": 327, "stack_improv": 327, "stage": [40, 41, 42, 45, 52, 203, 261, 266, 335], "stai": [14, 327, 328], "stand": [17, 43, 203], "standalon": 333, "standard": [1, 23, 28, 29, 30, 45, 46, 54, 77, 104, 137, 157, 224, 229, 231, 267, 289, 331, 333, 335, 350, 377, 378, 401, 436], "star": 182, "start": [1, 4, 16, 17, 21, 23, 24, 29, 30, 31, 33, 35, 39, 40, 41, 43, 45, 46, 47, 79, 109, 116, 203, 216, 222, 242, 265, 269, 280, 284, 285, 287, 288, 289, 290, 300, 304, 322, 327, 334, 343, 351, 356, 360, 397, 408, 424, 435, 438], "start_ham": 291, "startegi": 409, "startup": 409, "state": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 21, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 38, 40, 46, 50, 79, 81, 82, 84, 85, 100, 102, 103, 104, 109, 113, 114, 135, 136, 153, 156, 157, 158, 181, 182, 184, 189, 197, 203, 204, 224, 225, 227, 232, 240, 241, 258, 260, 264, 266, 268, 269, 271, 272, 273, 274, 282, 283, 289, 290, 291, 292, 293, 325, 348, 350, 351, 353, 358, 367, 388, 390, 391, 392, 399, 406, 409, 419, 420, 421, 422, 423, 424, 425, 433, 436, 437], "state_prep": [225, 227, 232, 240], "state_prep_circ": 182, "state_vec": [81, 82, 84], "statement": [5, 15, 266, 268, 272, 351], "stateprepar": 350, "statevector": [32, 40, 156, 342, 367, 409], "statevectorcpudoubl": 350, "static": [10, 109, 140, 161, 271, 279, 282, 283, 286, 289, 299, 301, 320, 409], "statist": [28, 54, 109, 246, 409], "statu": [3, 74, 409], "statutori": 5, "stdin": [23, 24, 48, 62, 112, 353, 419, 420, 421, 422, 423, 434], "stdout": 409, "steepest": 436, "steer": 18, "steiner": 333, "steiner_gauss": 401, "steiner_method": 333, "step": [11, 12, 14, 27, 35, 39, 41, 45, 184, 200, 203, 230, 232, 261, 329, 339, 342, 350, 352, 399, 435, 436], "steven": 249, "still": [14, 18, 25, 109, 203, 261, 269, 271, 341, 342, 350, 437], "stim": [391, 392, 393, 406], "stinespr": 360, "stochast": [34, 154, 157, 321, 346, 436], "stock": 5, "stop": [91, 261, 323, 326, 329, 346], "stop_condit": 346, "stop_crit": 329, "stoppag": 5, "store": [12, 15, 16, 17, 41, 42, 46, 54, 79, 85, 88, 89, 109, 111, 113, 153, 156, 158, 163, 181, 189, 237, 256, 260, 261, 266, 267, 273, 280, 284, 285, 287, 288, 300, 304, 338, 351, 409, 412], "str": [35, 62, 71, 72, 75, 88, 89, 92, 93, 94, 96, 97, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 129, 130, 140, 151, 153, 156, 158, 160, 161, 163, 186, 187, 193, 200, 203, 204, 213, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 242, 259, 261, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 299, 300, 301, 304, 308, 309, 311, 322, 327, 329, 330, 332, 335, 336, 337, 338, 339, 340, 343, 347, 348, 350, 351, 356, 357, 373, 374, 382, 386, 387, 389, 391, 399, 401, 403, 407, 409, 419, 420, 421, 422, 423, 436], "straight": [19, 203], "straightforward": [16, 23, 30, 39, 109, 290], "straightfoward": 17, "strat_arg": 327, "strategi": [44, 45, 193, 211, 230, 279, 281, 283, 286, 299, 301, 327, 333, 391, 399, 403, 424], "stream": 65, "strength": 348, "strict": [88, 336, 339], "strictli": [46, 51, 333], "strike": 5, "string": [1, 17, 42, 53, 62, 89, 109, 111, 140, 158, 160, 203, 225, 227, 259, 261, 283, 286, 289, 299, 301, 307, 329, 347, 373, 374, 380, 382, 388, 389, 399, 407, 409, 425], "strip": 46, "strong": 434, "strongli": [17, 345], "structur": [1, 12, 17, 31, 32, 80, 86, 89, 96, 97, 99, 101, 103, 109, 151, 158, 181, 186, 187, 201, 203, 204, 231, 241, 259, 261, 281, 283, 286, 289, 299, 301, 305, 308, 324, 331, 333, 338, 339, 350, 351, 356, 402, 426, 427, 434, 435], "struggl": 18, "student": 5, "studi": [202, 204, 409, 433, 435, 436], "su": 52, "sub": [5, 10, 45, 46, 51, 109, 110, 244, 245, 246, 247, 248, 320], "sub_register_1": 306, "sub_register_2": 306, "subcircuit": [14, 15, 17, 50, 88, 109, 230, 242, 272, 308, 328, 339, 399], "subclass": 356, "subclaus": 282, "subgat": [88, 109], "subgraph": [418, 419, 420, 421, 428, 429, 430, 431], "subject": [5, 280], "sublicens": 5, "submatric": [242, 261], "submatrices_onli": [109, 242, 261, 409], "submiss": [5, 31, 409], "submit": [0, 1, 2, 3, 5, 16, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 44, 48, 68, 71, 72, 74, 75, 90, 109, 113, 182, 232, 325, 327, 331, 336, 341, 344, 350, 351, 353, 356, 357, 409, 412, 413, 419, 420, 421, 422, 423, 427, 435, 436], "submit_job": [68, 331, 351, 352, 356], "submodul": [9, 230, 437], "subresult": 28, "subroutin": [14, 88, 324], "subsect": 16, "subsequ": [5, 327, 434], "subset": [28, 81, 84, 287, 289, 298, 337, 350, 403, 408, 418, 422, 427, 428, 429, 432], "subspac": [182, 384, 408, 425], "substanti": 5, "substitut": 5, "substract": [262, 409], "subtract": 23, "subtyp": 39, "success": [3, 74, 79, 346], "successfulli": 3, "successor": 5, "sugar": 16, "suggest": 203, "sugisaki": [197, 198], "suit": [3, 181], "sum": [17, 20, 23, 24, 31, 39, 43, 47, 113, 153, 193, 230, 241, 278, 279, 283, 289, 325, 333, 338, 399, 409, 418, 422, 425], "sum_": [1, 23, 24, 34, 183, 186, 191, 193, 195, 201, 207, 241, 258, 283, 289, 299, 351, 352, 386, 387, 388, 403, 409, 426, 434], "sum_i": [11, 18, 113, 158, 195, 241, 289, 352, 374, 424, 426], "sum_k": 371, "sum_v": [299, 409], "summar": [32, 54], "super": [35, 41], "superconduct": [45, 165], "superimpos": 5, "superposit": [1, 158, 266, 289], "supersed": 5, "supplementari": 4, "suppli": [71, 72, 382], "supplier": 5, "support": [1, 2, 4, 5, 6, 7, 12, 15, 28, 30, 34, 35, 39, 42, 45, 48, 54, 76, 90, 109, 112, 113, 130, 160, 203, 241, 286, 299, 301, 350, 393, 405, 409, 416], "suppos": [71, 72, 77, 92, 93, 94], "suppress": 409, "supremaci": 327, "sure": [4, 289], "surround": 194, "suzuki": 408, "svg": 155, "svgwrite": 4, "swap": [10, 17, 45, 46, 47, 50, 51, 53, 54, 76, 246, 306, 319, 321, 336, 339, 350, 402], "swap_left": 402, "swap_right": 402, "swarm": [321, 340], "swarm_numb": 340, "swd11": [48, 336], "switch": 34, "sycamor": [165, 167], "symbol": [137, 140, 144], "symengin": 409, "symmetr": [23, 24, 286, 299, 301, 426, 439], "synchron": [31, 33, 39, 71, 72, 412], "syndrom": [44, 46, 391, 392, 399, 401, 406], "syntact": 16, "syntax": [5, 9, 17, 50, 51, 88, 109, 230, 259, 409], "synth": [279, 403], "synthes": [44, 46, 279, 281, 283, 286, 299, 301, 333, 390, 399, 401, 403], "synthesi": [44, 46, 47, 48, 279, 333, 391, 392, 399, 401, 403, 406, 408, 424], "synthesize_fin": 403, "synthesize_stabilizer_st": 390, "synthoplin": [45, 47, 55, 56, 192, 333, 335, 409], "system": [5, 6, 7, 8, 15, 18, 22, 23, 33, 34, 41, 44, 48, 181, 188, 189, 190, 203, 241, 289, 299, 358, 409, 425, 434, 435, 436], "systemat": [261, 299], "t": [1, 2, 5, 10, 11, 16, 17, 18, 19, 20, 21, 34, 41, 43, 44, 45, 48, 50, 53, 54, 59, 64, 67, 71, 73, 76, 82, 109, 113, 140, 151, 154, 158, 163, 184, 185, 193, 200, 201, 203, 226, 228, 261, 276, 283, 286, 289, 299, 301, 332, 350, 352, 380, 382, 393, 416, 419, 420, 421, 422, 423, 425, 428, 429, 430, 431, 432, 435, 436], "t_": [188, 195, 382, 399], "t_1": 380, "t_f": 154, "t_loc": 193, "t_mat": [195, 435], "t_phi": 382, "t_variabl": [19, 20, 21], "tab": [62, 111], "tabl": [4, 62, 336, 392, 394, 401, 403, 404, 408, 409], "table_impl": 401, "tableau": [390, 391, 392, 393, 395, 402, 406, 407], "tableaux": 390, "tabmodul": 62, "tackl": [23, 48, 417, 418], "tag": 272, "takahashi": 249, "take": [2, 4, 12, 16, 21, 29, 31, 33, 34, 35, 39, 40, 41, 43, 49, 51, 90, 137, 142, 143, 149, 159, 203, 224, 231, 241, 268, 271, 272, 325, 332, 338, 351, 388, 399, 401, 424, 425, 426, 435], "taken": [198, 225, 403], "talk": 391, "tameem": 23, "tangent": 141, "tani": 249, "target": [31, 42, 54, 89, 109, 113, 161, 203, 212, 278, 291, 302, 311, 335, 392, 401, 402, 406, 417, 424, 425], "target_entangling_g": 311, "target_gate_set": [45, 335], "target_reg_s": 350, "task": [0, 337, 417], "tau": [380, 382], "tau_k": 323, "technic": 5, "techniqu": [46, 279, 345, 417, 426, 436], "technologi": [5, 44, 48], "tell": [68, 356], "temp": 352, "temp_max": [280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "temp_min": [280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "temp_t": [352, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "temparatur": 339, "temperatur": [34, 280, 284, 285, 286, 287, 288, 299, 300, 301, 304, 336, 339, 352, 382, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432], "tempor": 20, "temporari": [5, 16, 49, 267, 408], "temporarli": 35, "ten": 19, "tend": [23, 43], "tensor": [26, 160, 191, 229, 241, 329, 345, 384, 389, 436], "tensor_1q_channel": [373, 374], "tensordot": [85, 351], "tensori": 109, "term": [3, 4, 5, 11, 16, 19, 20, 21, 23, 24, 25, 30, 32, 35, 43, 103, 153, 181, 182, 187, 193, 195, 203, 206, 208, 209, 210, 219, 220, 223, 269, 279, 280, 281, 283, 285, 286, 287, 299, 301, 304, 337, 350, 393, 398, 399, 405, 409, 434, 435, 436], "termin": [3, 5, 103, 109, 110, 321], "terms_expectations_valu": 350, "test": [5, 34, 48, 113, 369, 370, 372, 409, 416, 418], "text": [5, 12, 261, 351, 416, 418], "textrm": [244, 246, 248], "tf": 154, "than": [1, 5, 25, 28, 31, 34, 35, 51, 53, 103, 113, 153, 160, 201, 269, 272, 279, 287, 304, 327, 333, 335, 336, 339, 346, 350, 391, 403, 409, 434, 436], "thank": [50, 52, 54, 81, 190], "thant": 409, "thatrepres": 284, "thei": [3, 5, 7, 8, 16, 23, 25, 26, 41, 47, 51, 54, 79, 80, 86, 103, 109, 124, 130, 224, 226, 228, 230, 231, 236, 261, 270, 272, 278, 287, 304, 323, 327, 331, 356, 357, 358, 409, 416, 424, 427, 434, 435], "them": [1, 2, 4, 5, 6, 8, 13, 15, 16, 18, 20, 22, 23, 49, 54, 109, 116, 188, 212, 215, 230, 272, 308, 320, 339, 345, 350, 399, 400, 409, 418, 422, 435], "themselv": 278, "theorem": [23, 425], "theoret": [241, 288], "theori": [5, 181, 190, 424, 435, 437], "therefor": [5, 6, 12, 14, 16, 18, 31, 33, 34, 39, 203, 418, 428, 429, 430, 431, 432], "thereof": 5, "thereund": 5, "theta": [2, 3, 10, 11, 17, 43, 45, 54, 109, 113, 182, 184, 231, 268, 271, 313, 315, 329, 345, 409, 435, 436], "theta_": [3, 182, 190, 436], "theta_0": 436, "theta_1": 436, "theta_2": 436, "theta_3": 436, "theta_4": 436, "theta_a": 190, "theta_i": [3, 329], "theta_init": 436, "theta_j": [113, 329], "theta_k": 323, "theta_list": 190, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 62, 64, 67, 71, 72, 73, 74, 75, 77, 78, 82, 86, 88, 89, 90, 91, 95, 98, 101, 103, 104, 109, 110, 112, 113, 116, 135, 137, 140, 151, 153, 154, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 186, 187, 188, 191, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 211, 215, 216, 217, 219, 220, 222, 223, 224, 226, 228, 230, 231, 232, 233, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 345, 346, 348, 350, 351, 353, 355, 356, 358, 360, 365, 380, 382, 390, 391, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 439], "thing": [1, 15, 23, 243, 333, 409], "think": [10, 203], "thinli": 194, "third": [5, 48, 57, 256, 308], "thoma": 249, "thorough": 435, "those": [5, 6, 26, 28, 36, 116, 259, 271, 327, 342], "though": [14, 350], "thread": [96, 99, 116, 216, 322, 350, 351, 356, 388, 409], "three": [6, 8, 30, 45, 88, 162, 230, 261, 313, 335, 337, 345, 399, 412, 417, 424, 434], "threshold": [28, 29, 35, 104, 109, 113, 158, 182, 201, 202, 205, 214, 261, 323, 327, 350], "threshold_1": [201, 202, 205, 435], "threshold_2": [201, 202, 205, 435], "thrift": [4, 90, 107, 108, 109, 112, 113, 117, 124, 140, 156, 157, 160, 161, 163, 222, 286, 299, 343, 357], "thrift_str": 140, "thriftresult": 156, "thrifttopologi": 161, "through": [5, 17, 27, 32, 39, 46, 204, 236, 238, 241, 259, 270, 272, 280, 284, 285, 286, 287, 288, 297, 298, 300, 304, 308, 323, 329, 333, 340, 344, 345, 346, 350, 357, 358, 387, 389, 408, 412, 415, 438], "throught": [350, 413, 414], "throw": 409, "thu": [1, 16, 28, 33, 46, 54, 69, 90, 203, 225, 227, 229, 241, 242, 261, 269, 271, 272, 286, 324, 330, 333, 341, 391, 399, 400, 403, 409, 425, 434, 436], "thumb": [46, 203], "ticket": [409, 410], "tild": [154, 226, 228, 234, 258, 382], "time": [0, 1, 4, 5, 10, 11, 13, 16, 18, 19, 20, 22, 28, 30, 32, 35, 36, 37, 40, 46, 50, 53, 88, 96, 103, 109, 116, 154, 158, 191, 200, 203, 216, 224, 225, 227, 244, 245, 246, 248, 251, 252, 256, 257, 261, 276, 283, 286, 291, 299, 301, 308, 322, 327, 333, 345, 346, 351, 352, 356, 358, 380, 381, 382, 384, 391, 397, 401, 408, 412, 418, 425, 436], "time_budget_sec": [283, 286, 299, 301], "timeout": 391, "timeplot": 155, "timoth": 44, "timoth\u00e9": 44, "tiron": 436, "titl": 5, "tmax": [19, 20, 21, 23, 158, 283, 286, 289, 291, 299, 301, 302, 419, 420, 421, 422, 423, 425], "tmax_expr": 19, "tmax_psi_0": 289, "tname": 158, "to_bqm": [283, 286, 299, 301, 439], "to_chi": [358, 388], "to_choi": [388, 389], "to_circ": [0, 1, 3, 9, 11, 12, 14, 15, 16, 29, 30, 31, 45, 46, 47, 48, 50, 51, 59, 64, 67, 73, 88, 90, 109, 110, 182, 230, 232, 241, 242, 243, 244, 245, 246, 250, 251, 252, 261, 272, 279, 308, 325, 327, 341, 353, 395, 409, 435, 436], "to_circ_arg": [279, 281, 283, 286, 299, 301], "to_combinatorial_problem": [23, 24, 286, 299, 301], "to_cpp": [107, 113], "to_electron": [187, 434], "to_fermion": [186, 434], "to_is": [24, 25, 283, 301], "to_job": [0, 1, 2, 3, 11, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 34, 40, 41, 43, 45, 46, 47, 48, 52, 54, 90, 109, 158, 160, 182, 232, 283, 286, 299, 301, 325, 327, 333, 341, 353, 409, 419, 420, 421, 422, 423, 425, 426, 427, 435, 436], "to_krau": [386, 387, 389], "to_matrix": [153, 409], "to_nx": [112, 161, 166], "to_pauli": [402, 407], "to_ptm": [387, 388], "to_qubo": [23, 25, 283, 286, 299], "to_spin": [186, 187, 434, 435], "to_thrift": [107, 108, 109, 112, 113, 140, 156, 161, 163], "tobject": [107, 108, 109, 112, 113, 156, 157, 161, 286, 299], "todai": 337, "todo": 35, "toffoli": [16, 17, 250, 252], "togeth": [5, 39, 47, 109, 113, 158, 278, 321, 335, 350, 418], "toi": 434, "token": [71, 72, 137, 151, 412], "tokyo": [165, 174], "tol": [3, 43, 229, 329, 344, 359, 369, 370, 371, 372, 427, 428, 429, 430, 431, 432, 436], "tol_vanishing_grad": 323, "toler": [329, 359, 369, 370, 371, 372], "too": [186, 187, 203, 206, 409, 434], "took": 29, "tool": [0, 1, 8, 9, 11, 12, 16, 31, 39, 43, 44, 45, 49, 50, 51, 62, 103, 181, 418, 433, 434, 438], "toolset": [0, 39], "top": 313, "topo": 161, "topolog": [44, 336], "topologi": [2, 35, 42, 44, 48, 103, 112, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 335, 336, 341, 342], "topologytyp": [48, 103, 161, 341], "tort": 5, "total": [45, 109, 187, 201, 202, 206, 213, 272, 348, 409], "touch": 409, "toward": 266, "tqdm": 350, "tqx": 426, "tr": [225, 227, 348, 367, 368, 384, 389], "tr_": 384, "trace": [32, 43, 339, 358, 364, 366, 368, 370, 371, 384, 388], "traceback": [23, 48, 62, 112, 353, 434], "traced_out_subspac": 384, "track": 5, "trade": 5, "trademark": 5, "tradeoff": 11, "tran": 17, "transfer": [5, 225, 226, 281, 283, 286, 299, 301, 358, 363, 365, 389], "transform": [5, 18, 39, 41, 48, 50, 88, 154, 186, 187, 200, 201, 203, 207, 232, 239, 240, 253, 258, 261, 283, 286, 299, 301, 308, 321, 347, 386, 408, 409, 433, 434, 435, 436], "transform_basi": [201, 435], "transform_integrals_to_new_basi": 181, "transform_to_bk_basi": [181, 347, 434], "transform_to_jw_basi": [181, 347, 434], "transform_to_parity_basi": [181, 347, 434], "transformation_matrix": 201, "transformobserv": 321, "translat": [5, 16, 20, 23, 24, 25, 34, 62, 69, 76, 134, 135, 136, 283, 286, 299, 301, 335, 409, 411, 439], "transmiss": [107, 113], "transmit": [41, 90, 156, 160, 331], "transpar": 46, "transpil": [39, 49, 54, 75, 409, 412], "transpos": [23, 24, 53, 88, 186, 187, 206, 276, 439], "trap": 45, "treat": 23, "treati": 5, "treatment": 41, "tree": [15, 230, 241, 259, 282, 333, 418], "tri": [2, 31, 34, 51, 335, 401], "trial": 190, "triangular": 426, "trigger": [5, 16, 90, 269, 333], "triplet": 338, "trivial": [41, 45, 51, 53, 241, 264, 337, 405, 425], "trotter": [181, 184, 200, 203, 280, 284, 285, 287, 288, 300, 304, 390, 399, 408, 409, 433], "trotteris": [181, 435], "true": [3, 9, 16, 35, 40, 45, 46, 47, 48, 50, 59, 62, 64, 67, 68, 73, 75, 79, 83, 88, 89, 104, 105, 106, 109, 110, 117, 151, 153, 156, 157, 158, 160, 182, 187, 198, 204, 222, 242, 261, 262, 264, 266, 267, 268, 269, 271, 273, 279, 281, 283, 286, 289, 295, 296, 297, 298, 299, 301, 308, 322, 324, 325, 326, 329, 331, 332, 333, 342, 343, 350, 353, 357, 363, 365, 370, 371, 382, 387, 388, 389, 391, 397, 399, 400, 403, 405, 407, 409, 425, 426, 436], "true_psi_0": 291, "truthi": 295, "try": [23, 41, 45, 47, 48, 53, 54, 90, 109, 158, 212, 281, 283, 286, 299, 301, 325, 327, 333, 336, 391, 400, 409, 410, 435], "ttype": [42, 48, 79, 80, 85, 87, 90, 95, 100], "tune": [12, 45, 345, 418], "tunnel": 191, "tupl": [35, 50, 53, 59, 64, 67, 73, 81, 82, 84, 85, 109, 124, 154, 158, 182, 183, 185, 201, 203, 204, 205, 207, 225, 226, 227, 286, 296, 297, 298, 299, 301, 308, 313, 320, 350, 352, 403, 407, 409], "tuppl": 19, "turn": [14, 16, 21, 41, 54, 103, 109, 230, 261, 268, 271, 311, 321], "tutori": [4, 48, 436], "twice": 113, "two": [0, 1, 5, 6, 12, 16, 17, 20, 23, 25, 26, 28, 34, 35, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 75, 89, 109, 113, 137, 145, 152, 161, 162, 181, 183, 185, 190, 193, 201, 202, 204, 207, 225, 227, 229, 230, 241, 245, 250, 252, 254, 256, 261, 266, 269, 272, 282, 283, 286, 289, 299, 308, 325, 327, 330, 337, 339, 342, 346, 351, 352, 358, 363, 365, 366, 368, 374, 388, 399, 408, 409, 419, 421, 422, 427, 428, 429, 435, 436], "two_body_integr": [183, 185, 190, 201, 202, 204, 207, 435], "type": [4, 5, 9, 13, 17, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 45, 46, 48, 51, 59, 64, 67, 68, 72, 73, 75, 79, 80, 81, 82, 84, 85, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 109, 112, 113, 116, 123, 124, 129, 130, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 272, 273, 274, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 299, 301, 303, 306, 308, 309, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 327, 329, 331, 338, 339, 340, 341, 344, 345, 346, 347, 350, 351, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 417, 427, 428, 429, 430, 431, 432, 434], "typeerror": 109, "typic": [23, 194, 203], "typo": 409, "typograph": 5, "u": [8, 14, 16, 17, 30, 45, 46, 47, 52, 54, 62, 76, 183, 185, 191, 193, 195, 201, 207, 230, 232, 240, 258, 268, 299, 313, 327, 391, 417, 434, 435, 436], "u2": 409, "u3": [45, 52, 312, 315, 335, 409], "u3_decomposit": 312, "u_": [201, 207, 258, 299, 409], "u_d": 1, "u_f": 1, "u_mat": 207, "ucc": [408, 409, 433, 434, 435, 437], "ucc_deprec": 437, "uccsd": [184, 399], "uint64": 350, "uminu": 137, "unauthor": 5, "unbias": 203, "unbound": 249, "uncertainti": 28, "unchang": [201, 205, 409], "unclear": 436, "uncomput": [1, 13, 16, 242, 272, 408], "unconstrain": [22, 34, 278, 301, 409], "uncorrel": 193, "under": [4, 5, 8, 12, 104, 109, 113, 158, 214, 296, 323, 338, 393, 408, 409, 436], "undergo": 82, "underli": [5, 14, 16, 17, 137, 151, 156, 230, 234, 264, 265, 266, 267, 269, 341, 401, 428, 429, 430, 431, 432, 434, 437], "underneath": [35, 268, 350], "understand": [31, 50, 51], "understood": [241, 268], "undirect": [161, 306, 319, 419, 420, 421, 423, 428, 429, 430, 431, 432], "undo": 1, "unexpect": 409, "unifi": [9, 45], "uniform": [1, 230, 239, 274], "uniform_distribut": 230, "unimpl": 16, "union": [5, 129, 200, 202, 208, 209, 210], "uniqu": [89, 96, 97, 303], "unit": [0, 2, 8, 27, 28, 34, 51, 299, 352, 358, 372, 380, 382, 409, 438], "unitari": [36, 38, 44, 49, 50, 52, 88, 109, 230, 232, 237, 240, 260, 313, 332, 333, 363, 403, 435, 436], "uniti": 269, "univers": [52, 321, 341, 408], "unknown": [91, 203], "unless": [5, 250, 252, 254, 255, 256, 257], "unlik": [109, 158], "unpack": [113, 156], "unrest": 5, "unrol": [1, 271], "unset": 399, "unspecifi": 109, "unstabl": 401, "unstructur": 1, "until": [41, 203, 211, 327], "untouch": 261, "unus": [272, 321, 342], "up": [11, 15, 16, 17, 19, 25, 27, 35, 39, 45, 46, 47, 109, 181, 191, 230, 261, 313, 333, 358, 359, 399, 401, 402, 407, 409, 418, 434, 436], "uparrow": [191, 193, 195], "upcom": 96, "updat": [5, 14, 17, 23, 34, 35, 44, 53, 68, 85, 109, 161, 201, 245, 261, 280, 284, 285, 287, 288, 300, 304, 320, 329, 333, 336, 339, 435, 436, 437], "update_angl": 53, "update_initial_ord": 336, "upon": [5, 15, 16, 29, 41, 90, 190, 303, 331, 333, 338], "upper": [41, 145, 201, 202, 203, 205, 426], "upper_bound": 145, "upstream": 334, "url": [23, 48, 116, 243, 249, 253, 322, 351, 356], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 62, 64, 67, 68, 71, 72, 73, 74, 75, 77, 81, 82, 85, 87, 88, 89, 90, 95, 98, 99, 103, 107, 108, 110, 112, 113, 116, 117, 118, 122, 124, 137, 151, 153, 154, 155, 156, 158, 159, 161, 163, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 185, 186, 187, 190, 192, 200, 201, 203, 204, 206, 207, 211, 216, 218, 219, 220, 221, 222, 223, 226, 228, 230, 231, 232, 233, 234, 236, 237, 241, 242, 243, 244, 245, 246, 250, 251, 252, 254, 256, 261, 264, 265, 266, 267, 269, 270, 271, 272, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 312, 314, 315, 316, 317, 318, 319, 320, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 351, 352, 357, 358, 363, 382, 388, 390, 391, 392, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437], "usabl": 261, "usag": [11, 16, 95, 109, 156, 222, 231, 241, 261, 271, 332, 333, 335, 336, 341, 343, 402, 408, 434], "use_choi": 365, "use_formula": 363, "use_nbthreads_heurist": 350, "use_result": 325, "use_sum_heurisit": 336, "use_sum_heurist": 336, "useabl": [70, 310], "useful": 90, "useless": [46, 50], "user": [0, 1, 4, 5, 27, 28, 31, 32, 33, 39, 40, 41, 42, 46, 49, 51, 53, 57, 59, 64, 67, 68, 71, 73, 85, 86, 109, 110, 112, 137, 156, 181, 215, 230, 305, 310, 321, 323, 326, 327, 335, 339, 345, 349, 357, 427, 435, 438], "user_custom_g": 329, "userwarn": [24, 419, 420, 421, 422, 423], "usr": 48, "usual": [9, 15, 16, 19, 23, 109, 156, 203, 225, 229, 327, 374, 403, 409, 424, 425, 436], "util": [123, 211, 246, 335, 399, 425, 437], "uv": [183, 185, 201, 202, 299, 434], "uvwx": [183, 185, 190, 201, 202, 434], "ux": [185, 201], "v": [5, 11, 16, 31, 113, 183, 185, 191, 201, 282, 299, 325, 409, 419, 420, 421, 423, 426, 428, 429, 430, 431, 432, 434], "v2": [5, 408], "v_dictionari": 109, "v_i": 191, "v_name": 109, "v_valu": 109, "val": [41, 264, 265, 269, 320], "valid": [35, 50, 51, 92, 93, 94, 103, 272, 418], "valiron": 44, "valu": [2, 3, 5, 9, 10, 17, 23, 28, 30, 32, 33, 34, 35, 39, 41, 43, 50, 52, 53, 68, 77, 79, 82, 84, 85, 89, 102, 108, 109, 111, 113, 135, 137, 138, 139, 141, 151, 152, 154, 156, 158, 159, 161, 163, 182, 203, 226, 228, 230, 231, 232, 246, 248, 250, 252, 254, 256, 259, 261, 264, 265, 266, 267, 268, 269, 271, 276, 282, 283, 286, 290, 293, 295, 299, 301, 303, 313, 320, 323, 329, 332, 334, 335, 336, 338, 339, 344, 345, 346, 348, 350, 351, 352, 353, 360, 403, 405, 425, 435, 436], "valuabl": 350, "value_data": [32, 40, 156, 409], "valueerror": [109, 226, 228], "values_data": 40, "van": 44, "var": [25, 34, 48, 52, 53, 54, 278, 282, 283, 305, 306, 308, 314, 315, 316, 317, 318, 332], "var1": 283, "var2": 283, "var_dic": [109, 140], "var_nam": [261, 338], "var_typ": [163, 261], "varepsilon_": [104, 157], "varepsilon_1": [201, 202, 205], "varepsilon_2": [201, 202, 205], "vari": [18, 399, 436], "variabl": [10, 14, 20, 21, 24, 25, 28, 34, 39, 41, 43, 52, 53, 56, 71, 72, 96, 107, 109, 110, 113, 118, 122, 154, 158, 259, 261, 268, 271, 278, 279, 281, 282, 283, 286, 291, 299, 301, 303, 305, 313, 314, 315, 316, 317, 318, 320, 329, 332, 338, 340, 344, 346, 352, 399, 403, 409, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 436], "variablenam": 338, "variablenamenotavail": [118, 261], "varianc": 436, "variant": [382, 399], "variat": [0, 2, 7, 9, 27, 28, 31, 32, 39, 41, 69, 103, 113, 182, 268, 278, 281, 283, 286, 299, 301, 325, 327, 329, 338, 340, 344, 345, 346, 399, 409, 424, 427, 433, 436, 438], "variational_circ": 41, "varieti": [18, 34, 36], "variou": [5, 8, 9, 12, 29, 52, 89, 109, 153, 165, 181, 204, 230, 231, 233, 238, 253, 261, 321, 330, 401, 418, 435], "varphi": 382, "ve": 11, "vec": [21, 43, 182, 184, 329], "vector": [0, 23, 32, 36, 37, 81, 82, 84, 85, 103, 114, 156, 164, 181, 189, 191, 203, 280, 286, 301, 323, 358, 359, 361, 362, 367, 378, 388, 407, 409], "vedral": [243, 249], "vee": 282, "venu": 5, "verbal": 5, "verbos": [46, 203, 334, 345, 364, 391], "veri": [14, 18, 27, 31, 46, 53, 109, 204, 237, 261, 290, 293, 334, 408, 409, 428, 429, 430, 431, 432, 434, 435, 436], "verifi": [16, 30], "vers": 413, "versa": [23, 51, 53, 411, 412, 414], "versatil": 438, "version": [4, 5, 17, 88, 140, 163, 181, 192, 202, 294, 295, 296, 297, 298, 327, 409, 416, 435, 437], "versu": [44, 154], "vert": [184, 351], "vertex": [16, 215, 223, 278, 294, 298, 304, 408, 418, 419, 420, 421, 426, 427, 428, 429, 430, 432], "vertex_cov": 304, "vertex_cover_ann_prob": 418, "vertex_cover_appl": 431, "vertex_cover_gener": 431, "vertex_cover_problem": [304, 423, 439], "vertexcov": [278, 298, 301, 423, 431, 439], "vertexcovergener": [215, 298, 423, 431], "vertexcoverresult": [223, 294], "vertic": [299, 418, 423, 431, 432], "vfidel": 363, "vi": 5, "via": [0, 9, 10, 14, 16, 17, 18, 20, 23, 24, 25, 26, 34, 44, 45, 49, 50, 103, 109, 113, 130, 137, 154, 158, 165, 200, 203, 233, 235, 242, 261, 262, 264, 265, 266, 267, 269, 271, 272, 278, 282, 283, 286, 289, 299, 301, 305, 322, 327, 329, 331, 335, 343, 390, 399, 401, 402, 403, 407, 409, 418, 424, 434, 435, 436, 437], "vice": [23, 51, 53, 411, 412, 413, 414], "view": [28, 350, 409], "violat": 5, "virtu": 5, "visual": [110, 296], "vlatko": [243, 249], "vmap": 161, "vmatrix": 17, "vmax": 137, "vname": 113, "void": 5, "volcan": 5, "vqe": [3, 39, 43, 182, 323, 334, 408, 409, 433, 436, 438], "vsolv": [278, 281, 283, 286, 299, 301], "vw": [185, 201, 299, 409], "w": [113, 140, 163, 183, 185, 201, 299, 409], "w1": [1, 272], "w2": [1, 272], "w_": [283, 426], "w_c": 382, "w_i": 426, "w_ir": 382, "wa": [5, 16, 36, 38, 45, 74, 82, 109, 154, 192, 264, 268, 269, 313, 339, 348, 354, 399, 409, 418], "wai": [5, 6, 8, 10, 12, 18, 25, 39, 40, 41, 43, 50, 52, 88, 89, 103, 109, 153, 231, 258, 299, 342, 350, 409, 418, 426, 435, 436], "wait": [110, 326, 412], "wall": [1, 31], "walsh_hadamard": 14, "wand": 4, "want": [3, 4, 23, 28, 39, 41, 50, 53, 154, 156, 182, 231, 242, 268, 271, 280, 281, 283, 286, 299, 300, 301, 308, 335, 345, 423, 431, 436], "war": 5, "warn": [3, 9, 268, 276, 277, 413], "warranti": 5, "wavefunct": [28, 103, 185, 201], "wcircuit": 350, "we": [1, 3, 5, 8, 10, 11, 14, 15, 16, 17, 23, 24, 25, 27, 28, 29, 30, 41, 42, 45, 46, 47, 51, 52, 54, 64, 82, 89, 104, 109, 154, 181, 182, 203, 230, 231, 237, 241, 242, 246, 266, 268, 280, 285, 286, 299, 300, 301, 327, 329, 344, 345, 384, 399, 402, 413, 417, 418, 422, 423, 425, 426, 431, 432, 433, 434, 435, 436], "web": 408, "wedg": 282, "weight": [25, 278, 283, 289, 299, 325, 336, 340, 388, 397, 399, 400, 409, 425], "weightiest": 426, "weigth": 325, "well": [3, 5, 17, 34, 41, 103, 224, 286, 299, 301, 327, 409, 418, 424, 434, 435, 437, 438], "were": [16, 82, 399, 417, 418], "weyl": [390, 407], "weyl_oper": 407, "weyloper": [390, 402], "what": [2, 14, 33, 35, 40, 42, 82, 230, 259, 268, 356], "whatev": 435, "whatsoev": 5, "whch": 436, "wheel": [6, 409], "when": [1, 10, 11, 12, 14, 16, 23, 27, 28, 32, 34, 39, 43, 46, 47, 50, 51, 53, 80, 81, 82, 84, 86, 90, 91, 103, 109, 110, 113, 118, 122, 128, 130, 131, 151, 203, 213, 230, 231, 243, 261, 264, 265, 268, 269, 271, 272, 276, 279, 281, 283, 286, 289, 299, 301, 323, 333, 335, 337, 345, 346, 357, 358, 401, 403, 409, 414, 417, 418, 425, 434, 435, 436], "where": [1, 5, 11, 17, 23, 24, 34, 41, 46, 50, 52, 53, 104, 109, 113, 141, 151, 154, 157, 182, 185, 190, 193, 201, 203, 232, 239, 241, 250, 252, 254, 255, 256, 257, 260, 273, 283, 286, 289, 299, 301, 303, 319, 333, 335, 345, 350, 351, 380, 382, 384, 399, 401, 403, 407, 409, 419, 420, 421, 422, 423, 424, 432], "wherea": [34, 103, 348], "wherev": 5, "whether": [5, 28, 62, 74, 156, 164, 186, 187, 192, 196, 198, 204, 206, 329, 345, 346, 350, 359, 369, 370, 372, 382, 388, 420, 430, 432], "which": [1, 3, 5, 9, 12, 13, 16, 18, 19, 20, 23, 24, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 53, 64, 65, 71, 75, 79, 82, 88, 89, 92, 93, 94, 103, 109, 114, 116, 135, 153, 154, 155, 158, 161, 162, 190, 193, 201, 203, 216, 219, 220, 223, 225, 226, 227, 228, 230, 250, 252, 254, 255, 260, 261, 264, 265, 269, 273, 275, 276, 277, 278, 280, 281, 283, 285, 286, 287, 289, 295, 299, 301, 304, 308, 319, 320, 322, 323, 325, 335, 336, 339, 344, 345, 348, 350, 351, 356, 382, 383, 384, 388, 389, 390, 399, 404, 408, 412, 417, 418, 423, 424, 426, 431, 434, 435, 436], "while": [5, 8, 25, 28, 31, 50, 53, 109, 158, 333, 335, 341, 363, 401, 409, 412, 434, 435, 436], "white": [380, 382, 426], "who": [4, 5], "whole": [5, 18, 51, 203, 409], "whom": 5, "whose": [3, 16, 89, 213, 226, 228, 262, 268, 282, 323, 327, 373, 409, 424, 425, 435], "wht": 14, "why": 299, "wick": [187, 434], "wide": [39, 41, 426, 434], "width": [41, 81, 84, 289, 401], "wigner": [181, 186, 187, 200, 203, 209, 347, 409, 433, 434], "wiki": 346, "wikipedia": [288, 346], "window": [4, 154, 203, 336, 339, 409], "window_s": [336, 339], "wire": [1, 10, 14, 15, 242, 261, 266, 272, 403], "wise": [225, 226, 227, 401], "wish": [5, 8, 250, 280, 284, 285, 287, 288, 300, 304, 335], "wished_thread_count": 99, "with_figur": [296, 297, 298], "with_label": 426, "within": [5, 35, 82, 85, 103, 272, 351, 371, 412], "without": [5, 9, 14, 16, 18, 46, 47, 82, 89, 211, 212, 261, 271, 281, 283, 286, 299, 301, 319, 321, 326, 332, 334, 367, 399, 408, 409, 436], "wobserv": 350, "wobservabledoubl": 350, "won": [2, 50, 59, 64, 67, 73, 261], "word": [23, 259, 261, 348, 391, 401, 418], "work": [4, 5, 36, 37, 41, 43, 46, 50, 53, 84, 156, 203, 225, 227, 246, 348, 363, 409, 416, 436, 439], "workflow": 41, "workspac": 48, "world": 0, "worldwid": 5, "wors": [47, 51], "worst": [324, 333], "would": [18, 23, 31, 33, 41, 45, 52, 59, 64, 67, 73, 109, 190, 203, 231, 268, 271, 280, 284, 285, 287, 288, 300, 304, 322, 335, 409, 418, 422, 423, 431, 436], "wouldn": 151, "wrap": [8, 9, 10, 13, 16, 28, 33, 34, 43, 47, 70, 75, 156, 157, 230, 261, 271, 272, 296, 297, 298, 321, 330, 333, 350, 351, 409, 412, 413], "wrap_sampl": 156, "wrapper": [35, 68, 70, 71, 72, 74, 103, 107, 108, 109, 112, 113, 156, 157, 161, 181, 234, 238, 268, 350, 401, 409], "wrapper_post_process": 216, "write": [0, 3, 5, 7, 10, 11, 16, 17, 23, 24, 41, 43, 49, 50, 51, 88, 181, 182, 231, 246, 268, 299, 306, 319, 325, 332, 335, 408, 434, 435, 438], "write_t": 62, "written": [5, 24, 26, 36, 37, 38, 103, 351, 362, 409, 434], "wrong": 409, "wrote": 17, "www": 5, "x": [1, 3, 9, 10, 11, 12, 16, 17, 19, 20, 26, 45, 50, 52, 53, 62, 76, 79, 84, 113, 141, 145, 151, 160, 174, 182, 183, 185, 195, 201, 203, 204, 206, 208, 210, 246, 258, 271, 280, 289, 299, 301, 308, 320, 337, 350, 353, 362, 368, 376, 402, 403, 407, 409, 415, 425, 426, 434, 436], "x0": [3, 25, 182, 329, 340, 344, 345, 346, 435, 436], "x1": 25, "x2": 25, "x3": 25, "x4": 25, "x86_64": 4, "x86_64_cpython_python312": 48, "x_": [24, 333, 407, 434], "x_0": [30, 407], "x_1": [53, 403, 407], "x_2": 403, "x_basis_chang": 337, "x_cp": 320, "x_i": 407, "x_left": 402, "x_n": 403, "x_right": 402, "xie": 48, "xk": 258, "xla_bridg": [3, 9, 268], "xor": [1, 16, 233, 266, 282, 283], "xor_claus": 282, "xore": 269, "xx": [45, 54, 182, 209, 311, 335, 395, 399, 402], "xx_left": 402, "xx_right": 402, "xxi": 399, "xxy": 160, "xy": [209, 333], "xz": [26, 30, 208, 210, 333, 434], "xzx": [52, 312], "xzx_decomposit": 312, "y": [10, 17, 26, 48, 53, 76, 141, 160, 204, 208, 210, 242, 320, 337, 350, 376, 402, 403, 434, 436], "y_": [333, 434], "y_1": 403, "y_2": 403, "y_basis_chang": 337, "y_cp": 320, "y_left": 402, "y_n": 403, "y_right": 402, "yamashita": 48, "yan": 48, "yasuhiro": 249, "ye": 411, "yet": 271, "yield": [28, 29, 30, 31, 109, 216, 323, 350, 403, 424], "yorktown": [165, 175], "you": [1, 4, 5, 10, 11, 12, 14, 15, 16, 20, 23, 39, 43, 48, 50, 51, 53, 59, 64, 67, 71, 72, 73, 110, 137, 181, 222, 231, 250, 259, 261, 281, 283, 286, 299, 301, 319, 327, 331, 332, 335, 338, 350, 353, 391, 401, 408, 409, 410, 424, 433, 434, 435, 437], "your": [4, 5, 6, 9, 10, 12, 14, 33, 36, 37, 39, 41, 50, 52, 53, 88, 109, 110, 137, 161, 181, 281, 283, 286, 299, 301, 306, 322, 331, 336, 338, 409, 410, 412, 415, 434], "your_google_circ": 414, "your_pyquil_circuit": 413, "your_qiskit_circuit": 412, "your_qlm_circ": 414, "your_qlm_circuit": [412, 413], "yufei": 48, "yx": [209, 333], "yy": [182, 209, 333], "yz": [26, 208, 210, 333], "z": [1, 2, 10, 16, 17, 19, 20, 21, 23, 25, 26, 28, 29, 31, 45, 52, 53, 76, 160, 204, 208, 209, 210, 261, 264, 281, 283, 286, 299, 301, 320, 337, 350, 376, 402, 407, 434], "z_": [333, 434], "z_0": 407, "z_1": [30, 407], "z_cp": 320, "z_i": [31, 392, 407], "z_left": 402, "z_right": 402, "zentrum": 241, "zero": [23, 24, 29, 88, 109, 158, 186, 190, 203, 225, 286, 299, 321, 342, 348, 401, 403, 405, 409, 433, 434, 435, 436], "zeronoiseextrapol": [321, 436], "zip": [1, 31, 113, 408], "zuchongzhi": [165, 409], "zulehn": 48, "zulehnerpalerwille18": [48, 336], "zx": [26, 333], "zxz": [52, 312], "zxz_decomposit": 312, "zxzx": 26, "zy": [206, 333, 434], "zyz": [52, 312], "zyz_decomposit": 312, "zz": [25, 26, 45, 46, 54, 109, 182, 208, 209, 210, 279, 283, 311, 333, 335, 395, 399, 402, 434], "zzi": 399, "zzx": 26, "zzz": [25, 279], "\u00e8": 44, "\u00e9": 44, "\u00ee": 44, "\u03c0": [45, 271], "\u03c3": 31}, "titles": ["Getting started", "Writing quantum programs", "Executing quantum programs", "Variational algorithms with Qaptiva", "Installing myQLM", "myQLM license", "myQLM Installation on MacOS", "User guide", "Writing quantum programs", "Gate-based programming", "Creating and adding quantum gates to a circuit", "Creating variational circuits", "Quantum programs", "Quantum routines (and Oracles)", "Naming quantum routines", "Ancillae management and compute scopes", "Oracles and quantum types", "Atos Quantum Assembler (AQASM)", "Analog programming", "Building schedules", "Manipulating schedules", "Analog Jobs", "Annealing programming", "Ising Hamiltonians", "Quadratic Unconstrained Binary Optimization (QUBO)", "General Combinatorial Problems", "Creating observables", "Executing / Simulating quantum programs", "Constructing one or multiple Jobs (using Batch)", "Sample Job", "Observable Job", "Automated batch generation", "Result of a quantum program", "Quantum Processing Unit (QPU)", "SQA computing", "Make your own QPU", "Gate based computing", "CLinalg: C++ Linear-algebra-based simulator", "PyLinalg: Python Linear-algebra-based simulator", "Extending a QPU (by using Plugins)", "Make your own plugin", "Make you own junction", "Getting information from the QPU", "Running variational algorithms", "Compiling and rewriting quantum circuits", "Compiling quantum jobs using plugins", "LazySynthesis: quantum circuit compilation", "InitialMapping: a qubit placement optimization plugin", "Nnizer: Swap Insertion Solver", "Rewriting quantum circuits", "Low-level optimization", "High-level optimization", "Compressing single qubit gates", "Writing patterns", "Pattern collections (to be used with PatternManager)", "API reference", "qat", "qat.interop", "qat.interop.cirq", "qat.interop.cirq.cirq_to_qlm", "qat.interop.cirq.qlm_to_cirq", "qat.interop.openqasm", "qat.interop.openqasm.OqasmParser", "qat.interop.projectq", "qat.interop.projectq.AqasmEngine", "qat.interop.projectq.AqasmPrinter", "qat.interop.pyquil", "qat.interop.pyquil.pyquil_to_qlm", "qat.interop.pyquil.PyquilQPU", "qat.interop.pyquil.qlm_to_pyquil", "qat.interop.qiskit", "qat.interop.qiskit.AsyncBackendToQPU", "qat.interop.qiskit.BackendToQPU", "qat.interop.qiskit.qiskit_to_qlm", "qat.interop.qiskit.QiskitJob", "qat.interop.qiskit.runtime.QiskitRuntimeQPU", "qat.interop.qiskit.qlm_to_qiskit", "qat.interop.qiskit.QPUToBackend", "qat.pylinalg", "qat.pylinalg.simulator", "qat.pylinalg.simulator.mat2nparray", "qat.pylinalg.simulator.measure", "qat.pylinalg.simulator.project", "qat.pylinalg.simulator.raise_break", "qat.pylinalg.simulator.reset", "qat.pylinalg.simulator.simulate", "qat.comm", "qat.comm.datamodel", "qat.comm.datamodel.ttypes.GateDefinition", "qat.comm.datamodel.ttypes.Op", "qat.comm.exceptions", "qat.comm.exceptions.ttypes.ErrorType", "qat.comm.exceptions.ttypes.GeneratorException", "qat.comm.exceptions.ttypes.PluginException", "qat.comm.exceptions.ttypes.QPUException", "qat.comm.resource", "qat.comm.resource.ttypes.AllocationModel", "qat.comm.resource.ttypes.Device", "qat.comm.resource.ttypes.NodeType", "qat.comm.resource.ttypes.ResourceModel", "qat.comm.shared", "qat.comm.shared.ttypes.IntermediateMeasurement", "qat.comm.shared.ttypes.ProcessingType", "qat.core", "qat.core.wrappers.result.aggregate_data", "qat.core.assertion.assert_plugin", "qat.core.assertion.assert_qpu", "qat.core.Batch", "qat.core.BatchResult", "qat.core.Circuit", "qat.core.console.display", "qat.core.formula_eval.evaluate", "qat.core.HardwareSpecs", "qat.core.Job", "qat.core.util.load_state_vector_from_bin", "qat.core.application", "qat.core.application.Application", "qat.core.application.RemoteApplication", "qat.core.circuit_builder", "qat.core.circuit_builder.matrix_util.default_gate_set", "qat.core.circuit_builder.matrix_util.get_param_generator", "qat.core.circuit_builder.matrix_util.get_predef_generator", "qat.core.circuit_builder.builder.VariableNameNotAvailable", "qat.core.exceptions_utils", "qat.core.exceptions_utils.exception_only", "qat.core.exceptions_utils.generator_exception_only", "qat.core.exceptions_utils.plugin_exception_only", "qat.core.exceptions_utils.qpu_exception_only", "qat.core.gate_set", "qat.core.gate_set.GateSet", "qat.core.gate_set.GateSignature", "qat.core.gate_set.GateSyntaxRedefinition", "qat.core.qpu", "qat.core.qpu.CommonQPU", "qat.core.spins", "qat.core.spins.integer_to_spins", "qat.core.spins.spins_to_integer", "qat.core.variables", "qat.core.variables.abso", "qat.core.variables.angle", "qat.core.variables.ArithExpression", "qat.core.variables.atan2", "qat.core.variables.cos", "qat.core.variables.exp", "qat.core.variables.get_item", "qat.core.variables.heaviside", "qat.core.variables.imag", "qat.core.variables.ln", "qat.core.variables.real", "qat.core.variables.sin", "qat.core.variables.sqrt", "qat.core.variables.Symbol", "qat.core.variables.vmax", "qat.core.Observable", "qat.core.Parameter", "qat.core.printer.plot_in_notebook", "qat.core.Result", "qat.core.Sample", "qat.core.Schedule", "qat.core.wrappers.result.State", "qat.core.Term", "qat.core.Topology", "qat.core.TopologyType", "qat.core.Variable", "qat.core.simutil.wavefunction", "qat.devices", "qat.devices.AllToAll", "qat.devices.GOOGLE_SYCAMORE", "qat.devices.GridDevice", "qat.devices.IBM_BURLINGTON", "qat.devices.IBM_JOHANNESBURG", "qat.devices.IBM_MELBOURNE", "qat.devices.IBM_RUESCHLIKON", "qat.devices.IBM_SINGAPORE", "qat.devices.IBM_TOKYO", "qat.devices.IBM_YORKTOWN", "qat.devices.LineDevice", "qat.devices.RIGETTI_AGAVE", "qat.devices.RIGETTI_ASPEN", "qat.devices.SquareGridDevice", "qat.devices.ZUCHONGZHI", "qat.fermion", "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", "qat.fermion.chemistry.ucc.compute_active_space_integrals", "qat.fermion.chemistry.ucc.construct_ucc_ansatz", "qat.fermion.chemistry.ucc.convert_to_h_integrals", "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", "qat.fermion.hamiltonians.FermionHamiltonian", "qat.fermion.chemistry.ucc.get_cluster_ops", "qat.fermion.chemistry.ucc.get_hf_ket", "qat.fermion.chemistry.ucc.guess_init_params", "qat.fermion.hamiltonians.make_anderson_model", "qat.fermion.circuits.make_compressed_ldca_circ", "qat.fermion.hamiltonians.make_embedded_model", "qat.fermion.circuits.make_general_hwe_circ", "qat.fermion.hamiltonians.make_hubbard_model", "qat.fermion.circuits.make_ldca_circ", "qat.fermion.circuits.make_mr_circ", "qat.fermion.circuits.make_mrep_circ", "qat.fermion.circuits.make_shallow_circ", "qat.fermion.trotterisation.make_trotterisation_routine", "qat.fermion.chemistry.wrapper.MolecularHamiltonian", "qat.fermion.chemistry.wrapper.MoleculeInfo", "qat.fermion.phase_estimation.perform_phase_estimation", "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", "qat.fermion.chemistry.ucc.select_active_orbitals", "qat.fermion.hamiltonians.SpinHamiltonian", "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", "qat.fermion.transforms.transform_to_bk_basis", "qat.fermion.transforms.transform_to_jw_basis", "qat.fermion.transforms.transform_to_parity_basis", "qat.fusion", "qat.fusion.strategies.AdjacentStrategy", "qat.fusion.strategies.EagerStrategy", "qat.fusion.strategies.NaiveStrategy", "qat.generators", "qat.generators.AbstractGenerator", "qat.generators.CombinatorialOptimizerGenerator", "qat.generators.GraphColouringGenerator", "qat.generators.GraphPartitioningGenerator", "qat.generators.KCliqueGenerator", "qat.generators.MaxCutGenerator", "qat.generators.RemoteBatchGenerator", "qat.generators.VertexCoverGenerator", "qat.hardware", "qat.hardware.DefaultGatesSpecification", "qat.hardware.DefaultHardwareModel", "qat.hardware.GatesSpecification", "qat.hardware.HardwareModel", "qat.hardware.make_depolarizing_hardware_model", "qat.lang", "qat.lang.AbstractGate", "qat.lang.algorithms.amplification_step", "qat.lang.AQASM.bits.BoolFormula", "qat.lang.build_gate", "qat.lang.AQASM.bits.Cbit", "qat.lang.AQASM.bits.CRegister", "qat.lang.AQASM.gates.Gate", "qat.lang.AQASM.misc.generate_gate_set", "qat.lang.algorithms.amplification.grover_diffusion", "qat.lang.algorithms.amplification.householder", "qat.lang.models.KPTree", "qat.lang.linking.Linker", "qat.lang.AQASM.arithmetic", "qat.lang.AQASM.arithmetic.add_const_mod", "qat.lang.AQASM.arithmetic.add_mod", "qat.lang.AQASM.arithmetic.modular_exp", "qat.lang.AQASM.arithmetic.mult_const", "qat.lang.AQASM.arithmetic.mult_const_mod", "qat.lang.AQASM.classarith", "qat.lang.AQASM.classarith.add", "qat.lang.AQASM.classarith.add_const", "qat.lang.AQASM.classarith.cuccaro_add", "qat.lang.AQASM.qftarith", "qat.lang.AQASM.qftarith.add", "qat.lang.AQASM.qftarith.add_const", "qat.lang.AQASM.qftarith.mult", "qat.lang.AQASM.qftarith.mult_const", "qat.lang.AQASM.qftarith.QFT", "qat.lang.AQASM.gates.ParamGate", "qat.lang.algorithms.phase_estimation", "qat.lang.Program", "qat.lang.AQASM.qint.QArithExp", "qat.lang.AQASM.bits.Qbit", "qat.lang.AQASM.qbool.QBool", "qat.lang.AQASM.qbool.QBoolArray", "qat.lang.AQASM.qbool.QClause", "qat.lang.AQASM.qint.QCompExp", "qat.lang.qfunc", "qat.lang.AQASM.qint.QInt", "qat.lang.AQASM.bits.QRegister", "qat.lang.qrout", "qat.lang.QRoutine", "qat.lang.algorithms.quantum_counting", "qat.lang.algorithms.amplification.uniform_distribution", "qat.nnize", "qat.nnize.metric.DurationMetric", "qat.nnize.metric.QuantumCostMetric", "qat.opt", "qat.vsolve.ansatz.AnsatzFactory", "qat.opt.BILP", "qat.opt.circuit_generator.CircuitGenerator", "qat.opt.boolexpr.Clause", "qat.opt.CombinatorialProblem", "qat.opt.GraphColouring", "qat.opt.GraphPartitioning", "qat.opt.Ising", "qat.opt.KClique", "qat.opt.MaxCut", "qat.opt.MixingFactory", "qat.opt.mixing_factory", "qat.opt.mixing_factory.IndependentAQO", "qat.opt.mixing_factory.InitialStateBuilder", "qat.opt.mixing_factory.SimpleInitialState", "qat.opt.results", "qat.opt.results.CombinatorialResult", "qat.opt.results.GraphPartitioningResult", "qat.opt.results.KCliqueResult", "qat.opt.results.VertexCoverResult", "qat.opt.MWIS", "qat.opt.NumberPartitioning", "qat.opt.QUBO", "qat.opt.schedule_generator.ScheduleGenerator", "qat.opt.boolexpr.Var", "qat.opt.VertexCover", "qat.pbo", "qat.pbo.AbstractRegister", "qat.pbo.GateName", "qat.pbo.GraphCircuit", "qat.pbo.kak.list_decompositions", "qat.pbo.collections", "qat.pbo.collections.collection_from_target", "qat.pbo.decompositions", "qat.pbo.decompositions.decompositions.get_euler_angles", "qat.pbo.decompositions.ions_decomposition", "qat.pbo.decompositions.u3_decomposition", "qat.pbo.decompositions.xzx_decomposition", "qat.pbo.decompositions.zxz_decomposition", "qat.pbo.decompositions.zyz_decomposition", "qat.pbo.PatternGroup", "qat.pbo.VAR", "qat.plugins", "qat.plugins.AbstractPlugin", "qat.plugins.AdaptVQEPlugin", "qat.plugins.CircuitInliner", "qat.plugins.CostFunctionPlugin", "qat.plugins.Display", "qat.plugins.FusionPlugin", "qat.plugins.GateRewriter", "qat.plugins.GradientDescentOptimizer", "qat.plugins.InitialMapping", "qat.plugins.Junction", "qat.plugins.KAKCompression", "qat.plugins.LazySynthesis", "qat.plugins.MultipleLaunchesAnalyzer", "qat.plugins.NISQCompiler", "qat.plugins.Nnizer", "qat.plugins.ObservableSplitter", "qat.plugins.Optimizer", "qat.plugins.PatternManager", "qat.plugins.PSOMinimizePlugin", "qat.plugins.QuameleonPlugin", "qat.plugins.Remap", "qat.plugins.RemotePlugin", "qat.plugins.ScipyMinimizePlugin", "qat.plugins.SeqOptim", "qat.plugins.SPSAMinimizePlugin", "qat.plugins.TransformObservable", "qat.plugins.ZeroNoiseExtrapolator", "qat.qpus", "qat.qpus.CLinalg", "qat.qpus.PyLinalg", "qat.qpus.SimulatedAnnealing", "qat.qpus.ClassicalQPU", "qat.qpus.get_current_qpu", "qat.qpus.get_default_qpu", "qat.qpus.QPUHandler", "qat.qpus.RemoteQPU", "qat.quops", "qat.quops.math_util.are_equal_up_to_phase", "qat.quops.ChannelRepresentations", "qat.quops.math_util.convert_density_mat_to_pauli_vec", "qat.quops.math_util.convert_pauli_vec_to_density_mat", "qat.quops.metrics.get_average_process_fidelity", "qat.quops.metrics.get_diamond_norm", "qat.quops.metrics.get_entanglement_process_fidelity", "qat.quops.metrics.get_process_distance", "qat.quops.metrics.get_state_fidelity", "qat.quops.metrics.get_trace_distance", "qat.quops.is_completely_positive", "qat.quops.is_trace_preserving", "qat.quops.is_trace_reducing", "qat.quops.is_unital", "qat.quops.make_avg_fid_equiv_depol_channel", "qat.quops.make_depolarizing_channel", "qat.quops.make_generalized_amplitude_damping", "qat.quops.math_util.make_pauli_matrix_basis", "qat.quops.math_util.make_standard_matrix_basis", "qat.quops.math_util.make_standard_vector_basis", "qat.quops.math_util.multikron", "qat.quops.ParametricAmplitudeDamping", "qat.quops.ParametricGateNoise", "qat.quops.ParametricPureDephasing", "qat.quops.ParametricQuantumChannel", "qat.quops.math_util.partial_trace", "qat.quops.QuantumChannel", "qat.quops.QuantumChannelChi", "qat.quops.QuantumChannelChoi", "qat.quops.QuantumChannelKraus", "qat.quops.QuantumChannelPTM", "qat.synthopline", "qat.synthopline.clifford_normalizer.CliffordNormalizer", "qat.synthopline.co_diagonalization.codiagonalize_with_architecture", "qat.synthopline.util.conjugate_observable_tableau", "qat.synthopline.linear_synthesis.extract_linear_operator", "qat.synthopline.util.extract_pauli_rotations", "qat.synthopline.phase_polynomials.extract_phase_polynomial", "qat.synthopline.initial_mapping.frequency_mapping", "qat.synthopline.pauli_synth.generate_random_observable", "qat.synthopline.generate_trotter_ansatz", "qat.synthopline.initial_mapping.greedy_mapping", "qat.synthopline.linear_operator_synthesis", "qat.synthopline.interface.OperatorTableau", "qat.synthopline.phase_polynomial_synthesis", "qat.synthopline.linear_synthesis.random_linear_operator", "qat.synthopline.phase_polynomials.random_phase_polynomial", "qat.synthopline.co_diagonalization.synthesize_stabilizer_state", "qat.synthopline.interface.WeylOperator", "Demos", "Release notes", "Contributing to myQLM", "Interoperability with gate-based framework", "Qiskit interoperability", "PyQuil interoperability", "Cirq interoperability", "ProjectQ interoperability", "OpenQASM Compiler", "Combinatorial optimization", "NP-hard problems", "Graph Partitioning", "KClique", "Max Cut", "Number Partitioning", "Vertex Cover", "Quantum Approximate Optimization Algorithm (QAOA)", "Adiabatic Quantum Optimization (AQO)", "Crossing lattice", "Problem generators", "Max Cut Generator", "Graph Partitioning Generator", "K-Clique Generator", "Vertex Cover Generator", "Graph Colouring Generator", "Spin and fermionic systems", "Creating and manipulating Hamiltonians", "Quantum application (including Ans\u00e4tze and state preparation)", "Plugins", "Migrating code based on deprecated library qat.dqs", "myQLM \u2013 Quantum Python Package", "Interoperability with annealing framework"], "titleterms": {"": 409, "0": 409, "1": 409, "10": 409, "11": 409, "2": 409, "3": 409, "4": 409, "5": 409, "6": 409, "7": 409, "9": 409, "A": [40, 41, 409], "Ising": [23, 278, 286], "The": [1, 17, 46, 181, 434], "abso": 138, "abstract": [19, 349, 390], "abstractg": [10, 231], "abstractgener": 216, "abstractplugin": 322, "abstractregist": 306, "access": 409, "ad": [10, 408], "adaptvqeplugin": 323, "add": [250, 254], "add_const": [251, 255], "add_const_mod": 244, "add_mod": 245, "addit": 46, "adiabat": 425, "adjacentstrategi": 212, "advanc": [12, 50, 51], "aggregate_data": 104, "algebra": [36, 37, 38], "algorithm": [1, 3, 43, 46, 230, 232, 239, 240, 260, 273, 274, 408, 424], "all": 45, "alloc": [12, 16], "allocationmodel": 96, "alltoal": 166, "amplif": [239, 240, 274], "amplification_step": 232, "an": [26, 51], "analog": [18, 21], "ancilla": 15, "angl": 139, "anneal": [22, 290, 349, 418, 439], "ansatz": [181, 279, 435], "ansatzfactori": 279, "ans\u00e4tz": [278, 435], "api": 55, "appli": 12, "applic": [115, 116, 117, 435], "apply_quantum_subspace_expans": 182, "approxim": 424, "aqasm": [17, 233, 235, 236, 237, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 269, 270], "aqasmengin": 64, "aqasmprint": 65, "aqo": 425, "are_equal_up_to_phas": 359, "arithexpress": 140, "arithmet": [16, 230, 243, 244, 245, 246, 247, 248], "ariti": 10, "assembl": 17, "assert": [105, 106], "assert_plugin": 105, "assert_qpu": 106, "asyncbackendtoqpu": 71, "atan2": 141, "ato": 17, "atom": [181, 409], "autom": [15, 31, 305], "avail": 411, "backend": 412, "backendtoqpu": 72, "background": 18, "base": [9, 36, 37, 38, 46, 349, 411, 437], "basi": 358, "basic": [230, 408], "batch": [28, 31, 107, 409], "batchresult": 108, "begin": 50, "behavior": 51, "benchmark": 418, "bibliographi": [23, 424], "bidirect": 46, "bilp": 280, "binari": [24, 426], "bind": 11, "binder": 411, "bit": [233, 235, 236, 263, 270], "bodi": 181, "boolean": [16, 230], "boolexpr": [282, 303], "boolformula": 233, "build": [16, 19], "build_gat": 234, "builder": 122, "built": 7, "c": [36, 37, 350], "cbit": [109, 235], "channel": 358, "channelrepresent": 360, "chemistri": [182, 183, 184, 185, 188, 189, 190, 201, 202, 204, 205, 207, 435], "circuit": [10, 11, 12, 14, 44, 46, 49, 50, 51, 109, 181, 192, 194, 196, 197, 198, 199, 230, 321, 408, 409, 412, 413, 414, 415, 416, 435], "circuit_build": [118, 119, 120, 121, 122], "circuit_gener": 281, "circuitgener": 281, "circuitinlin": 324, "cirq": [58, 59, 60, 414], "cirq_to_qlm": 59, "class": [278, 349], "classarith": [249, 250, 251, 252], "classic": [12, 16], "classicalqpu": 353, "claus": 282, "clifford": 46, "clifford_norm": 391, "cliffordnorm": 391, "clinalg": [36, 37, 350], "cliqu": 430, "cluster": 181, "co": 142, "co_diagon": [392, 406], "code": 437, "codiagonalize_with_architectur": 392, "coeffici": 19, "collect": [54, 310, 311], "collection_from_target": 311, "color": 16, "colour": 432, "combinatori": [25, 215, 278, 294, 408, 409, 417], "combinatorialoptimizergener": 217, "combinatorialproblem": 283, "combinatorialresult": 295, "comm": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "common": 181, "commonqpu": 133, "commut": 54, "compat": 4, "compil": [17, 40, 44, 45, 46, 409, 416], "compress": 52, "comput": [15, 34, 36, 408, 409], "compute_active_space_integr": 183, "concret": [40, 41], "condit": 16, "conjugate_observable_tableau": 393, "connect": [412, 413], "consol": 110, "constrain": 418, "construct": 28, "construct_ucc_ansatz": 184, "constructor": [181, 434], "content": [434, 435], "contribut": 410, "control": 10, "convert_density_mat_to_pauli_vec": 361, "convert_pauli_vec_to_density_mat": 362, "convert_to_h_integr": 185, "core": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "costfunctionplugin": 325, "coupl": 181, "cover": [423, 431], "creat": [10, 11, 18, 26, 42, 290, 434], "cregist": 236, "cross": 426, "cuccaro_add": 252, "custom": [10, 42, 52, 290], "cut": [421, 428], "dagger": 10, "datamodel": [87, 88, 89], "declar": 52, "decomposit": [312, 313, 314, 315, 316, 317, 318], "default_gate_set": 119, "defaultgatesspecif": 225, "defaulthardwaremodel": 226, "defin": [10, 305, 409, 434], "definit": 10, "demo": [408, 433], "depend": 409, "deprec": [10, 409, 437], "design": 408, "devic": [97, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 409], "differenti": 43, "diffus": 1, "digit": 408, "displai": [110, 326], "dq": 437, "durationmetr": 276, "eagerstrategi": 213, "eigensolv": 435, "electron": 434, "electronicstructurehamiltonian": 186, "emul": 36, "end": 50, "entangl": 54, "errortyp": 91, "estim": [181, 435], "evalu": [16, 111], "exampl": [1, 16, 40, 41, 45, 47, 51, 54, 327, 434], "except": [90, 91, 92, 93, 94], "exception_onli": 124, "exceptions_util": [123, 124, 125, 126, 127], "execut": [2, 27, 51], "exp": 143, "expans": [54, 181, 435], "export": 12, "express": [16, 230], "extend": [39, 43], "extract": [14, 390], "extract_linear_oper": 394, "extract_pauli_rot": 395, "extract_phase_polynomi": 396, "featur": [46, 409], "fermion": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 321, 408, 409, 433, 434, 435], "fermionhamiltonian": 187, "file": 17, "final": 45, "first": 408, "fix": 409, "flag": 51, "format": 17, "formula_ev": 111, "framework": [411, 439], "frequency_map": 397, "from": 42, "function": [14, 181, 409], "fusion": [211, 212, 213, 214], "fusionplugin": 327, "gate": [9, 10, 12, 14, 17, 36, 45, 46, 52, 53, 54, 224, 230, 237, 259, 335, 349, 411], "gate_set": [128, 129, 130, 131], "gatedefinit": 88, "gatenam": 307, "gaterewrit": 328, "gateset": 129, "gatesignatur": 130, "gatesspecif": 227, "gatesyntaxredefinit": 131, "gener": [10, 12, 25, 31, 165, 215, 216, 217, 218, 219, 220, 221, 222, 223, 278, 294, 390, 409, 427, 428, 429, 430, 431, 432], "generate_gate_set": 238, "generate_random_observ": 398, "generate_trotter_ansatz": 399, "generator_exception_onli": 125, "generatorexcept": 92, "get": [0, 42], "get_average_process_fidel": 363, "get_cluster_op": 188, "get_current_qpu": 354, "get_default_qpu": 355, "get_diamond_norm": 364, "get_entanglement_process_fidel": 365, "get_euler_angl": 313, "get_hf_ket": 189, "get_item": 144, "get_matrix": 434, "get_param_gener": 120, "get_predef_gener": 121, "get_process_dist": 366, "get_spec": 35, "get_state_fidel": 367, "get_trace_dist": 368, "google_sycamor": 167, "gradientdescentoptim": 329, "graph": [16, 418, 419, 429, 432], "graphcircuit": 308, "graphcolour": 284, "graphcolouringgener": 218, "graphpartit": 285, "graphpartitioninggener": 219, "graphpartitioningresult": 296, "greedy_map": 400, "griddevic": 168, "grover": [1, 16], "grover_diffus": 239, "guess_init_param": 190, "guid": 7, "hamiltonian": [19, 23, 181, 186, 187, 191, 193, 195, 206, 434], "hard": [278, 418, 427], "hardwar": [103, 224, 225, 226, 227, 228, 229], "hardwaremodel": 228, "hardwarespec": 112, "header": 17, "heavisid": 145, "high": [51, 350], "household": 240, "ibm_burlington": 169, "ibm_johannesburg": 170, "ibm_melbourn": 171, "ibm_rueschlikon": 172, "ibm_singapor": 173, "ibm_tokyo": 174, "ibm_yorktown": 175, "imag": 146, "implement": 51, "includ": 435, "independ": 426, "independentaqo": 291, "index": 50, "inform": 42, "initi": [43, 45, 46], "initial_map": [397, 400], "initialmap": [47, 330], "initialstatebuild": 292, "inner": 34, "insert": 48, "instal": [4, 6], "instruct": 17, "integ": [16, 230], "integer_to_spin": 135, "integr": 434, "interfac": [350, 402, 407], "intermediatemeasur": 101, "interop": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "interoper": [4, 408, 411, 412, 413, 414, 415, 439], "introduct": [50, 51, 408], "involut": 54, "ions_decomposit": 314, "is_completely_posit": 369, "is_trace_preserv": 370, "is_trace_reduc": 371, "is_unit": 372, "iter": 109, "job": [11, 18, 21, 28, 29, 30, 43, 45, 103, 113, 278, 290, 409], "junction": [41, 331], "k": 430, "kak": 309, "kakcompress": 332, "kcliqu": [287, 420], "kcliquegener": 220, "kcliqueresult": 297, "known": 409, "kptree": 241, "labrari": 230, "lang": [230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 408], "lattic": 426, "lazysynthesi": [46, 333], "level": [50, 51, 230, 350], "librari": [7, 437], "licens": 5, "lift": 14, "linear": [36, 37, 38], "linear_operator_synthesi": 401, "linear_synthesi": [394, 404], "linedevic": 176, "link": [14, 17, 242], "linker": [230, 242], "list": [17, 19], "list_decomposit": 309, "ln": 147, "load_state_vector_from_bin": 114, "logic": 16, "low": [50, 230, 350], "maco": 6, "main": 409, "make": [35, 40, 41], "make_anderson_model": 191, "make_avg_fid_equiv_depol_channel": 373, "make_compressed_ldca_circ": 192, "make_depolarizing_channel": 374, "make_depolarizing_hardware_model": 229, "make_embedded_model": 193, "make_general_hwe_circ": 194, "make_generalized_amplitude_damp": 375, "make_hubbard_model": 195, "make_ldca_circ": 196, "make_mr_circ": 197, "make_mrep_circ": 198, "make_pauli_matrix_basi": 376, "make_shallow_circ": 199, "make_standard_matrix_basi": 377, "make_standard_vector_basi": 378, "make_trotterisation_routin": 200, "manag": [15, 230], "mani": 181, "manipul": [20, 230, 305, 434], "map": [47, 390], "mat2nparrai": 80, "match": 50, "math_util": [359, 361, 362, 376, 377, 378, 379, 384], "mathemat": 358, "matrix": [4, 10], "matrix_util": [119, 120, 121], "max": [421, 428], "maxcut": 288, "maxcutgener": 221, "maximum": 426, "measur": 81, "merg": 54, "method": [35, 40, 109, 390, 434], "metric": [276, 277, 358, 363, 364, 365, 366, 367, 368], "migrat": 437, "misc": [103, 238], "mixing_factori": [290, 291, 292, 293], "mixingfactori": 289, "model": [224, 241], "modul": 55, "modular_exp": 246, "molecular": 181, "molecularhamiltonian": [201, 435], "moleculeinfo": [202, 435], "most": 109, "mult": 256, "mult_const": [247, 257], "mult_const_mod": 248, "multikron": 379, "multipl": 28, "multiplelaunchesanalyz": 334, "mwi": [299, 426], "myqlm": [4, 5, 6, 409, 410, 438], "naivestrategi": 214, "name": [14, 53], "nativ": 10, "new": 409, "nisqcompil": 335, "nnize": [275, 276, 277], "nnizer": [48, 336], "nodetyp": 98, "normal": 46, "note": 409, "np": [278, 418, 427], "number": 422, "numberpartit": 300, "object": 103, "observ": [19, 23, 26, 30, 103, 153], "observablesplitt": 337, "one": [19, 28, 45, 434], "op": 89, "open": 5, "openqasm": [61, 62, 416], "oper": [12, 26, 358, 390, 434], "operatortableau": 402, "opt": [278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "optim": [24, 46, 47, 50, 51, 215, 278, 294, 321, 338, 408, 417, 424, 425, 426], "oqasmpars": 62, "oracl": [1, 13, 16], "other": [45, 409, 418], "overview": 408, "own": [35, 40, 41], "packag": [4, 409, 438], "paramet": [43, 53, 103, 154], "parametr": 10, "parametricamplitudedamp": 380, "parametricgatenois": 381, "parametricpuredephas": 382, "parametricquantumchannel": 383, "paramg": 259, "pars": 103, "part": 5, "partial_trac": 384, "partit": [419, 422, 429], "pattern": [50, 51, 52, 53, 54, 305], "patterngroup": 319, "patternmanag": [54, 339], "pauli_synth": 398, "pbo": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "perform": 418, "perform_phase_estim": 203, "perform_pyscf_comput": 204, "phase": [16, 181, 435], "phase_estim": [203, 260], "phase_polynomi": [396, 405], "phase_polynomial_synthesi": 403, "placement": 47, "plot_in_notebook": 155, "plugin": [39, 40, 45, 46, 47, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 390, 408, 409, 436], "plugin_exception_onli": 126, "pluginexcept": 93, "possibl": 45, "post_process": 40, "power": 409, "predefin": [52, 165, 224, 358], "prepar": 435, "preparat": 230, "prerequisit": 4, "printer": 155, "problem": [25, 278, 408, 409, 418, 427], "process": [33, 350, 351], "processingtyp": 102, "program": [1, 2, 8, 9, 12, 18, 22, 27, 32, 230, 261, 408], "project": 82, "projectq": [63, 64, 65, 415], "proprietari": 5, "psominimizeplugin": 340, "pybind": 350, "pylinalg": [36, 38, 78, 79, 80, 81, 82, 83, 84, 85, 351], "pyquil": [66, 67, 68, 69, 413], "pyquil_to_qlm": 67, "pyquilqpu": 68, "pyscf_tool": 204, "python": [14, 36, 38, 55, 409, 438], "qa": 278, "qaoa": [278, 424], "qaptiva": [3, 7], "qarithexp": 262, "qat": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 437], "qbit": 263, "qbool": [264, 265, 266], "qboolarrai": 265, "qclaus": 266, "qcompexp": 267, "qft": 258, "qftarith": [253, 254, 255, 256, 257, 258], "qfunc": 268, "qint": [262, 267, 269], "qiskit": [70, 71, 72, 73, 74, 75, 76, 77, 412], "qiskit_to_qlm": 73, "qiskitjob": 74, "qiskitruntimeqpu": 75, "qlm": 408, "qlm_to_cirq": 60, "qlm_to_pyquil": 69, "qlm_to_qiskit": 76, "qpu": [33, 35, 36, 39, 42, 43, 132, 133, 349, 350, 351, 352, 353, 354, 355, 356, 357, 409, 412, 413], "qpu_exception_onli": 127, "qpuexcept": 94, "qpuhandl": 356, "qputobackend": 77, "qram": 230, "qregist": 270, "qrout": 271, "qroutin": 272, "qse": 182, "quadrat": [24, 278, 426], "quameleonplugin": 341, "quantum": [1, 2, 8, 10, 12, 13, 14, 16, 17, 27, 32, 33, 44, 45, 46, 49, 181, 230, 290, 350, 351, 358, 408, 409, 412, 413, 414, 415, 416, 418, 424, 425, 435, 438], "quantum_count": 273, "quantumchannel": 385, "quantumchannelchi": 386, "quantumchannelchoi": 387, "quantumchannelkrau": 388, "quantumchannelptm": 389, "quantumcostmetr": 277, "qubit": [12, 47, 52, 53, 109], "qubo": [24, 278, 301, 426], "quop": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], "raise_break": 83, "random": 390, "random_linear_oper": 404, "random_phase_polynomi": 405, "re": 46, "real": 148, "refer": [44, 48, 55, 241, 243, 249, 253, 289], "regist": [12, 230], "relat": 103, "releas": 409, "remap": 342, "remoteappl": 117, "remotebatchgener": 222, "remoteplugin": 343, "remoteqpu": 357, "remov": 51, "represent": 434, "reset": 84, "resourc": [95, 96, 97, 98, 99], "resourcemodel": 99, "result": [32, 103, 104, 156, 159, 294, 295, 296, 297, 298], "rewrit": [44, 49, 54, 305, 321], "rigetti_agav": 177, "rigetti_aspen": 178, "rotat": 54, "routin": [13, 14, 230], "run": [43, 408], "runtim": 75, "rydberg": 409, "sampl": [29, 157], "schedul": [19, 20, 158], "schedule_gener": 302, "schedulegener": 302, "scipyminimizeplugin": 344, "scope": 15, "select_active_orbit": 205, "seqoptim": 345, "set": [16, 45, 230, 335, 426], "sever": 43, "share": [100, 101, 102], "simpleinitialst": 293, "simplif": 54, "simul": [27, 36, 37, 38, 79, 80, 81, 82, 83, 84, 85, 349, 408, 409, 418], "simulatedann": 352, "simutil": 164, "sin": 149, "singl": [26, 52], "solv": 409, "solver": 48, "some": 434, "sourc": 5, "specif": [42, 50, 103, 224], "specifi": 335, "spin": [134, 135, 136, 181, 408, 433, 434], "spinhamiltonian": 206, "spins_to_integ": 136, "spsaminimizeplugin": 346, "sqa": 34, "sqrt": 150, "squaregriddevic": 179, "stack": 408, "start": 0, "state": [159, 230, 435], "statement": 16, "statevector": 350, "step": 408, "strategi": [212, 213, 214], "structur": 230, "studi": 181, "subcircuit": 10, "submit_job": 35, "subspac": [181, 435], "support": [43, 278], "swap": 48, "symbol": 151, "synthesi": [321, 390], "synthesize_stabilizer_st": 406, "synthoplin": [390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "system": [321, 408, 433], "tabl": [434, 435], "target": [45, 50], "term": [26, 160], "test": 43, "text": 17, "through": 50, "time": [17, 51], "tool": [230, 409, 435], "topologi": 161, "topologytyp": 162, "transform": [181, 208, 209, 210], "transform_integrals_to_new_basi": 207, "transform_to_bk_basi": 208, "transform_to_jw_basi": 209, "transform_to_parity_basi": 210, "transformobserv": 347, "translat": [412, 413, 414, 415, 416], "transpil": 45, "trivial": 54, "trotter": 435, "trotteris": 200, "ttype": [88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102], "tutori": 408, "two": 434, "type": [16, 230], "u3_decomposit": 315, "ucc": [181, 183, 184, 185, 188, 189, 190, 205, 207], "uncomput": 15, "unconstrain": [24, 418, 426], "uniform_distribut": 274, "unit": [33, 350, 351], "unitari": 181, "updat": 409, "upon": 7, "us": [19, 26, 28, 39, 45, 54, 109, 409, 434], "user": [7, 10], "util": [103, 114, 181, 215, 321, 349, 358, 390, 393, 395], "valu": 16, "var": [303, 320], "variabl": [11, 19, 103, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163], "variablenamenotavail": 122, "variat": [3, 11, 43, 321, 408, 435], "vertex": [423, 431], "vertexcov": 304, "vertexcovergener": 223, "vertexcoverresult": 298, "vmax": 152, "vqe": 435, "vsolv": 279, "warn": 409, "wavefunct": 164, "weight": 426, "weyloper": 407, "what": 409, "work": 34, "wrapper": [104, 159, 201, 202], "write": [1, 8, 53, 103], "xzx_decomposit": 316, "you": 41, "your": [35, 40, 408], "zeronoiseextrapol": 348, "zuchongzhi": 180, "zxz_decomposit": 317, "zyz_decomposit": 318}})