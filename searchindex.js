Search.setIndex({"docnames": ["01_getting_started", "01_getting_started/02_write", "01_getting_started/03_execute", "01_getting_started/04_variational", "01_getting_started/:myqlm:01_install", "01_getting_started/:myqlm:license", "01_getting_started/:myqlm:macos", "02_user_guide", "02_user_guide/01_write", "02_user_guide/01_write/01_digital_circuit", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates", "02_user_guide/01_write/01_digital_circuit/02_variational", "02_user_guide/01_write/01_digital_circuit/03_program", "02_user_guide/01_write/01_digital_circuit/04_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles", "02_user_guide/01_write/01_digital_circuit/05_aqasm", "02_user_guide/01_write/02_analog_schedule", "02_user_guide/01_write/02_analog_schedule/01_building_schedules", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules", "02_user_guide/01_write/02_analog_schedule/03_an_jobs", "02_user_guide/01_write/03_annealing_problems", "02_user_guide/01_write/03_annealing_problems/01_ising", "02_user_guide/01_write/03_annealing_problems/02_qubo", "02_user_guide/01_write/03_annealing_problems/03_comb_prob", "02_user_guide/01_write/03_observable", "02_user_guide/02_execute", "02_user_guide/02_execute/01_job", "02_user_guide/02_execute/01_job/01_sample_job", "02_user_guide/02_execute/01_job/02_observable_job", "02_user_guide/02_execute/01_job/03_automated_batch_generation", "02_user_guide/02_execute/02_result", "02_user_guide/02_execute/03_qpu", "02_user_guide/02_execute/03_qpu/03_annealing", "02_user_guide/02_execute/03_qpu/04_custom_qpu", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg", "02_user_guide/02_execute/04_plugin", "02_user_guide/02_execute/04_plugin/01_custom_plugin", "02_user_guide/02_execute/04_plugin/02_custom_junction", "02_user_guide/02_execute/04_plugin/03_hardware_specs", "02_user_guide/02_execute/05_variational", "04_api_reference", "04_api_reference/module_qat", "04_api_reference/module_qat/:myqlm:module_interop", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmprinter", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend", "04_api_reference/module_qat/:myqlm:module_pylinalg", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate", "04_api_reference/module_qat/module_comm", "04_api_reference/module_qat/module_comm/module_datamodel", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition", "04_api_reference/module_qat/module_comm/module_datamodel/op", "04_api_reference/module_qat/module_comm/module_exceptions", "04_api_reference/module_qat/module_comm/module_exceptions/errortype", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception", "04_api_reference/module_qat/module_comm/module_resource", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel", "04_api_reference/module_qat/module_comm/module_resource/device", "04_api_reference/module_qat/module_comm/module_resource/nodetype", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel", "04_api_reference/module_qat/module_comm/module_shared", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement", "04_api_reference/module_qat/module_comm/module_shared/processingtype", "04_api_reference/module_qat/module_core", "04_api_reference/module_qat/module_core/aggregate_data", "04_api_reference/module_qat/module_core/assert_plugin", "04_api_reference/module_qat/module_core/assert_qpu", "04_api_reference/module_qat/module_core/batch", "04_api_reference/module_qat/module_core/batchresult", "04_api_reference/module_qat/module_core/circuit", "04_api_reference/module_qat/module_core/display", "04_api_reference/module_qat/module_core/evaluate", "04_api_reference/module_qat/module_core/hardwarespecs", "04_api_reference/module_qat/module_core/job", "04_api_reference/module_qat/module_core/load_state_vector_from_bin", "04_api_reference/module_qat/module_core/module_application", "04_api_reference/module_qat/module_core/module_application/application", "04_api_reference/module_qat/module_core/module_application/remoteapplication", "04_api_reference/module_qat/module_core/module_circuit_builder", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable", "04_api_reference/module_qat/module_core/module_gate_set", "04_api_reference/module_qat/module_core/module_gate_set/gateset", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition", "04_api_reference/module_qat/module_core/module_qpu", "04_api_reference/module_qat/module_core/module_qpu/commonqpu", "04_api_reference/module_qat/module_core/module_spins", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer", "04_api_reference/module_qat/module_core/module_variables", "04_api_reference/module_qat/module_core/module_variables/abso", "04_api_reference/module_qat/module_core/module_variables/angle", "04_api_reference/module_qat/module_core/module_variables/arithexpression", "04_api_reference/module_qat/module_core/module_variables/atan2", "04_api_reference/module_qat/module_core/module_variables/cos", "04_api_reference/module_qat/module_core/module_variables/exp", "04_api_reference/module_qat/module_core/module_variables/get_item", "04_api_reference/module_qat/module_core/module_variables/heaviside", "04_api_reference/module_qat/module_core/module_variables/imag", "04_api_reference/module_qat/module_core/module_variables/ln", "04_api_reference/module_qat/module_core/module_variables/real", "04_api_reference/module_qat/module_core/module_variables/sin", "04_api_reference/module_qat/module_core/module_variables/sqrt", "04_api_reference/module_qat/module_core/module_variables/symbol", "04_api_reference/module_qat/module_core/module_variables/vmax", "04_api_reference/module_qat/module_core/observable", "04_api_reference/module_qat/module_core/parameter", "04_api_reference/module_qat/module_core/plot_in_notebook", "04_api_reference/module_qat/module_core/result", "04_api_reference/module_qat/module_core/sample", "04_api_reference/module_qat/module_core/schedule", "04_api_reference/module_qat/module_core/state", "04_api_reference/module_qat/module_core/term", "04_api_reference/module_qat/module_core/topology", "04_api_reference/module_qat/module_core/topologytype", "04_api_reference/module_qat/module_core/variable", "04_api_reference/module_qat/module_core/wavefunction", "04_api_reference/module_qat/module_devices", "04_api_reference/module_qat/module_devices/alltoall", "04_api_reference/module_qat/module_devices/google_sycamore", "04_api_reference/module_qat/module_devices/griddevice", "04_api_reference/module_qat/module_devices/ibm_burlington", "04_api_reference/module_qat/module_devices/ibm_johannesburg", "04_api_reference/module_qat/module_devices/ibm_melbourne", "04_api_reference/module_qat/module_devices/ibm_rueschlikon", "04_api_reference/module_qat/module_devices/ibm_singapore", "04_api_reference/module_qat/module_devices/ibm_tokyo", "04_api_reference/module_qat/module_devices/ibm_yorktown", "04_api_reference/module_qat/module_devices/linedevice", "04_api_reference/module_qat/module_devices/rigetti_agave", "04_api_reference/module_qat/module_devices/rigetti_aspen", "04_api_reference/module_qat/module_devices/squaregriddevice", "04_api_reference/module_qat/module_devices/zuchongzhi", "04_api_reference/module_qat/module_fermion", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian", "04_api_reference/module_qat/module_fermion/fermionhamiltonian", "04_api_reference/module_qat/module_fermion/get_cluster_ops", "04_api_reference/module_qat/module_fermion/get_hf_ket", "04_api_reference/module_qat/module_fermion/guess_init_params", "04_api_reference/module_qat/module_fermion/make_anderson_model", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ", "04_api_reference/module_qat/module_fermion/make_embedded_model", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ", "04_api_reference/module_qat/module_fermion/make_hubbard_model", "04_api_reference/module_qat/module_fermion/make_ldca_circ", "04_api_reference/module_qat/module_fermion/make_mr_circ", "04_api_reference/module_qat/module_fermion/make_mrep_circ", "04_api_reference/module_qat/module_fermion/make_shallow_circ", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine", "04_api_reference/module_qat/module_fermion/molecularhamiltonian", "04_api_reference/module_qat/module_fermion/moleculeinfo", "04_api_reference/module_qat/module_fermion/perform_phase_estimation", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation", "04_api_reference/module_qat/module_fermion/select_active_orbitals", "04_api_reference/module_qat/module_fermion/spinhamiltonian", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis", "04_api_reference/module_qat/module_fusion", "04_api_reference/module_qat/module_fusion/adjacentstrategy", "04_api_reference/module_qat/module_fusion/eagerstrategy", "04_api_reference/module_qat/module_fusion/naivestrategy", "04_api_reference/module_qat/module_generators", "04_api_reference/module_qat/module_generators/abstractgenerator", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator", "04_api_reference/module_qat/module_generators/graphcolouringgenerator", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator", "04_api_reference/module_qat/module_generators/kcliquegenerator", "04_api_reference/module_qat/module_generators/maxcutgenerator", "04_api_reference/module_qat/module_generators/remotebatchgenerator", "04_api_reference/module_qat/module_generators/vertexcovergenerator", "04_api_reference/module_qat/module_hardware", "04_api_reference/module_qat/module_hardware/defaultgatesspecification", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel", "04_api_reference/module_qat/module_hardware/gatesspecification", "04_api_reference/module_qat/module_hardware/hardwaremodel", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model", "04_api_reference/module_qat/module_lang", "04_api_reference/module_qat/module_lang/abstractgate", "04_api_reference/module_qat/module_lang/amplification_step", "04_api_reference/module_qat/module_lang/boolformula", "04_api_reference/module_qat/module_lang/build_gate", "04_api_reference/module_qat/module_lang/cbit", "04_api_reference/module_qat/module_lang/cregister", "04_api_reference/module_qat/module_lang/gate", "04_api_reference/module_qat/module_lang/generate_gate_set", "04_api_reference/module_qat/module_lang/grover_diffusion", "04_api_reference/module_qat/module_lang/householder", "04_api_reference/module_qat/module_lang/kptree", "04_api_reference/module_qat/module_lang/linker", "04_api_reference/module_qat/module_lang/module_arithmetic", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod", "04_api_reference/module_qat/module_lang/module_classarith", "04_api_reference/module_qat/module_lang/module_classarith/add", "04_api_reference/module_qat/module_lang/module_classarith/add_const", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add", "04_api_reference/module_qat/module_lang/module_qftarith", "04_api_reference/module_qat/module_lang/module_qftarith/add", "04_api_reference/module_qat/module_lang/module_qftarith/add_const", "04_api_reference/module_qat/module_lang/module_qftarith/mult", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const", "04_api_reference/module_qat/module_lang/module_qftarith/qft", "04_api_reference/module_qat/module_lang/paramgate", "04_api_reference/module_qat/module_lang/phase_estimation", "04_api_reference/module_qat/module_lang/program", "04_api_reference/module_qat/module_lang/qarithexp", "04_api_reference/module_qat/module_lang/qbit", "04_api_reference/module_qat/module_lang/qbool", "04_api_reference/module_qat/module_lang/qboolarray", "04_api_reference/module_qat/module_lang/qclause", "04_api_reference/module_qat/module_lang/qcompexp", "04_api_reference/module_qat/module_lang/qfunc", "04_api_reference/module_qat/module_lang/qint", "04_api_reference/module_qat/module_lang/qregister", "04_api_reference/module_qat/module_lang/qrout", "04_api_reference/module_qat/module_lang/qroutine", "04_api_reference/module_qat/module_lang/quantum_counting", "04_api_reference/module_qat/module_lang/uniform_distribution", "04_api_reference/module_qat/module_opt", "04_api_reference/module_qat/module_opt/ansatzfactory", "04_api_reference/module_qat/module_opt/bilp", "04_api_reference/module_qat/module_opt/circuitgenerator", "04_api_reference/module_qat/module_opt/clause", "04_api_reference/module_qat/module_opt/combinatorialproblem", "04_api_reference/module_qat/module_opt/graphcolouring", "04_api_reference/module_qat/module_opt/graphpartitioning", "04_api_reference/module_qat/module_opt/ising", "04_api_reference/module_qat/module_opt/kclique", "04_api_reference/module_qat/module_opt/maxcut", "04_api_reference/module_qat/module_opt/mixingfactory", "04_api_reference/module_qat/module_opt/module_mixing_factory", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentaqo", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate", "04_api_reference/module_qat/module_opt/module_results", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult", "04_api_reference/module_qat/module_opt/mwis", "04_api_reference/module_qat/module_opt/numberpartitioning", "04_api_reference/module_qat/module_opt/qubo", "04_api_reference/module_qat/module_opt/schedulegenerator", "04_api_reference/module_qat/module_opt/var", "04_api_reference/module_qat/module_opt/vertexcover", "04_api_reference/module_qat/module_plugins", "04_api_reference/module_qat/module_plugins/abstractplugin", "04_api_reference/module_qat/module_plugins/adaptvqeplugin", "04_api_reference/module_qat/module_plugins/circuitinliner", "04_api_reference/module_qat/module_plugins/costfunctionplugin", "04_api_reference/module_qat/module_plugins/display", "04_api_reference/module_qat/module_plugins/fusionplugin", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer", "04_api_reference/module_qat/module_plugins/junction", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer", "04_api_reference/module_qat/module_plugins/observablesplitter", "04_api_reference/module_qat/module_plugins/optimizer", "04_api_reference/module_qat/module_plugins/psominimizeplugin", "04_api_reference/module_qat/module_plugins/quameleonplugin", "04_api_reference/module_qat/module_plugins/remoteplugin", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin", "04_api_reference/module_qat/module_plugins/seqoptim", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin", "04_api_reference/module_qat/module_plugins/transformobservable", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator", "04_api_reference/module_qat/module_qpus", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing", "04_api_reference/module_qat/module_qpus/classicalqpu", "04_api_reference/module_qat/module_qpus/get_current_qpu", "04_api_reference/module_qat/module_qpus/get_default_qpu", "04_api_reference/module_qat/module_qpus/qpuhandler", "04_api_reference/module_qat/module_qpus/remoteqpu", "04_api_reference/module_qat/module_quops", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase", "04_api_reference/module_qat/module_quops/channelrepresentations", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat", "04_api_reference/module_qat/module_quops/get_average_process_fidelity", "04_api_reference/module_qat/module_quops/get_diamond_norm", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity", "04_api_reference/module_qat/module_quops/get_process_distance", "04_api_reference/module_qat/module_quops/get_state_fidelity", "04_api_reference/module_qat/module_quops/get_trace_distance", "04_api_reference/module_qat/module_quops/is_completely_positive", "04_api_reference/module_qat/module_quops/is_trace_preserving", "04_api_reference/module_qat/module_quops/is_trace_reducing", "04_api_reference/module_qat/module_quops/is_unital", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel", "04_api_reference/module_qat/module_quops/make_depolarizing_channel", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_vector_basis", "04_api_reference/module_qat/module_quops/multikron", "04_api_reference/module_qat/module_quops/parametricamplitudedamping", "04_api_reference/module_qat/module_quops/parametricgatenoise", "04_api_reference/module_qat/module_quops/parametricpuredephasing", "04_api_reference/module_qat/module_quops/parametricquantumchannel", "04_api_reference/module_qat/module_quops/partial_trace", "04_api_reference/module_qat/module_quops/quantumchannel", "04_api_reference/module_qat/module_quops/quantumchannelchi", "04_api_reference/module_qat/module_quops/quantumchannelchoi", "04_api_reference/module_qat/module_quops/quantumchannelkraus", "04_api_reference/module_qat/module_quops/quantumchannelptm", "05_demos", "07_release_notes", ":myqlm:06_support", ":myqlm:interoperability", ":myqlm:interoperability/01_qiskit", ":myqlm:interoperability/02_pyquil", ":myqlm:interoperability/03_cirq", ":myqlm:interoperability/04_projectq", ":myqlm:interoperability/05_openqasm", "combinatorial_optim_applic", "combinatorial_optim_applic/01_np_probs_for_annealing", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob", "combinatorial_optim_applic/02_qaoa", "combinatorial_optim_applic/03_aqo", "combinatorial_optim_applic/04_crossing_lattice", "combinatorial_optim_applic/05_np_problem_generators", "combinatorial_optim_applic/05_np_problem_generators/01_max_cut_generator", "combinatorial_optim_applic/05_np_problem_generators/02_graph_partitioning_generator", "combinatorial_optim_applic/05_np_problem_generators/03_kclique_generator", "combinatorial_optim_applic/05_np_problem_generators/04_vertex_cover_generator", "combinatorial_optim_applic/05_np_problem_generators/05_graph_colouring_generator", "fermion", "fermion/01_hamiltonians", "fermion/02_algorithms", "fermion/03_plugins", "fermion/04_migrating", "index", "interoperability_annealing"], "filenames": ["01_getting_started.rst", "01_getting_started/02_write.rst", "01_getting_started/03_execute.rst", "01_getting_started/04_variational.rst", "01_getting_started/:myqlm:01_install.rst", "01_getting_started/:myqlm:license.rst", "01_getting_started/:myqlm:macos.rst", "02_user_guide.rst", "02_user_guide/01_write.rst", "02_user_guide/01_write/01_digital_circuit.rst", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates.rst", "02_user_guide/01_write/01_digital_circuit/02_variational.rst", "02_user_guide/01_write/01_digital_circuit/03_program.rst", "02_user_guide/01_write/01_digital_circuit/04_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles.rst", "02_user_guide/01_write/01_digital_circuit/05_aqasm.rst", "02_user_guide/01_write/02_analog_schedule.rst", "02_user_guide/01_write/02_analog_schedule/01_building_schedules.rst", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules.rst", "02_user_guide/01_write/02_analog_schedule/03_an_jobs.rst", "02_user_guide/01_write/03_annealing_problems.rst", "02_user_guide/01_write/03_annealing_problems/01_ising.rst", "02_user_guide/01_write/03_annealing_problems/02_qubo.rst", "02_user_guide/01_write/03_annealing_problems/03_comb_prob.rst", "02_user_guide/01_write/03_observable.rst", "02_user_guide/02_execute.rst", "02_user_guide/02_execute/01_job.rst", "02_user_guide/02_execute/01_job/01_sample_job.rst", "02_user_guide/02_execute/01_job/02_observable_job.rst", "02_user_guide/02_execute/01_job/03_automated_batch_generation.rst", "02_user_guide/02_execute/02_result.rst", "02_user_guide/02_execute/03_qpu.rst", "02_user_guide/02_execute/03_qpu/03_annealing.rst", "02_user_guide/02_execute/03_qpu/04_custom_qpu.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg.rst", "02_user_guide/02_execute/04_plugin.rst", "02_user_guide/02_execute/04_plugin/01_custom_plugin.rst", "02_user_guide/02_execute/04_plugin/02_custom_junction.rst", "02_user_guide/02_execute/04_plugin/03_hardware_specs.rst", "02_user_guide/02_execute/05_variational.rst", "04_api_reference.rst", "04_api_reference/module_qat.rst", "04_api_reference/module_qat/:myqlm:module_interop.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmprinter.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate.rst", "04_api_reference/module_qat/module_comm.rst", "04_api_reference/module_qat/module_comm/module_datamodel.rst", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition.rst", "04_api_reference/module_qat/module_comm/module_datamodel/op.rst", "04_api_reference/module_qat/module_comm/module_exceptions.rst", "04_api_reference/module_qat/module_comm/module_exceptions/errortype.rst", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception.rst", "04_api_reference/module_qat/module_comm/module_resource.rst", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel.rst", "04_api_reference/module_qat/module_comm/module_resource/device.rst", "04_api_reference/module_qat/module_comm/module_resource/nodetype.rst", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel.rst", "04_api_reference/module_qat/module_comm/module_shared.rst", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement.rst", "04_api_reference/module_qat/module_comm/module_shared/processingtype.rst", "04_api_reference/module_qat/module_core.rst", "04_api_reference/module_qat/module_core/aggregate_data.rst", "04_api_reference/module_qat/module_core/assert_plugin.rst", "04_api_reference/module_qat/module_core/assert_qpu.rst", "04_api_reference/module_qat/module_core/batch.rst", "04_api_reference/module_qat/module_core/batchresult.rst", "04_api_reference/module_qat/module_core/circuit.rst", "04_api_reference/module_qat/module_core/display.rst", "04_api_reference/module_qat/module_core/evaluate.rst", "04_api_reference/module_qat/module_core/hardwarespecs.rst", "04_api_reference/module_qat/module_core/job.rst", "04_api_reference/module_qat/module_core/load_state_vector_from_bin.rst", "04_api_reference/module_qat/module_core/module_application.rst", "04_api_reference/module_qat/module_core/module_application/application.rst", "04_api_reference/module_qat/module_core/module_application/remoteapplication.rst", "04_api_reference/module_qat/module_core/module_circuit_builder.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable.rst", "04_api_reference/module_qat/module_core/module_gate_set.rst", "04_api_reference/module_qat/module_core/module_gate_set/gateset.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition.rst", "04_api_reference/module_qat/module_core/module_qpu.rst", "04_api_reference/module_qat/module_core/module_qpu/commonqpu.rst", "04_api_reference/module_qat/module_core/module_spins.rst", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins.rst", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer.rst", "04_api_reference/module_qat/module_core/module_variables.rst", "04_api_reference/module_qat/module_core/module_variables/abso.rst", "04_api_reference/module_qat/module_core/module_variables/angle.rst", "04_api_reference/module_qat/module_core/module_variables/arithexpression.rst", "04_api_reference/module_qat/module_core/module_variables/atan2.rst", "04_api_reference/module_qat/module_core/module_variables/cos.rst", "04_api_reference/module_qat/module_core/module_variables/exp.rst", "04_api_reference/module_qat/module_core/module_variables/get_item.rst", "04_api_reference/module_qat/module_core/module_variables/heaviside.rst", "04_api_reference/module_qat/module_core/module_variables/imag.rst", "04_api_reference/module_qat/module_core/module_variables/ln.rst", "04_api_reference/module_qat/module_core/module_variables/real.rst", "04_api_reference/module_qat/module_core/module_variables/sin.rst", "04_api_reference/module_qat/module_core/module_variables/sqrt.rst", "04_api_reference/module_qat/module_core/module_variables/symbol.rst", "04_api_reference/module_qat/module_core/module_variables/vmax.rst", "04_api_reference/module_qat/module_core/observable.rst", "04_api_reference/module_qat/module_core/parameter.rst", "04_api_reference/module_qat/module_core/plot_in_notebook.rst", "04_api_reference/module_qat/module_core/result.rst", "04_api_reference/module_qat/module_core/sample.rst", "04_api_reference/module_qat/module_core/schedule.rst", "04_api_reference/module_qat/module_core/state.rst", "04_api_reference/module_qat/module_core/term.rst", "04_api_reference/module_qat/module_core/topology.rst", "04_api_reference/module_qat/module_core/topologytype.rst", "04_api_reference/module_qat/module_core/variable.rst", "04_api_reference/module_qat/module_core/wavefunction.rst", "04_api_reference/module_qat/module_devices.rst", "04_api_reference/module_qat/module_devices/alltoall.rst", "04_api_reference/module_qat/module_devices/google_sycamore.rst", "04_api_reference/module_qat/module_devices/griddevice.rst", "04_api_reference/module_qat/module_devices/ibm_burlington.rst", "04_api_reference/module_qat/module_devices/ibm_johannesburg.rst", "04_api_reference/module_qat/module_devices/ibm_melbourne.rst", "04_api_reference/module_qat/module_devices/ibm_rueschlikon.rst", "04_api_reference/module_qat/module_devices/ibm_singapore.rst", "04_api_reference/module_qat/module_devices/ibm_tokyo.rst", "04_api_reference/module_qat/module_devices/ibm_yorktown.rst", "04_api_reference/module_qat/module_devices/linedevice.rst", "04_api_reference/module_qat/module_devices/rigetti_agave.rst", "04_api_reference/module_qat/module_devices/rigetti_aspen.rst", "04_api_reference/module_qat/module_devices/squaregriddevice.rst", "04_api_reference/module_qat/module_devices/zuchongzhi.rst", "04_api_reference/module_qat/module_fermion.rst", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion.rst", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals.rst", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz.rst", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals.rst", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian.rst", "04_api_reference/module_qat/module_fermion/fermionhamiltonian.rst", "04_api_reference/module_qat/module_fermion/get_cluster_ops.rst", "04_api_reference/module_qat/module_fermion/get_hf_ket.rst", "04_api_reference/module_qat/module_fermion/guess_init_params.rst", "04_api_reference/module_qat/module_fermion/make_anderson_model.rst", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_embedded_model.rst", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ.rst", "04_api_reference/module_qat/module_fermion/make_hubbard_model.rst", "04_api_reference/module_qat/module_fermion/make_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_mr_circ.rst", "04_api_reference/module_qat/module_fermion/make_mrep_circ.rst", "04_api_reference/module_qat/module_fermion/make_shallow_circ.rst", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine.rst", "04_api_reference/module_qat/module_fermion/molecularhamiltonian.rst", "04_api_reference/module_qat/module_fermion/moleculeinfo.rst", "04_api_reference/module_qat/module_fermion/perform_phase_estimation.rst", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation.rst", "04_api_reference/module_qat/module_fermion/select_active_orbitals.rst", "04_api_reference/module_qat/module_fermion/spinhamiltonian.rst", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis.rst", "04_api_reference/module_qat/module_fusion.rst", "04_api_reference/module_qat/module_fusion/adjacentstrategy.rst", "04_api_reference/module_qat/module_fusion/eagerstrategy.rst", "04_api_reference/module_qat/module_fusion/naivestrategy.rst", "04_api_reference/module_qat/module_generators.rst", "04_api_reference/module_qat/module_generators/abstractgenerator.rst", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator.rst", "04_api_reference/module_qat/module_generators/graphcolouringgenerator.rst", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator.rst", "04_api_reference/module_qat/module_generators/kcliquegenerator.rst", "04_api_reference/module_qat/module_generators/maxcutgenerator.rst", "04_api_reference/module_qat/module_generators/remotebatchgenerator.rst", "04_api_reference/module_qat/module_generators/vertexcovergenerator.rst", "04_api_reference/module_qat/module_hardware.rst", "04_api_reference/module_qat/module_hardware/defaultgatesspecification.rst", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel.rst", "04_api_reference/module_qat/module_hardware/gatesspecification.rst", "04_api_reference/module_qat/module_hardware/hardwaremodel.rst", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model.rst", "04_api_reference/module_qat/module_lang.rst", "04_api_reference/module_qat/module_lang/abstractgate.rst", "04_api_reference/module_qat/module_lang/amplification_step.rst", "04_api_reference/module_qat/module_lang/boolformula.rst", "04_api_reference/module_qat/module_lang/build_gate.rst", "04_api_reference/module_qat/module_lang/cbit.rst", "04_api_reference/module_qat/module_lang/cregister.rst", "04_api_reference/module_qat/module_lang/gate.rst", "04_api_reference/module_qat/module_lang/generate_gate_set.rst", "04_api_reference/module_qat/module_lang/grover_diffusion.rst", "04_api_reference/module_qat/module_lang/householder.rst", "04_api_reference/module_qat/module_lang/kptree.rst", "04_api_reference/module_qat/module_lang/linker.rst", "04_api_reference/module_qat/module_lang/module_arithmetic.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod.rst", "04_api_reference/module_qat/module_lang/module_classarith.rst", "04_api_reference/module_qat/module_lang/module_classarith/add.rst", "04_api_reference/module_qat/module_lang/module_classarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add.rst", "04_api_reference/module_qat/module_lang/module_qftarith.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/qft.rst", "04_api_reference/module_qat/module_lang/paramgate.rst", "04_api_reference/module_qat/module_lang/phase_estimation.rst", "04_api_reference/module_qat/module_lang/program.rst", "04_api_reference/module_qat/module_lang/qarithexp.rst", "04_api_reference/module_qat/module_lang/qbit.rst", "04_api_reference/module_qat/module_lang/qbool.rst", "04_api_reference/module_qat/module_lang/qboolarray.rst", "04_api_reference/module_qat/module_lang/qclause.rst", "04_api_reference/module_qat/module_lang/qcompexp.rst", "04_api_reference/module_qat/module_lang/qfunc.rst", "04_api_reference/module_qat/module_lang/qint.rst", "04_api_reference/module_qat/module_lang/qregister.rst", "04_api_reference/module_qat/module_lang/qrout.rst", "04_api_reference/module_qat/module_lang/qroutine.rst", "04_api_reference/module_qat/module_lang/quantum_counting.rst", "04_api_reference/module_qat/module_lang/uniform_distribution.rst", "04_api_reference/module_qat/module_opt.rst", "04_api_reference/module_qat/module_opt/ansatzfactory.rst", "04_api_reference/module_qat/module_opt/bilp.rst", "04_api_reference/module_qat/module_opt/circuitgenerator.rst", "04_api_reference/module_qat/module_opt/clause.rst", "04_api_reference/module_qat/module_opt/combinatorialproblem.rst", "04_api_reference/module_qat/module_opt/graphcolouring.rst", "04_api_reference/module_qat/module_opt/graphpartitioning.rst", "04_api_reference/module_qat/module_opt/ising.rst", "04_api_reference/module_qat/module_opt/kclique.rst", "04_api_reference/module_qat/module_opt/maxcut.rst", "04_api_reference/module_qat/module_opt/mixingfactory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentaqo.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate.rst", "04_api_reference/module_qat/module_opt/module_results.rst", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult.rst", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult.rst", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult.rst", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult.rst", "04_api_reference/module_qat/module_opt/mwis.rst", "04_api_reference/module_qat/module_opt/numberpartitioning.rst", "04_api_reference/module_qat/module_opt/qubo.rst", "04_api_reference/module_qat/module_opt/schedulegenerator.rst", "04_api_reference/module_qat/module_opt/var.rst", "04_api_reference/module_qat/module_opt/vertexcover.rst", "04_api_reference/module_qat/module_plugins.rst", "04_api_reference/module_qat/module_plugins/abstractplugin.rst", "04_api_reference/module_qat/module_plugins/adaptvqeplugin.rst", "04_api_reference/module_qat/module_plugins/circuitinliner.rst", "04_api_reference/module_qat/module_plugins/costfunctionplugin.rst", "04_api_reference/module_qat/module_plugins/display.rst", "04_api_reference/module_qat/module_plugins/fusionplugin.rst", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer.rst", "04_api_reference/module_qat/module_plugins/junction.rst", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer.rst", "04_api_reference/module_qat/module_plugins/observablesplitter.rst", "04_api_reference/module_qat/module_plugins/optimizer.rst", "04_api_reference/module_qat/module_plugins/psominimizeplugin.rst", "04_api_reference/module_qat/module_plugins/quameleonplugin.rst", "04_api_reference/module_qat/module_plugins/remoteplugin.rst", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/seqoptim.rst", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/transformobservable.rst", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator.rst", "04_api_reference/module_qat/module_qpus.rst", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing.rst", "04_api_reference/module_qat/module_qpus/classicalqpu.rst", "04_api_reference/module_qat/module_qpus/get_current_qpu.rst", "04_api_reference/module_qat/module_qpus/get_default_qpu.rst", "04_api_reference/module_qat/module_qpus/qpuhandler.rst", "04_api_reference/module_qat/module_qpus/remoteqpu.rst", "04_api_reference/module_qat/module_quops.rst", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase.rst", "04_api_reference/module_qat/module_quops/channelrepresentations.rst", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec.rst", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat.rst", "04_api_reference/module_qat/module_quops/get_average_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_diamond_norm.rst", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_process_distance.rst", "04_api_reference/module_qat/module_quops/get_state_fidelity.rst", "04_api_reference/module_qat/module_quops/get_trace_distance.rst", "04_api_reference/module_qat/module_quops/is_completely_positive.rst", "04_api_reference/module_qat/module_quops/is_trace_preserving.rst", "04_api_reference/module_qat/module_quops/is_trace_reducing.rst", "04_api_reference/module_qat/module_quops/is_unital.rst", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel.rst", "04_api_reference/module_qat/module_quops/make_depolarizing_channel.rst", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping.rst", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_vector_basis.rst", "04_api_reference/module_qat/module_quops/multikron.rst", "04_api_reference/module_qat/module_quops/parametricamplitudedamping.rst", "04_api_reference/module_qat/module_quops/parametricgatenoise.rst", "04_api_reference/module_qat/module_quops/parametricpuredephasing.rst", "04_api_reference/module_qat/module_quops/parametricquantumchannel.rst", "04_api_reference/module_qat/module_quops/partial_trace.rst", "04_api_reference/module_qat/module_quops/quantumchannel.rst", "04_api_reference/module_qat/module_quops/quantumchannelchi.rst", "04_api_reference/module_qat/module_quops/quantumchannelchoi.rst", "04_api_reference/module_qat/module_quops/quantumchannelkraus.rst", "04_api_reference/module_qat/module_quops/quantumchannelptm.rst", "05_demos.rst", "07_release_notes.rst", ":myqlm:06_support.rst", ":myqlm:interoperability.rst", ":myqlm:interoperability/01_qiskit.rst", ":myqlm:interoperability/02_pyquil.rst", ":myqlm:interoperability/03_cirq.rst", ":myqlm:interoperability/04_projectq.rst", ":myqlm:interoperability/05_openqasm.rst", "combinatorial_optim_applic.rst", "combinatorial_optim_applic/01_np_probs_for_annealing.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob.rst", "combinatorial_optim_applic/02_qaoa.rst", "combinatorial_optim_applic/03_aqo.rst", "combinatorial_optim_applic/04_crossing_lattice.rst", "combinatorial_optim_applic/05_np_problem_generators.rst", "combinatorial_optim_applic/05_np_problem_generators/01_max_cut_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/02_graph_partitioning_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/03_kclique_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/04_vertex_cover_generator.rst", "combinatorial_optim_applic/05_np_problem_generators/05_graph_colouring_generator.rst", "fermion.rst", "fermion/01_hamiltonians.rst", "fermion/02_algorithms.rst", "fermion/03_plugins.rst", "fermion/04_migrating.rst", "index.rst", "interoperability_annealing.rst"], "titles": ["Getting started", "Writing quantum programs", "Executing quantum programs", "Variational algorithms with Qaptiva", "Installing myQLM", "myQLM license", "myQLM Installation on MacOS", "User guide", "Writing quantum programs", "Gate-based programming", "Creating and adding quantum gates to a circuit", "Creating variational circuits", "Quantum programs", "Quantum routines (and Oracles)", "Naming quantum routines", "Ancillae management and compute scopes", "Oracles and quantum types", "Atos Quantum Assembler (AQASM)", "Analog programming", "Building schedules", "Manipulating schedules", "Analog Jobs", "Annealing programming", "Ising Hamiltonians", "Quadratic Unconstrained Binary Optimization (QUBO)", "General Combinatorial Problems", "Creating observables", "Executing / Simulating quantum programs", "Constructing one or multiple Jobs (using Batch)", "Sample Job", "Observable Job", "Automated batch generation", "Result of a quantum program", "Quantum Processing Unit (QPU)", "SQA computing", "Make your own QPU", "Gate based computing", "CLinalg: C++ Linear-algebra-based simulator", "PyLinalg: Python Linear-algebra-based simulator", "Extending a QPU (by using Plugins)", "Make your own plugin", "Make you own junction", "Getting information from the QPU", "Running variational algorithms", "API reference", "qat", "qat.interop", "qat.interop.cirq", "qat.interop.cirq.cirq_to_qlm", "qat.interop.cirq.qlm_to_cirq", "qat.interop.openqasm", "qat.interop.openqasm.OqasmParser", "qat.interop.projectq", "qat.interop.projectq.AqasmEngine", "qat.interop.projectq.AqasmPrinter", "qat.interop.pyquil", "qat.interop.pyquil.pyquil_to_qlm", "qat.interop.pyquil.PyquilQPU", "qat.interop.pyquil.qlm_to_pyquil", "qat.interop.qiskit", "qat.interop.qiskit.AsyncBackendToQPU", "qat.interop.qiskit.BackendToQPU", "qat.interop.qiskit.qiskit_to_qlm", "qat.interop.qiskit.QiskitJob", "qat.interop.qiskit.runtime.QiskitRuntimeQPU", "qat.interop.qiskit.qlm_to_qiskit", "qat.interop.qiskit.QPUToBackend", "qat.pylinalg", "qat.pylinalg.simulator", "qat.pylinalg.simulator.mat2nparray", "qat.pylinalg.simulator.measure", "qat.pylinalg.simulator.project", "qat.pylinalg.simulator.raise_break", "qat.pylinalg.simulator.reset", "qat.pylinalg.simulator.simulate", "qat.comm", "qat.comm.datamodel", "qat.comm.datamodel.ttypes.GateDefinition", "qat.comm.datamodel.ttypes.Op", "qat.comm.exceptions", "qat.comm.exceptions.ttypes.ErrorType", "qat.comm.exceptions.ttypes.PluginException", "qat.comm.exceptions.ttypes.QPUException", "qat.comm.resource", "qat.comm.resource.ttypes.AllocationModel", "qat.comm.resource.ttypes.Device", "qat.comm.resource.ttypes.NodeType", "qat.comm.resource.ttypes.ResourceModel", "qat.comm.shared", "qat.comm.shared.ttypes.IntermediateMeasurement", "qat.comm.shared.ttypes.ProcessingType", "qat.core", "qat.core.wrappers.result.aggregate_data", "qat.core.assertion.assert_plugin", "qat.core.assertion.assert_qpu", "qat.core.Batch", "qat.core.BatchResult", "qat.core.Circuit", "qat.core.console.display", "qat.core.formula_eval.evaluate", "qat.core.HardwareSpecs", "qat.core.Job", "qat.core.util.load_state_vector_from_bin", "qat.core.application", "qat.core.application.Application", "qat.core.application.RemoteApplication", "qat.core.circuit_builder", "qat.core.circuit_builder.matrix_util.default_gate_set", "qat.core.circuit_builder.matrix_util.get_param_generator", "qat.core.circuit_builder.matrix_util.get_predef_generator", "qat.core.circuit_builder.builder.VariableNameNotAvailable", "qat.core.gate_set", "qat.core.gate_set.GateSet", "qat.core.gate_set.GateSignature", "qat.core.gate_set.GateSyntaxRedefinition", "qat.core.qpu", "qat.core.qpu.CommonQPU", "qat.core.spins", "qat.core.spins.integer_to_spins", "qat.core.spins.spins_to_integer", "qat.core.variables", "qat.core.variables.abso", "qat.core.variables.angle", "qat.core.variables.ArithExpression", "qat.core.variables.atan2", "qat.core.variables.cos", "qat.core.variables.exp", "qat.core.variables.get_item", "qat.core.variables.heaviside", "qat.core.variables.imag", "qat.core.variables.ln", "qat.core.variables.real", "qat.core.variables.sin", "qat.core.variables.sqrt", "qat.core.variables.Symbol", "qat.core.variables.vmax", "qat.core.Observable", "qat.core.Parameter", "qat.core.printer.plot_in_notebook", "qat.core.Result", "qat.core.Sample", "qat.core.Schedule", "qat.core.wrappers.result.State", "qat.core.Term", "qat.core.Topology", "qat.core.TopologyType", "qat.core.Variable", "qat.core.simutil.wavefunction", "qat.devices", "qat.devices.AllToAll", "qat.devices.GOOGLE_SYCAMORE", "qat.devices.GridDevice", "qat.devices.IBM_BURLINGTON", "qat.devices.IBM_JOHANNESBURG", "qat.devices.IBM_MELBOURNE", "qat.devices.IBM_RUESCHLIKON", "qat.devices.IBM_SINGAPORE", "qat.devices.IBM_TOKYO", "qat.devices.IBM_YORKTOWN", "qat.devices.LineDevice", "qat.devices.RIGETTI_AGAVE", "qat.devices.RIGETTI_ASPEN", "qat.devices.SquareGridDevice", "qat.devices.ZUCHONGZHI", "qat.fermion", "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", "qat.fermion.chemistry.ucc.compute_active_space_integrals", "qat.fermion.chemistry.ucc.construct_ucc_ansatz", "qat.fermion.chemistry.ucc.convert_to_h_integrals", "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", "qat.fermion.hamiltonians.FermionHamiltonian", "qat.fermion.chemistry.ucc.get_cluster_ops", "qat.fermion.chemistry.ucc.get_hf_ket", "qat.fermion.chemistry.ucc.guess_init_params", "qat.fermion.hamiltonians.make_anderson_model", "qat.fermion.circuits.make_compressed_ldca_circ", "qat.fermion.hamiltonians.make_embedded_model", "qat.fermion.circuits.make_general_hwe_circ", "qat.fermion.hamiltonians.make_hubbard_model", "qat.fermion.circuits.make_ldca_circ", "qat.fermion.circuits.make_mr_circ", "qat.fermion.circuits.make_mrep_circ", "qat.fermion.circuits.make_shallow_circ", "qat.fermion.trotterisation.make_trotterisation_routine", "qat.fermion.chemistry.wrapper.MolecularHamiltonian", "qat.fermion.chemistry.wrapper.MoleculeInfo", "qat.fermion.phase_estimation.perform_phase_estimation", "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", "qat.fermion.chemistry.ucc.select_active_orbitals", "qat.fermion.hamiltonians.SpinHamiltonian", "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", "qat.fermion.transforms.transform_to_bk_basis", "qat.fermion.transforms.transform_to_jw_basis", "qat.fermion.transforms.transform_to_parity_basis", "qat.fusion", "qat.fusion.strategies.AdjacentStrategy", "qat.fusion.strategies.EagerStrategy", "qat.fusion.strategies.NaiveStrategy", "qat.generators", "qat.generators.AbstractGenerator", "qat.generators.CombinatorialOptimizerGenerator", "qat.generators.GraphColouringGenerator", "qat.generators.GraphPartitioningGenerator", "qat.generators.KCliqueGenerator", "qat.generators.MaxCutGenerator", "qat.generators.RemoteBatchGenerator", "qat.generators.VertexCoverGenerator", "qat.hardware", "qat.hardware.DefaultGatesSpecification", "qat.hardware.DefaultHardwareModel", "qat.hardware.GatesSpecification", "qat.hardware.HardwareModel", "qat.hardware.make_depolarizing_hardware_model", "qat.lang", "qat.lang.AbstractGate", "qat.lang.algorithms.amplification_step", "qat.lang.AQASM.bits.BoolFormula", "qat.lang.build_gate", "qat.lang.AQASM.bits.Cbit", "qat.lang.AQASM.bits.CRegister", "qat.lang.AQASM.gates.Gate", "qat.lang.AQASM.misc.generate_gate_set", "qat.lang.algorithms.amplification.grover_diffusion", "qat.lang.algorithms.amplification.householder", "qat.lang.models.KPTree", "qat.lang.linking.Linker", "qat.lang.AQASM.arithmetic", "qat.lang.AQASM.arithmetic.add_const_mod", "qat.lang.AQASM.arithmetic.add_mod", "qat.lang.AQASM.arithmetic.modular_exp", "qat.lang.AQASM.arithmetic.mult_const", "qat.lang.AQASM.arithmetic.mult_const_mod", "qat.lang.AQASM.classarith", "qat.lang.AQASM.classarith.add", "qat.lang.AQASM.classarith.add_const", "qat.lang.AQASM.classarith.cuccaro_add", "qat.lang.AQASM.qftarith", "qat.lang.AQASM.qftarith.add", "qat.lang.AQASM.qftarith.add_const", "qat.lang.AQASM.qftarith.mult", "qat.lang.AQASM.qftarith.mult_const", "qat.lang.AQASM.qftarith.QFT", "qat.lang.AQASM.gates.ParamGate", "qat.lang.algorithms.phase_estimation", "qat.lang.Program", "qat.lang.AQASM.qint.QArithExp", "qat.lang.AQASM.bits.Qbit", "qat.lang.AQASM.qbool.QBool", "qat.lang.AQASM.qbool.QBoolArray", "qat.lang.AQASM.qbool.QClause", "qat.lang.AQASM.qint.QCompExp", "qat.lang.qfunc", "qat.lang.AQASM.qint.QInt", "qat.lang.AQASM.bits.QRegister", "qat.lang.qrout", "qat.lang.QRoutine", "qat.lang.algorithms.quantum_counting", "qat.lang.algorithms.amplification.uniform_distribution", "qat.opt", "qat.vsolve.ansatz.AnsatzFactory", "qat.opt.BILP", "qat.opt.circuit_generator.CircuitGenerator", "qat.opt.boolexpr.Clause", "qat.opt.CombinatorialProblem", "qat.opt.GraphColouring", "qat.opt.GraphPartitioning", "qat.opt.Ising", "qat.opt.KClique", "qat.opt.MaxCut", "qat.opt.MixingFactory", "qat.opt.mixing_factory", "qat.opt.mixing_factory.IndependentAQO", "qat.opt.mixing_factory.InitialStateBuilder", "qat.opt.mixing_factory.SimpleInitialState", "qat.opt.results", "qat.opt.results.CombinatorialResult", "qat.opt.results.GraphPartitioningResult", "qat.opt.results.KCliqueResult", "qat.opt.results.VertexCoverResult", "qat.opt.MWIS", "qat.opt.NumberPartitioning", "qat.opt.QUBO", "qat.opt.schedule_generator.ScheduleGenerator", "qat.opt.boolexpr.Var", "qat.opt.VertexCover", "qat.plugins", "qat.plugins.AbstractPlugin", "qat.plugins.AdaptVQEPlugin", "qat.plugins.CircuitInliner", "qat.plugins.CostFunctionPlugin", "qat.plugins.Display", "qat.plugins.FusionPlugin", "qat.plugins.GradientDescentOptimizer", "qat.plugins.Junction", "qat.plugins.MultipleLaunchesAnalyzer", "qat.plugins.ObservableSplitter", "qat.plugins.Optimizer", "qat.plugins.PSOMinimizePlugin", "qat.plugins.QuameleonPlugin", "qat.plugins.RemotePlugin", "qat.plugins.ScipyMinimizePlugin", "qat.plugins.SeqOptim", "qat.plugins.SPSAMinimizePlugin", "qat.plugins.TransformObservable", "qat.plugins.ZeroNoiseExtrapolator", "qat.qpus", "qat.qpus.CLinalg", "qat.qpus.PyLinalg", "qat.qpus.SimulatedAnnealing", "qat.qpus.ClassicalQPU", "qat.qpus.get_current_qpu", "qat.qpus.get_default_qpu", "qat.qpus.QPUHandler", "qat.qpus.RemoteQPU", "qat.quops", "qat.quops.math_util.are_equal_up_to_phase", "qat.quops.ChannelRepresentations", "qat.quops.math_util.convert_density_mat_to_pauli_vec", "qat.quops.math_util.convert_pauli_vec_to_density_mat", "qat.quops.metrics.get_average_process_fidelity", "qat.quops.metrics.get_diamond_norm", "qat.quops.metrics.get_entanglement_process_fidelity", "qat.quops.metrics.get_process_distance", "qat.quops.metrics.get_state_fidelity", "qat.quops.metrics.get_trace_distance", "qat.quops.is_completely_positive", "qat.quops.is_trace_preserving", "qat.quops.is_trace_reducing", "qat.quops.is_unital", "qat.quops.make_avg_fid_equiv_depol_channel", "qat.quops.make_depolarizing_channel", "qat.quops.make_generalized_amplitude_damping", "qat.quops.math_util.make_pauli_matrix_basis", "qat.quops.math_util.make_standard_matrix_basis", "qat.quops.math_util.make_standard_vector_basis", "qat.quops.math_util.multikron", "qat.quops.ParametricAmplitudeDamping", "qat.quops.ParametricGateNoise", "qat.quops.ParametricPureDephasing", "qat.quops.ParametricQuantumChannel", "qat.quops.math_util.partial_trace", "qat.quops.QuantumChannel", "qat.quops.QuantumChannelChi", "qat.quops.QuantumChannelChoi", "qat.quops.QuantumChannelKraus", "qat.quops.QuantumChannelPTM", "Demos", "Release notes", "Contributing to myQLM", "Interoperability with gate-based framework", "Qiskit interoperability", "PyQuil interoperability", "Cirq interoperability", "ProjectQ interoperability", "OpenQASM Compiler", "Combinatorial optimization", "NP-hard problems", "Graph Partitioning", "KClique", "Max Cut", "Number Partitioning", "Vertex Cover", "Quantum Approximate Optimization Algorithm (QAOA)", "Adiabatic Quantum Optimization (AQO)", "Crossing lattice", "Problem generators", "Max Cut Generator", "Graph Partitioning Generator", "K-Clique Generator", "Vertex Cover Generator", "Graph Colouring Generator", "Spin and fermionic systems", "Creating and manipulating Hamiltonians", "Quantum application (including Ans\u00e4tze and state preparation)", "Plugins", "Migrating code based on deprecated library qat.dqs", "myQLM \u2013 Quantum Python Package", "Interoperability with annealing framework"], "terms": {"myqlm": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377], "qaptiva": [0, 1, 11, 12, 18, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 43, 47, 52, 55, 59, 84, 86, 120, 147, 164, 186, 198, 261, 263, 266, 279, 281, 285, 314, 349, 356, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374], "contain": [0, 1, 2, 4, 5, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 51, 63, 67, 69, 70, 73, 74, 77, 78, 79, 80, 97, 98, 101, 102, 106, 108, 116, 127, 137, 139, 141, 143, 146, 148, 169, 170, 186, 187, 196, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 220, 226, 243, 244, 245, 254, 255, 256, 260, 261, 263, 264, 265, 266, 267, 268, 274, 275, 279, 280, 281, 284, 291, 300, 307, 308, 316, 346, 347, 354, 362, 372, 374], "tool": [0, 1, 8, 9, 11, 12, 16, 31, 39, 43, 51, 91, 164, 356, 371, 372, 376], "write": [0, 3, 5, 7, 10, 11, 16, 17, 23, 24, 41, 43, 77, 164, 165, 214, 229, 251, 279, 289, 346, 372, 373, 376], "optim": [0, 3, 5, 7, 11, 12, 22, 23, 25, 31, 32, 34, 39, 41, 43, 61, 165, 200, 201, 202, 203, 204, 206, 244, 261, 263, 266, 269, 271, 272, 275, 276, 279, 281, 282, 289, 292, 294, 297, 300, 301, 302, 304, 312, 347, 356, 366, 371, 373, 374, 375, 376], "simul": [0, 3, 5, 7, 9, 10, 12, 18, 21, 22, 23, 25, 28, 29, 32, 34, 35, 45, 57, 60, 61, 67, 79, 91, 97, 140, 141, 147, 186, 194, 213, 214, 226, 244, 260, 263, 264, 265, 266, 267, 268, 269, 279, 280, 281, 284, 288, 291, 298, 306, 307, 308, 309, 355, 357, 358, 359, 360, 361, 376], "quantum": [0, 3, 4, 5, 7, 9, 11, 15, 18, 21, 23, 24, 25, 26, 28, 31, 34, 35, 36, 38, 39, 41, 43, 57, 60, 61, 64, 68, 69, 71, 76, 77, 78, 88, 90, 91, 97, 139, 140, 141, 142, 148, 165, 186, 198, 207, 208, 209, 210, 214, 215, 220, 223, 224, 225, 226, 232, 236, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 258, 260, 263, 264, 265, 266, 267, 268, 269, 271, 272, 279, 280, 281, 282, 284, 285, 291, 300, 305, 308, 309, 316, 320, 321, 325, 326, 327, 328, 337, 339, 341, 342, 343, 344, 345, 349, 355, 365, 371, 372, 374], "program": [0, 3, 4, 7, 10, 11, 13, 14, 15, 16, 29, 30, 31, 40, 41, 48, 56, 62, 77, 79, 91, 97, 98, 165, 167, 215, 216, 224, 225, 226, 229, 247, 248, 252, 253, 255, 258, 260, 289, 291, 298, 309, 355, 356, 363, 373, 374, 376], "These": [0, 1, 4, 7, 9, 12, 16, 33, 42, 51, 62, 78, 97, 101, 111, 123, 213, 216, 224, 225, 254, 260, 264, 265, 267, 268, 280, 284, 347, 349, 356, 365, 371, 372, 373, 374], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 33, 35, 39, 43, 48, 51, 53, 56, 62, 65, 68, 69, 75, 77, 78, 79, 80, 91, 96, 97, 98, 101, 104, 105, 111, 113, 123, 124, 137, 141, 143, 145, 146, 148, 164, 168, 169, 170, 176, 177, 183, 184, 186, 198, 199, 202, 203, 206, 208, 209, 211, 213, 214, 216, 224, 225, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 249, 252, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 279, 280, 281, 284, 285, 286, 288, 289, 290, 291, 292, 293, 298, 299, 301, 302, 305, 306, 307, 312, 313, 314, 315, 330, 336, 338, 344, 346, 347, 349, 355, 356, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "packag": [0, 5, 6, 12, 187, 233, 244, 311, 371, 373], "python": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 33, 37, 104, 113, 134, 140, 146, 205, 221, 225, 244, 245, 247, 248, 251, 288, 289, 305, 349, 351, 354], "librari": [0, 1, 4, 9, 10, 12, 14, 36, 38, 39, 46, 120, 124, 213, 263, 266, 279, 281, 346, 371, 373, 377], "name": [0, 5, 8, 10, 13, 17, 21, 23, 35, 39, 51, 60, 61, 63, 64, 77, 78, 79, 87, 95, 96, 97, 98, 100, 101, 106, 110, 113, 114, 123, 136, 138, 139, 141, 144, 146, 213, 217, 220, 225, 242, 244, 254, 259, 263, 266, 279, 303, 309, 314, 336, 338, 342, 343, 344, 345, 347, 372, 377], "qat": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377], "applic": [0, 5, 12, 16, 17, 18, 31, 34, 39, 45, 78, 91, 147, 209, 211, 224, 244, 269, 301, 355, 363, 365, 371], "toolset": [0, 39], "also": [0, 5, 8, 9, 10, 12, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 39, 41, 43, 78, 97, 136, 139, 141, 148, 185, 186, 187, 199, 208, 210, 224, 251, 252, 254, 255, 260, 263, 264, 265, 266, 267, 268, 274, 279, 280, 281, 284, 296, 301, 304, 307, 309, 313, 314, 347, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377], "interfac": [0, 4, 5, 8, 9, 11, 26, 34, 36, 37, 41, 60, 115, 116, 199, 244, 258, 261, 269, 270, 272, 282, 286, 293, 296, 305, 308, 312, 347, 362, 373, 376], "applianc": [0, 18, 31, 33, 34, 35, 36, 39, 120, 263, 266, 279, 281, 347, 356, 365, 371], "eviden": [0, 85, 376], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 60, 61, 62, 63, 64, 66, 67, 71, 75, 77, 78, 79, 80, 83, 86, 89, 91, 92, 97, 98, 100, 101, 104, 118, 120, 123, 134, 136, 137, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 169, 170, 171, 174, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 194, 198, 199, 200, 202, 203, 205, 206, 207, 209, 211, 213, 214, 215, 216, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 304, 306, 307, 309, 311, 312, 314, 316, 321, 336, 338, 346, 347, 348, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 377], "provid": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 26, 28, 31, 35, 39, 40, 41, 42, 51, 57, 60, 61, 64, 66, 68, 74, 75, 78, 83, 91, 97, 100, 105, 113, 120, 148, 164, 165, 167, 186, 194, 205, 213, 214, 236, 244, 259, 263, 266, 276, 279, 281, 287, 289, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 306, 307, 312, 313, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 371, 372, 373, 375, 376], "power": [0, 3, 5, 9, 27, 34, 137, 213, 224, 338, 376], "semant": [0, 9, 27, 39, 134, 376], "creat": [0, 1, 3, 5, 7, 8, 9, 12, 23, 24, 25, 28, 29, 30, 31, 33, 34, 39, 40, 60, 63, 75, 77, 100, 120, 137, 141, 186, 196, 205, 213, 216, 249, 255, 262, 263, 266, 279, 281, 314, 346, 347, 348, 350, 353, 355, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 373, 377], "circuit": [0, 1, 2, 3, 4, 5, 9, 13, 15, 16, 17, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 74, 77, 78, 79, 80, 89, 91, 98, 101, 113, 123, 138, 143, 147, 165, 167, 186, 214, 217, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 249, 251, 252, 254, 255, 258, 259, 261, 263, 266, 279, 281, 287, 288, 289, 290, 291, 295, 301, 304, 306, 307, 349, 355, 362, 374, 375], "analog": [0, 1, 7, 8, 23, 24, 25, 26, 33, 35, 137, 141, 209, 211, 258, 263, 266, 270, 272, 279, 281, 347, 355, 362, 365, 366, 367, 368, 369, 370, 374, 376], "schedul": [0, 2, 8, 18, 21, 23, 24, 33, 34, 35, 91, 101, 137, 209, 211, 263, 266, 269, 270, 272, 279, 281, 346, 347, 355, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "anneal": [0, 1, 7, 8, 23, 24, 25, 33, 34, 35, 258, 260, 263, 264, 265, 266, 267, 268, 279, 280, 281, 284, 308, 346, 355, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 376], "job": [0, 1, 2, 3, 9, 16, 23, 24, 26, 27, 31, 32, 33, 34, 35, 39, 40, 41, 57, 59, 60, 61, 63, 64, 79, 80, 84, 87, 95, 97, 141, 165, 198, 200, 201, 202, 203, 204, 206, 215, 225, 251, 261, 263, 266, 271, 272, 273, 279, 281, 282, 285, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 346, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376], "object": [0, 1, 2, 5, 8, 9, 12, 14, 15, 16, 17, 18, 19, 28, 29, 31, 32, 33, 35, 39, 40, 41, 42, 49, 51, 60, 61, 63, 65, 66, 75, 78, 95, 96, 97, 100, 101, 104, 123, 127, 136, 139, 140, 143, 144, 145, 146, 148, 174, 177, 199, 205, 207, 211, 213, 216, 217, 221, 224, 225, 244, 247, 254, 255, 258, 262, 263, 266, 269, 272, 279, 281, 285, 286, 293, 296, 305, 306, 312, 347, 371, 372, 374], "can": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 53, 54, 58, 60, 61, 64, 68, 70, 77, 78, 83, 86, 91, 97, 98, 101, 120, 134, 136, 137, 138, 141, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 170, 186, 189, 199, 200, 201, 202, 203, 204, 205, 206, 213, 215, 217, 218, 219, 221, 224, 242, 244, 251, 252, 253, 254, 255, 259, 261, 263, 266, 269, 270, 272, 275, 276, 277, 278, 279, 281, 282, 286, 289, 291, 293, 299, 300, 301, 304, 306, 307, 312, 314, 338, 344, 346, 347, 348, 350, 351, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377], "parametr": [0, 3, 11, 17, 43, 58, 91, 101, 106, 108, 164, 167, 173, 177, 208, 209, 210, 213, 214, 242, 301, 314, 339, 362, 373], "abstract": [0, 10, 14, 16, 17, 18, 23, 39, 41, 43, 51, 97, 134, 198, 199, 200, 213, 214, 226, 242, 244, 254, 261, 263, 266, 272, 279, 281, 282, 285, 286, 293, 296, 312, 314, 355], "paramet": [0, 3, 10, 11, 12, 17, 19, 23, 29, 32, 35, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 81, 82, 84, 85, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 112, 113, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 347, 350, 356, 357, 358, 359, 360, 361, 362, 365, 373, 374, 375], "variat": [0, 2, 7, 9, 27, 28, 31, 32, 39, 41, 58, 91, 101, 165, 251, 258, 261, 263, 266, 279, 281, 289, 291, 292, 296, 297, 300, 301, 302, 347, 362, 365, 371, 374, 376], "comput": [0, 1, 2, 5, 7, 12, 13, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 35, 40, 41, 43, 68, 74, 78, 83, 90, 92, 97, 101, 112, 136, 139, 140, 141, 164, 169, 170, 171, 184, 186, 187, 188, 189, 198, 200, 201, 202, 203, 204, 206, 208, 210, 224, 225, 244, 249, 255, 259, 260, 261, 263, 264, 265, 266, 267, 270, 272, 279, 280, 281, 284, 287, 289, 295, 306, 307, 312, 317, 318, 319, 320, 321, 322, 323, 324, 338, 350, 355, 357, 358, 359, 360, 361, 363, 365, 372, 373, 374, 375], "compos": [0, 3, 9, 10, 16, 20, 26, 31, 32, 35, 39, 40, 42, 48, 51, 53, 56, 62, 64, 73, 74, 77, 80, 95, 100, 104, 136, 186, 196, 198, 213, 218, 224, 289, 293, 298, 303, 344, 347, 350, 351, 353, 354], "user": [0, 1, 4, 5, 27, 28, 31, 32, 33, 39, 40, 41, 42, 46, 48, 53, 56, 57, 60, 62, 74, 75, 97, 98, 100, 120, 139, 164, 198, 213, 285, 287, 290, 291, 301, 305, 313, 365, 373, 376], "defin": [0, 3, 5, 8, 9, 11, 14, 17, 19, 23, 24, 25, 31, 33, 35, 39, 40, 41, 42, 43, 51, 60, 61, 69, 75, 77, 80, 86, 91, 97, 98, 113, 120, 137, 168, 169, 176, 184, 185, 187, 199, 208, 210, 213, 214, 241, 258, 266, 269, 270, 279, 281, 286, 287, 289, 297, 303, 307, 309, 314, 319, 321, 322, 323, 330, 331, 338, 340, 346, 349, 350, 351, 353, 354, 363, 366, 371, 373, 374], "item": [0, 31, 80, 102, 120], "custom": [0, 1, 9, 33, 35, 51, 75, 97, 98, 100, 138, 144, 145, 229, 254, 258, 298, 346, 355, 374, 376], "gate": [0, 1, 2, 7, 8, 13, 15, 16, 18, 23, 24, 25, 26, 31, 33, 35, 37, 39, 40, 42, 51, 65, 68, 69, 71, 73, 74, 76, 77, 78, 79, 80, 91, 97, 98, 100, 106, 107, 108, 109, 111, 112, 113, 138, 144, 145, 177, 181, 183, 194, 195, 196, 197, 208, 209, 210, 211, 212, 214, 215, 221, 223, 224, 225, 226, 229, 243, 244, 247, 251, 255, 256, 258, 259, 261, 263, 266, 279, 281, 285, 287, 289, 291, 295, 296, 298, 301, 304, 306, 307, 309, 314, 337, 342, 343, 345, 346, 347, 353, 354, 355, 374, 376], "time": [0, 1, 4, 5, 10, 11, 13, 16, 18, 19, 20, 22, 28, 30, 32, 35, 36, 37, 40, 77, 84, 91, 97, 104, 137, 141, 174, 183, 186, 199, 207, 208, 210, 227, 228, 229, 231, 234, 235, 239, 240, 244, 263, 266, 271, 279, 281, 286, 291, 301, 302, 307, 308, 312, 314, 336, 337, 338, 340, 346, 350, 356, 363, 374], "depend": [0, 4, 6, 10, 12, 14, 17, 18, 19, 31, 32, 36, 37, 91, 137, 141, 184, 224, 244, 263, 266, 269, 279, 281, 293, 296, 297, 301, 307, 308, 314, 346, 349, 362, 363, 374], "coeffici": [0, 11, 20, 23, 136, 143, 169, 173, 184, 185, 301, 304, 330, 339, 374], "an": [0, 1, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 51, 59, 60, 61, 64, 69, 73, 77, 78, 79, 81, 82, 88, 89, 91, 93, 94, 97, 98, 101, 104, 105, 118, 120, 123, 125, 126, 127, 132, 134, 136, 137, 138, 139, 141, 143, 145, 146, 147, 164, 165, 176, 177, 184, 185, 186, 188, 198, 199, 200, 209, 211, 213, 214, 216, 217, 219, 222, 224, 225, 226, 228, 233, 234, 235, 237, 238, 242, 244, 247, 248, 249, 250, 251, 253, 255, 258, 259, 263, 266, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 287, 288, 289, 291, 293, 295, 296, 297, 298, 299, 304, 307, 308, 311, 312, 313, 314, 341, 344, 346, 347, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "etc": [0, 1, 2, 5, 9, 17, 19, 35, 39, 51, 77, 78, 97, 123, 139, 208, 210, 213, 214, 255, 261, 263, 266, 279, 281, 293, 296, 309, 326, 347, 356, 371], "hello": 0, "world": 0, "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 51, 60, 61, 62, 65, 68, 69, 70, 71, 74, 77, 78, 79, 80, 91, 97, 98, 101, 104, 120, 125, 127, 132, 136, 137, 140, 141, 144, 148, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 214, 217, 222, 224, 225, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 277, 278, 279, 280, 281, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 303, 306, 307, 308, 309, 311, 312, 313, 314, 319, 323, 324, 338, 340, 345, 346, 347, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375], "follow": [0, 1, 4, 5, 12, 14, 16, 17, 18, 22, 23, 24, 30, 31, 32, 34, 35, 39, 40, 41, 77, 80, 91, 97, 101, 104, 120, 134, 143, 148, 173, 176, 198, 199, 212, 213, 214, 215, 222, 224, 225, 227, 229, 231, 247, 254, 255, 258, 261, 263, 266, 269, 270, 279, 281, 285, 298, 304, 305, 306, 307, 314, 316, 330, 347, 351, 352, 354, 362, 363, 364, 365, 371, 373, 374], "code": [0, 1, 3, 5, 14, 16, 17, 23, 28, 31, 34, 35, 39, 40, 41, 51, 68, 71, 79, 80, 81, 82, 95, 97, 101, 120, 164, 247, 254, 255, 261, 263, 266, 279, 281, 289, 298, 348, 350, 351, 354, 363, 371, 373], "snippet": [0, 3, 16], "simpl": [0, 1, 16, 17, 19, 25, 26, 28, 29, 30, 31, 39, 41, 95, 96, 97, 100, 104, 134, 139, 140, 144, 195, 199, 244, 254, 273, 283, 286, 291, 294, 307, 309, 312, 337, 346, 347, 362, 363, 366, 367, 368, 369, 370, 373, 374], "bell": [0, 9, 29, 30, 354], "pair": [0, 9, 19, 29, 30, 42, 143, 144, 145, 208, 210, 269, 304, 346, 354, 374], "function": [0, 1, 3, 5, 9, 10, 11, 15, 16, 17, 22, 23, 24, 31, 33, 34, 35, 40, 43, 48, 53, 56, 62, 70, 71, 77, 91, 97, 98, 100, 104, 113, 118, 119, 120, 124, 125, 126, 132, 134, 137, 138, 165, 167, 169, 170, 171, 183, 184, 186, 187, 188, 189, 199, 200, 208, 213, 214, 217, 220, 221, 244, 251, 254, 261, 263, 266, 275, 276, 277, 278, 279, 281, 282, 289, 293, 296, 298, 300, 301, 302, 307, 308, 314, 336, 338, 350, 351, 352, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375], "mode": [0, 1, 3, 11, 29, 30, 31, 33, 35, 39, 40, 64, 97, 105, 141, 174, 205, 289, 299, 313, 347, 350], "from": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 48, 49, 51, 53, 56, 60, 61, 62, 65, 69, 71, 77, 78, 79, 80, 85, 86, 89, 91, 95, 96, 97, 98, 100, 101, 102, 105, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 180, 184, 185, 186, 188, 189, 191, 192, 193, 200, 202, 203, 206, 213, 214, 215, 216, 221, 224, 225, 226, 229, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 284, 287, 289, 291, 293, 294, 296, 298, 299, 300, 304, 306, 307, 308, 309, 313, 314, 329, 330, 335, 336, 338, 340, 344, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "lang": [0, 1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 16, 17, 29, 30, 31, 40, 41, 42, 43, 44, 45, 51, 77, 79, 91, 97, 98, 165, 177, 289, 291, 298, 309, 347, 373, 374], "import": [0, 1, 2, 3, 5, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 51, 77, 78, 79, 80, 85, 86, 97, 98, 100, 101, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 169, 170, 184, 185, 189, 191, 192, 193, 214, 215, 216, 224, 225, 229, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 279, 280, 281, 284, 289, 291, 298, 300, 306, 309, 314, 329, 330, 336, 338, 344, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "qrout": [0, 1, 2, 9, 10, 11, 40, 41, 43, 213, 251, 347, 373], "h": [0, 1, 2, 3, 9, 10, 11, 12, 14, 16, 17, 18, 19, 23, 29, 30, 31, 34, 40, 43, 65, 77, 97, 101, 141, 165, 168, 169, 170, 174, 176, 178, 183, 184, 186, 189, 191, 192, 193, 202, 203, 206, 208, 209, 210, 211, 215, 224, 225, 229, 254, 255, 260, 262, 265, 266, 267, 268, 269, 279, 280, 281, 284, 292, 295, 306, 308, 347, 353, 354, 363, 364, 372, 373, 377], "cnot": [0, 1, 2, 3, 9, 10, 12, 15, 16, 17, 29, 30, 31, 40, 42, 65, 97, 165, 177, 224, 225, 229, 233, 235, 249, 254, 255, 259, 261, 263, 266, 279, 281, 291, 298, 304, 306, 309, 347, 353, 354, 373, 374], "def": [0, 1, 2, 3, 9, 10, 11, 14, 16, 17, 31, 35, 40, 41, 43, 214, 217, 225, 251, 254, 259, 289, 291, 347], "bell_pair": [0, 2, 9], "0": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 50, 51, 61, 68, 73, 74, 77, 78, 79, 86, 90, 97, 98, 101, 102, 118, 119, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 141, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 173, 175, 179, 181, 183, 184, 185, 186, 188, 189, 191, 192, 193, 208, 210, 213, 214, 215, 216, 223, 224, 225, 229, 241, 242, 244, 247, 248, 249, 251, 252, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 275, 279, 280, 281, 284, 287, 289, 291, 292, 298, 302, 304, 306, 307, 309, 316, 327, 329, 330, 331, 336, 338, 344, 351, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "1": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 51, 61, 68, 70, 73, 77, 78, 79, 80, 86, 90, 97, 98, 101, 102, 118, 119, 120, 122, 126, 127, 128, 132, 133, 134, 137, 141, 143, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 174, 176, 177, 183, 184, 185, 189, 191, 192, 193, 202, 203, 206, 208, 210, 214, 215, 216, 219, 224, 225, 227, 228, 229, 234, 235, 236, 241, 244, 248, 249, 251, 252, 253, 254, 255, 259, 260, 262, 263, 264, 265, 266, 267, 269, 275, 279, 280, 281, 283, 284, 289, 291, 292, 297, 301, 302, 304, 306, 307, 308, 309, 316, 324, 327, 329, 330, 331, 332, 336, 338, 340, 343, 344, 345, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "result": [0, 1, 2, 3, 5, 8, 14, 15, 16, 17, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 45, 48, 49, 53, 56, 57, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 78, 79, 80, 89, 96, 97, 101, 103, 104, 118, 128, 141, 147, 165, 183, 186, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 224, 230, 233, 235, 237, 238, 239, 240, 243, 244, 249, 250, 252, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 279, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 344, 347, 350, 351, 356, 364, 365, 366, 367, 368, 369, 370, 373, 374], "run": [0, 1, 2, 3, 5, 11, 14, 23, 24, 27, 35, 36, 37, 39, 41, 57, 87, 97, 101, 104, 198, 199, 201, 202, 203, 204, 206, 244, 254, 258, 261, 263, 266, 279, 281, 285, 286, 287, 291, 293, 298, 300, 307, 312, 347, 350, 351, 362, 374, 376], "sampl": [0, 1, 2, 8, 9, 11, 16, 21, 26, 28, 30, 31, 32, 33, 35, 39, 40, 42, 64, 68, 70, 71, 90, 91, 97, 101, 118, 136, 137, 139, 141, 200, 215, 247, 248, 251, 252, 254, 264, 265, 267, 268, 274, 275, 276, 277, 278, 284, 285, 289, 295, 304, 306, 307, 309, 347, 348, 350, 357, 358, 359, 360, 361, 364, 365], "print": [0, 1, 2, 3, 5, 9, 11, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 40, 41, 43, 51, 53, 77, 79, 97, 100, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 169, 170, 184, 185, 189, 191, 192, 193, 215, 216, 224, 225, 229, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 263, 264, 265, 267, 268, 280, 284, 289, 290, 291, 294, 301, 306, 309, 329, 330, 336, 338, 344, 353, 354, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 372, 373, 374], "f": [0, 1, 2, 3, 9, 30, 31, 40, 51, 77, 120, 137, 169, 170, 176, 189, 191, 192, 193, 205, 251, 289, 304, 319, 321, 322, 323, 329, 338, 364, 372, 373, 374], "state": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 21, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 38, 40, 68, 70, 71, 73, 74, 88, 90, 91, 92, 97, 101, 102, 118, 119, 136, 139, 140, 141, 164, 165, 167, 172, 180, 186, 187, 207, 208, 210, 215, 223, 224, 241, 243, 247, 249, 251, 252, 254, 255, 256, 257, 262, 263, 269, 270, 271, 272, 273, 289, 304, 306, 307, 309, 314, 323, 344, 347, 357, 358, 359, 360, 361, 362, 363, 371, 374, 375], "amplitud": [0, 1, 9, 16, 28, 29, 32, 36, 37, 97, 101, 102, 137, 139, 140, 141, 147, 241, 306, 314, 331, 336, 346], "00": [0, 2, 3, 9, 28, 29, 30, 31, 42, 141, 254, 289, 306], "7071067811865475": [0, 9, 29, 77], "0j": [0, 9, 16, 29, 191, 192, 193, 372], "11": [0, 2, 4, 5, 9, 16, 28, 29, 30, 31, 43, 80, 148, 150, 153, 154, 155, 156, 157, 161, 163, 244, 254, 289, 347, 359, 366, 367, 373], "first": [0, 1, 3, 6, 10, 14, 15, 16, 28, 31, 34, 36, 38, 41, 57, 61, 64, 77, 97, 101, 104, 135, 139, 144, 151, 164, 176, 183, 186, 196, 199, 213, 224, 228, 233, 235, 237, 239, 240, 243, 244, 249, 255, 256, 263, 266, 267, 269, 279, 281, 287, 291, 292, 297, 300, 301, 302, 306, 307, 312, 319, 321, 322, 323, 324, 352, 357, 359, 360, 366, 367, 373, 374], "line": [0, 1, 3, 5, 12, 16, 17, 23, 51, 79, 81, 82, 97, 100, 101, 254, 309, 352, 364, 372], "decor": [0, 1, 9, 14, 17, 213, 217, 221, 251, 254, 347], "two": [0, 1, 5, 6, 12, 16, 17, 20, 23, 25, 26, 28, 34, 35, 39, 40, 41, 42, 64, 78, 97, 101, 120, 128, 135, 144, 145, 164, 166, 168, 173, 176, 184, 185, 187, 190, 208, 210, 212, 213, 224, 228, 233, 235, 237, 239, 244, 249, 252, 255, 262, 263, 266, 269, 279, 289, 291, 295, 302, 307, 308, 314, 319, 321, 322, 324, 330, 344, 346, 347, 357, 359, 360, 365, 366, 367, 373, 374], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 86, 91, 92, 93, 94, 97, 98, 101, 104, 106, 110, 111, 112, 113, 114, 120, 123, 127, 128, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 309, 311, 312, 313, 314, 319, 321, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 338, 339, 340, 342, 343, 345, 347, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 63, 64, 66, 70, 71, 74, 76, 77, 78, 79, 83, 86, 87, 91, 98, 101, 104, 105, 106, 110, 120, 134, 136, 137, 138, 139, 141, 142, 144, 146, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 168, 169, 170, 173, 175, 183, 184, 186, 187, 189, 190, 194, 199, 201, 202, 203, 204, 205, 206, 209, 211, 213, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 239, 244, 247, 248, 249, 250, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 306, 307, 308, 313, 314, 319, 338, 344, 346, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375], "declar": [0, 5, 8, 15, 16, 17, 19, 25, 26, 91, 97, 134, 214, 219, 247, 251, 252, 253, 258, 263, 350], "describ": [0, 5, 7, 8, 10, 11, 14, 16, 17, 18, 22, 25, 27, 28, 31, 32, 35, 36, 38, 43, 77, 78, 83, 84, 85, 87, 91, 100, 111, 113, 120, 134, 136, 139, 141, 143, 144, 145, 148, 164, 167, 207, 208, 210, 211, 213, 214, 216, 224, 245, 248, 249, 250, 260, 263, 264, 265, 267, 268, 269, 275, 276, 280, 284, 291, 292, 301, 312, 314, 346, 347, 362, 364, 371, 372, 374], "our": [0, 1, 2, 3, 4, 14, 16, 22, 23, 28, 31, 33, 35, 39, 40, 41, 226, 249, 260, 269, 289, 307, 346, 348, 358, 360, 361, 362, 364, 373, 374], "A": [0, 2, 5, 8, 9, 10, 12, 13, 15, 18, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 49, 53, 54, 65, 68, 77, 81, 82, 86, 101, 102, 118, 119, 120, 127, 134, 144, 148, 149, 151, 159, 162, 166, 169, 184, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 217, 224, 225, 226, 232, 244, 249, 254, 258, 260, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 279, 280, 281, 283, 284, 286, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 302, 308, 309, 315, 319, 321, 322, 339, 341, 342, 343, 345, 346, 356, 357, 358, 361, 362, 363, 364, 372, 373, 377], "detail": [0, 1, 2, 16, 32, 34, 35, 46, 78, 101, 196, 205, 213, 224, 244, 251, 252, 291, 297, 299, 347, 357, 358, 359, 360, 361, 371, 372, 373, 374], "descript": [0, 5, 17, 35, 36, 37, 42, 100, 137, 139, 149, 151, 159, 162, 263, 266, 279, 281, 306, 356, 363], "gener": [0, 5, 9, 11, 14, 15, 16, 17, 18, 22, 23, 28, 29, 34, 36, 37, 44, 45, 48, 51, 53, 56, 62, 77, 97, 101, 103, 104, 106, 107, 108, 113, 123, 137, 141, 146, 164, 165, 186, 207, 208, 213, 214, 221, 224, 225, 227, 228, 229, 230, 231, 234, 235, 242, 243, 244, 252, 254, 255, 259, 261, 263, 266, 269, 275, 276, 279, 281, 282, 291, 296, 302, 306, 314, 331, 353, 354, 355, 356, 362, 363, 373, 374, 375], "found": [0, 3, 9, 22, 31, 35, 36, 97, 123, 164, 165, 186, 251, 260, 264, 265, 266, 267, 268, 274, 277, 279, 280, 281, 284, 296, 311, 347, 348, 356, 365, 371, 375], "section": [0, 1, 2, 3, 5, 7, 9, 10, 14, 17, 18, 22, 25, 26, 31, 33, 35, 39, 40, 42, 43, 46, 77, 78, 97, 199, 205, 213, 260, 264, 265, 267, 280, 284, 299, 347, 351, 355, 356, 364, 373, 375], "directli": [0, 9, 12, 16, 17, 23, 28, 43, 69, 138, 143, 220, 249, 254, 255, 263, 266, 279, 281, 289, 306, 347, 349, 362, 373, 374, 375], "via": [0, 9, 10, 14, 16, 17, 18, 20, 23, 24, 25, 26, 34, 91, 97, 101, 113, 120, 137, 141, 148, 183, 186, 216, 218, 225, 244, 245, 247, 248, 249, 250, 252, 254, 255, 258, 262, 263, 266, 269, 279, 281, 286, 291, 292, 293, 299, 347, 356, 362, 372, 373, 374, 375], "method": [0, 1, 2, 3, 12, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 39, 41, 43, 91, 98, 100, 101, 104, 123, 137, 141, 142, 143, 144, 147, 165, 167, 169, 170, 183, 185, 187, 189, 199, 205, 213, 214, 215, 219, 224, 225, 226, 227, 228, 229, 233, 234, 235, 242, 244, 247, 248, 249, 252, 253, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 289, 292, 293, 295, 296, 297, 300, 301, 303, 306, 307, 312, 314, 329, 330, 339, 341, 347, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377], "look": [0, 1, 4, 14, 16, 23, 30, 34, 35, 40, 141, 266, 281, 304, 307, 347, 363], "avail": [0, 4, 5, 6, 8, 18, 25, 27, 29, 31, 32, 33, 36, 37, 46, 63, 80, 147, 148, 164, 169, 170, 183, 207, 259, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 314, 346, 347, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376], "qpu": [0, 1, 2, 3, 7, 8, 9, 14, 16, 18, 23, 24, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 44, 45, 55, 57, 59, 60, 61, 64, 66, 67, 75, 79, 80, 82, 83, 85, 87, 91, 97, 100, 101, 104, 105, 137, 139, 141, 147, 165, 186, 198, 201, 202, 203, 204, 205, 206, 209, 211, 215, 261, 263, 266, 279, 281, 286, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 346, 349, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 373, 374, 376], "execut": [0, 3, 5, 7, 8, 9, 10, 14, 17, 18, 22, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 57, 60, 61, 64, 80, 84, 87, 91, 97, 101, 104, 141, 186, 198, 201, 202, 203, 204, 205, 206, 244, 247, 248, 252, 274, 285, 288, 293, 296, 298, 299, 305, 306, 307, 308, 312, 346, 347, 349, 350, 355, 356, 364, 365, 366, 367, 368, 369, 370, 374, 376], "more": [0, 1, 3, 5, 9, 11, 16, 17, 21, 23, 25, 26, 27, 31, 34, 35, 39, 41, 48, 53, 56, 62, 78, 91, 97, 101, 143, 185, 186, 200, 212, 224, 225, 247, 248, 251, 252, 259, 291, 297, 304, 306, 329, 347, 350, 356, 363, 364, 372, 373, 374], "inform": [0, 2, 3, 5, 10, 28, 29, 32, 33, 35, 36, 37, 39, 40, 60, 78, 79, 97, 139, 140, 141, 142, 185, 200, 201, 202, 203, 204, 206, 207, 212, 220, 224, 236, 242, 247, 248, 296, 313, 329, 346, 347, 350, 364, 372, 373, 374], "about": [0, 31, 36, 37, 97, 207, 220, 347, 373], "process": [0, 2, 5, 8, 12, 22, 27, 28, 29, 32, 34, 35, 39, 40, 41, 42, 88, 90, 91, 97, 100, 104, 141, 199, 200, 205, 225, 236, 244, 285, 286, 288, 305, 308, 312, 313, 314, 319, 322, 329, 347, 374, 376], "sequenti": [0, 1, 3, 11, 39, 301, 346, 347, 371, 374], "qprog": [0, 29, 30], "number": [0, 1, 2, 10, 15, 16, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 58, 70, 77, 79, 80, 84, 87, 97, 100, 101, 102, 105, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 146, 149, 159, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 195, 196, 201, 205, 209, 211, 224, 228, 229, 233, 235, 237, 238, 239, 240, 241, 243, 244, 245, 254, 255, 256, 257, 258, 260, 263, 264, 265, 267, 268, 269, 280, 284, 285, 287, 289, 291, 292, 294, 296, 297, 299, 301, 302, 304, 306, 307, 308, 313, 329, 330, 332, 344, 346, 347, 356, 357, 359, 361, 362, 366, 367, 369, 370, 372, 373, 374, 377], "qbit": [0, 1, 9, 11, 14, 15, 16, 17, 29, 30, 31, 40, 43, 77, 78, 79, 91, 97, 98, 101, 136, 143, 195, 196, 197, 208, 210, 213, 215, 224, 225, 226, 233, 235, 237, 238, 239, 240, 241, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 289, 291, 295, 298, 306, 309, 329, 330, 344, 345, 373], "nbqbit": [0, 14, 26, 31, 35, 40, 42, 77, 80, 87, 97, 100, 136, 139, 144, 149, 170, 189, 229, 245, 252, 291, 295, 373, 374], "2": [0, 1, 3, 5, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 35, 40, 41, 42, 43, 50, 51, 61, 69, 74, 77, 78, 79, 80, 92, 97, 98, 102, 120, 121, 125, 127, 128, 129, 130, 132, 134, 135, 137, 140, 141, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 173, 174, 176, 177, 178, 183, 184, 185, 186, 187, 189, 191, 192, 193, 195, 206, 213, 215, 216, 222, 223, 224, 225, 227, 228, 229, 233, 235, 237, 238, 239, 240, 241, 244, 247, 248, 249, 251, 254, 255, 259, 262, 263, 264, 265, 267, 268, 269, 279, 280, 281, 283, 284, 287, 289, 291, 292, 295, 298, 301, 304, 306, 307, 316, 318, 323, 324, 329, 330, 332, 336, 338, 343, 344, 345, 353, 354, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "alloc": [0, 9, 10, 15, 51, 84, 97, 227, 228, 229, 230, 231, 234, 235, 244, 247, 248, 249, 252, 255, 263, 266, 279, 281, 344, 352, 354], "some": [0, 4, 5, 7, 9, 11, 14, 15, 16, 17, 18, 20, 21, 26, 28, 29, 31, 33, 34, 35, 39, 40, 41, 68, 79, 97, 100, 101, 136, 137, 138, 141, 164, 181, 199, 213, 214, 220, 223, 224, 227, 230, 231, 242, 243, 244, 247, 248, 252, 254, 255, 256, 259, 261, 263, 266, 270, 272, 273, 279, 281, 286, 288, 291, 293, 314, 347, 355, 356, 363, 366, 367, 368, 369, 370, 373], "qalloc": [0, 1, 3, 9, 10, 11, 12, 14, 15, 16, 29, 30, 31, 77, 79, 97, 98, 165, 215, 224, 225, 226, 229, 244, 247, 248, 252, 253, 255, 289, 291, 298, 309, 373, 374], "appli": [0, 1, 5, 8, 10, 15, 17, 19, 23, 31, 34, 42, 51, 68, 73, 77, 98, 143, 144, 145, 164, 165, 177, 179, 183, 186, 207, 208, 209, 210, 211, 212, 216, 225, 226, 241, 244, 247, 249, 251, 255, 289, 291, 298, 306, 307, 314, 336, 337, 338, 342, 344, 345, 347, 363, 373, 374], "export": [0, 5, 52, 53, 244], "to_circ": [0, 1, 3, 9, 11, 12, 14, 15, 16, 29, 30, 31, 48, 53, 56, 62, 77, 79, 97, 98, 165, 213, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 244, 255, 259, 289, 291, 298, 309, 347, 373, 374], "processor": [0, 3, 28, 91, 97, 141, 148, 307, 346, 347, 376], "unit": [0, 2, 8, 27, 28, 34, 279, 308, 314, 328, 336, 338, 347, 376], "factori": [0, 28, 269, 362], "default": [0, 2, 3, 9, 28, 29, 30, 35, 36, 37, 43, 48, 51, 53, 56, 57, 60, 61, 62, 64, 66, 68, 70, 92, 97, 98, 101, 102, 104, 105, 106, 107, 108, 109, 116, 134, 136, 139, 141, 143, 144, 146, 147, 165, 169, 170, 175, 176, 177, 179, 181, 183, 186, 187, 188, 189, 195, 196, 197, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 224, 225, 230, 232, 233, 244, 252, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 269, 279, 281, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 309, 311, 312, 313, 319, 320, 321, 322, 325, 329, 330, 338, 343, 344, 345, 349, 350, 363, 372], "one": [0, 3, 5, 9, 10, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 30, 31, 35, 39, 41, 71, 73, 74, 77, 79, 97, 104, 123, 134, 137, 141, 143, 144, 164, 166, 168, 177, 180, 184, 185, 186, 187, 190, 199, 209, 211, 212, 213, 224, 244, 251, 254, 258, 260, 263, 264, 265, 266, 267, 268, 269, 270, 279, 280, 281, 284, 285, 286, 289, 290, 291, 293, 297, 298, 301, 304, 306, 307, 312, 314, 330, 344, 346, 347, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 373, 374], "get_default_qpu": [0, 1, 2, 3, 16, 28, 29, 30, 31, 40, 41, 43, 79, 97, 100, 101, 165, 215, 289, 305, 347, 365, 366, 367, 368, 369, 370, 373, 374], "to_job": [0, 1, 2, 3, 11, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 34, 40, 41, 43, 79, 97, 141, 143, 165, 215, 263, 266, 279, 281, 289, 291, 298, 309, 347, 357, 358, 359, 360, 361, 363, 364, 365, 373, 374], "submit": [0, 1, 2, 3, 5, 16, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 57, 60, 61, 63, 64, 79, 97, 101, 165, 215, 289, 291, 293, 298, 300, 306, 307, 309, 312, 313, 347, 350, 351, 357, 358, 359, 360, 361, 365, 373, 374], "iter": [0, 1, 3, 29, 31, 41, 199, 200, 221, 244, 255, 285, 287, 288, 292, 293, 297, 302, 347, 374], "over": [0, 1, 5, 11, 23, 29, 34, 40, 54, 57, 68, 74, 78, 91, 97, 136, 137, 143, 224, 244, 251, 255, 269, 281, 304, 306, 340], "final": [0, 1, 3, 4, 8, 10, 12, 16, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 40, 43, 74, 88, 90, 97, 136, 141, 214, 239, 240, 255, 258, 260, 263, 264, 265, 267, 268, 280, 282, 284, 289, 296, 363, 373, 374], "vector": [0, 23, 32, 36, 37, 70, 71, 73, 74, 91, 102, 139, 147, 164, 172, 174, 186, 260, 266, 281, 287, 314, 315, 317, 318, 323, 334, 344], "all": [0, 1, 4, 5, 9, 16, 18, 19, 28, 29, 30, 31, 35, 36, 40, 41, 53, 54, 75, 78, 79, 80, 95, 97, 101, 102, 106, 109, 141, 144, 145, 148, 149, 181, 185, 194, 198, 207, 209, 211, 213, 220, 221, 224, 225, 233, 235, 237, 238, 239, 240, 242, 244, 249, 255, 259, 266, 267, 269, 278, 280, 285, 287, 288, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 306, 309, 313, 314, 346, 347, 352, 355, 356, 366, 372, 373], "compon": [0, 35, 137], "": [0, 1, 3, 5, 10, 14, 16, 17, 19, 21, 29, 31, 43, 57, 59, 61, 63, 65, 100, 101, 120, 148, 165, 173, 174, 176, 186, 213, 215, 222, 227, 229, 232, 244, 251, 260, 261, 263, 266, 272, 279, 281, 282, 291, 296, 301, 304, 306, 308, 373, 374, 377], "few": [0, 1, 3, 16, 42, 213, 356, 363], "dedic": [0, 5, 8, 18, 43, 141, 314, 356], "atom": [0, 187, 279, 355, 364, 365, 371, 373], "task": [0, 295, 355], "languag": [0, 5, 17, 346], "Then": [0, 1, 16, 39, 74, 165, 186, 199, 224, 255, 289, 304, 346, 353], "remain": [0, 5, 184, 186, 188, 224, 225, 347], "instanti": [0, 3, 11, 35, 60, 61, 77, 104, 123, 165, 216, 217, 220, 225, 242, 245, 247, 248, 249, 250, 254, 261, 263, 266, 279, 281, 291, 294, 308], "instal": [0, 5, 46, 186, 346, 347, 349], "algorithm": [0, 5, 7, 8, 9, 11, 16, 25, 27, 28, 34, 39, 164, 201, 202, 203, 204, 206, 229, 259, 263, 266, 279, 281, 285, 287, 295, 297, 302, 347, 355, 370, 373, 374, 376], "framework": [1, 2, 3, 4, 7, 8, 9, 11, 12, 18, 31, 33, 35, 39, 40, 41, 43, 75, 91, 120, 214, 266, 279, 289, 363, 376], "advanc": [1, 4, 7, 9, 11, 13, 27, 31, 39, 48, 51, 53, 56, 62, 97, 113, 120, 213, 214, 346, 363], "onli": [1, 4, 5, 12, 15, 16, 17, 18, 21, 25, 26, 28, 29, 30, 32, 35, 40, 41, 42, 43, 58, 97, 98, 101, 104, 120, 134, 139, 140, 144, 145, 164, 165, 170, 175, 179, 186, 187, 199, 212, 219, 225, 228, 233, 235, 237, 239, 240, 242, 244, 247, 249, 250, 253, 255, 261, 263, 266, 276, 277, 278, 279, 281, 286, 291, 295, 301, 305, 306, 307, 309, 312, 319, 338, 347, 354, 355, 356, 366, 367, 368, 369, 370, 373, 374], "support": [1, 2, 4, 5, 6, 7, 12, 15, 28, 30, 34, 35, 39, 42, 65, 79, 97, 100, 101, 113, 143, 186, 224, 266, 279, 281, 306, 347, 354], "sever": [1, 5, 9, 12, 28, 31, 32, 35, 36, 63, 68, 70, 71, 91, 96, 97, 101, 123, 285, 301, 346, 372, 374], "paradigm": [1, 7, 8, 355], "base": [1, 4, 5, 7, 8, 12, 16, 23, 24, 25, 26, 31, 33, 43, 68, 75, 187, 198, 200, 213, 226, 229, 232, 233, 234, 235, 251, 258, 261, 263, 266, 274, 279, 281, 285, 287, 288, 291, 292, 297, 300, 302, 306, 307, 314, 337, 346, 347, 355, 371, 372, 373, 374, 376], "guid": [1, 4, 27, 46, 97, 213, 376], "page": [1, 4, 5, 11, 26, 29, 33, 35, 36, 37, 43, 46, 306, 347, 348, 349, 364, 372, 373], "focu": [1, 289], "modul": [1, 2, 5, 8, 9, 12, 18, 23, 39, 46, 51, 67, 68, 75, 77, 81, 82, 83, 91, 100, 120, 134, 148, 164, 194, 207, 213, 221, 225, 226, 236, 244, 258, 291, 307, 309, 314, 347, 348, 350, 351, 371, 372, 373, 375], "requir": [1, 3, 4, 5, 6, 16, 26, 31, 35, 40, 41, 43, 75, 78, 84, 87, 97, 101, 134, 139, 144, 226, 244, 255, 272, 282, 286, 288, 289, 295, 301, 347, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 377], "which": [1, 3, 5, 9, 12, 13, 16, 18, 19, 20, 23, 24, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 53, 54, 60, 64, 68, 71, 77, 78, 81, 82, 91, 97, 102, 104, 118, 136, 137, 138, 141, 144, 145, 173, 176, 184, 186, 199, 202, 203, 206, 208, 210, 213, 233, 235, 237, 238, 243, 244, 247, 248, 252, 256, 258, 260, 261, 263, 265, 266, 267, 269, 275, 279, 281, 284, 286, 287, 289, 300, 301, 304, 306, 307, 312, 338, 339, 340, 344, 345, 346, 350, 355, 356, 361, 362, 364, 369, 372, 373, 374], "includ": [1, 4, 5, 9, 23, 25, 28, 34, 48, 51, 53, 56, 62, 71, 91, 97, 137, 175, 177, 179, 183, 186, 213, 214, 225, 228, 229, 244, 274, 275, 276, 277, 278, 291, 293, 294, 306, 332, 347, 371, 372, 375, 376], "nativ": [1, 15, 28, 97], "reli": [1, 23, 319, 347, 355, 372], "ad": [1, 9, 16, 26, 32, 35, 48, 53, 56, 62, 228, 232, 244, 252, 287, 336, 347], "either": [1, 5, 10, 17, 26, 32, 35, 39, 40, 86, 97, 139, 144, 146, 186, 199, 200, 201, 202, 203, 204, 206, 212, 224, 251, 258, 262, 287, 304, 306, 311, 350, 374], "qfunc": [1, 3, 9, 213, 347], "class": [1, 5, 9, 10, 13, 16, 20, 23, 24, 25, 26, 28, 31, 33, 34, 35, 40, 41, 43, 51, 53, 54, 57, 60, 61, 63, 64, 66, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 100, 101, 103, 104, 105, 110, 111, 112, 113, 114, 116, 120, 123, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 159, 162, 164, 169, 170, 177, 184, 185, 186, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 224, 225, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 312, 313, 314, 316, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 372, 373, 374], "let": [1, 14, 17, 30, 241, 251, 291, 304, 347, 372, 373, 374], "search": [1, 41, 186, 215, 346, 363], "find": [1, 18, 22, 31, 34, 39, 97, 164, 173, 269, 279, 301, 358, 361, 363, 364, 365, 368, 369, 370, 373], "element": [1, 23, 24, 127, 137, 146, 165, 207, 211, 219, 253, 266, 279, 281, 293, 308, 333, 334, 347, 377], "unstructur": 1, "space": [1, 23, 41, 91, 136, 164, 184, 188, 244, 314, 347, 371, 373, 374], "quadrat": [1, 22, 34, 263, 266, 279, 281, 347, 377], "faster": [1, 19, 36, 37, 194, 269, 347], "than": [1, 5, 25, 28, 31, 34, 35, 91, 101, 136, 143, 184, 252, 255, 259, 267, 284, 291, 302, 306, 347, 372, 374], "random": [1, 11, 21, 23, 24, 34, 184, 185, 212, 224, 251, 280, 291, 294, 297, 300, 301, 302, 306, 308, 309, 329, 330, 356, 360, 374, 377], "classic": [1, 9, 23, 28, 29, 33, 34, 41, 68, 72, 74, 78, 89, 91, 97, 98, 142, 165, 213, 216, 218, 219, 224, 244, 249, 250, 252, 260, 264, 265, 267, 268, 269, 280, 284, 285, 291, 292, 300, 309, 346, 347, 362, 370, 371, 374], "In": [1, 3, 5, 8, 9, 13, 14, 15, 16, 18, 23, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 70, 71, 78, 97, 183, 213, 221, 224, 229, 244, 254, 255, 261, 263, 266, 269, 275, 279, 281, 289, 298, 301, 304, 307, 327, 351, 355, 356, 362, 363, 372], "model": [1, 18, 34, 85, 138, 164, 174, 178, 208, 209, 212, 213, 263, 266, 279, 281, 372, 373, 374, 375, 377], "problem": [1, 9, 11, 16, 22, 23, 24, 31, 34, 118, 136, 164, 165, 198, 200, 201, 202, 203, 204, 206, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 301, 308, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 377], "specifi": [1, 2, 3, 14, 16, 17, 18, 19, 25, 26, 28, 34, 60, 61, 68, 70, 71, 73, 97, 137, 143, 144, 186, 207, 208, 209, 210, 211, 213, 215, 224, 225, 233, 235, 237, 238, 239, 240, 244, 250, 251, 254, 260, 263, 266, 270, 279, 281, 289, 295, 308, 347, 357, 358, 359, 360, 361, 362, 363, 377], "e": [1, 3, 5, 7, 9, 10, 11, 13, 15, 16, 17, 19, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 51, 64, 68, 71, 77, 87, 92, 97, 101, 123, 134, 136, 141, 145, 165, 167, 170, 176, 183, 184, 186, 190, 208, 209, 210, 216, 219, 221, 224, 227, 228, 230, 241, 244, 247, 248, 249, 252, 253, 255, 258, 259, 261, 263, 266, 269, 279, 281, 289, 292, 293, 296, 300, 301, 303, 304, 314, 319, 321, 322, 328, 330, 338, 342, 343, 344, 345, 347, 350, 357, 358, 359, 361, 362, 364, 366, 367, 368, 369, 370, 373, 374, 376], "mathcal": [1, 166, 171, 173, 184, 304, 319, 321, 322, 328, 329, 330, 342, 343, 344, 345], "x": [1, 3, 6, 9, 10, 11, 12, 16, 17, 19, 20, 26, 51, 65, 68, 73, 101, 124, 128, 134, 143, 157, 165, 166, 168, 178, 184, 186, 187, 189, 191, 193, 229, 241, 254, 260, 269, 279, 281, 295, 306, 309, 318, 324, 332, 347, 353, 363, 364, 372, 374], "rightarrow": [1, 209, 211], "we": [1, 3, 5, 8, 10, 11, 14, 15, 16, 17, 23, 24, 25, 27, 28, 29, 30, 41, 42, 53, 71, 78, 92, 97, 137, 164, 165, 186, 213, 214, 220, 224, 225, 229, 249, 251, 260, 265, 266, 279, 280, 281, 291, 292, 300, 301, 340, 351, 355, 356, 360, 361, 363, 364, 369, 370, 371, 372, 373, 374], "consist": [1, 5, 8, 12, 18, 24, 31, 34, 68, 143, 186, 244, 258, 263, 286, 301, 307, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370], "altern": [1, 10, 36, 37, 43, 177, 314, 347, 362, 372], "oper": [1, 9, 10, 11, 16, 17, 18, 19, 20, 23, 31, 36, 38, 40, 41, 43, 69, 76, 78, 97, 98, 120, 123, 134, 136, 141, 143, 164, 165, 167, 170, 171, 183, 184, 189, 208, 209, 210, 211, 213, 215, 216, 218, 220, 223, 225, 226, 227, 229, 231, 232, 236, 243, 244, 245, 249, 250, 251, 252, 258, 262, 269, 287, 291, 293, 307, 325, 327, 328, 330, 331, 336, 338, 344, 347, 373, 374, 375], "pi": [1, 10, 17, 41, 51, 124, 125, 126, 132, 134, 184, 186, 190, 213, 241, 251, 254, 291, 295, 374], "sqrt": [1, 17, 28, 29, 30, 92, 120, 140, 241, 323, 324, 330, 331, 336, 338, 344], "frac": [1, 17, 24, 101, 137, 169, 173, 174, 176, 183, 184, 186, 224, 241, 265, 269, 279, 292, 324, 330, 338, 343, 345, 347, 356, 363, 372], "4": [1, 4, 5, 10, 11, 14, 16, 17, 21, 24, 25, 26, 31, 42, 43, 51, 79, 97, 106, 108, 120, 143, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 180, 181, 182, 185, 189, 191, 192, 193, 195, 196, 197, 214, 224, 229, 242, 244, 254, 255, 260, 264, 265, 267, 276, 277, 278, 284, 302, 316, 318, 345, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 370, 372, 373, 374, 377], "where": [1, 5, 6, 11, 17, 23, 24, 34, 41, 92, 97, 101, 124, 134, 137, 140, 165, 168, 173, 176, 184, 186, 215, 222, 224, 233, 235, 237, 238, 239, 240, 243, 256, 263, 266, 269, 279, 281, 283, 301, 306, 307, 336, 338, 340, 347, 357, 358, 359, 360, 361, 362, 370], "probabl": [1, 2, 14, 29, 31, 32, 34, 35, 40, 70, 71, 73, 89, 92, 97, 101, 139, 140, 141, 147, 186, 212, 215, 254, 289, 306, 307, 330, 336, 338, 363], "uniform": [1, 213, 222, 257], "distribut": [1, 4, 5, 97, 139, 141, 213, 222, 224, 257, 306, 307, 347, 374], "u_f": 1, "rangl": [1, 11, 13, 15, 16, 28, 29, 30, 31, 43, 68, 74, 92, 101, 137, 140, 165, 167, 210, 213, 215, 222, 223, 224, 227, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 244, 251, 252, 255, 257, 263, 269, 289, 292, 304, 306, 307, 323, 336, 362, 363], "mapsto": [1, 227, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240], "u_d": 1, "langl": [1, 11, 28, 30, 43, 92, 101, 137, 140, 165, 210, 215, 222, 223, 292, 304, 323, 362, 374], "sum_": [1, 23, 24, 34, 166, 169, 174, 176, 178, 184, 190, 224, 241, 263, 269, 279, 307, 308, 342, 343, 344, 347, 364, 372], "dive": 1, "implement": [1, 9, 10, 13, 14, 15, 16, 17, 18, 34, 35, 41, 66, 76, 77, 78, 91, 97, 98, 113, 134, 136, 164, 167, 170, 183, 184, 188, 189, 213, 215, 217, 222, 223, 224, 225, 226, 232, 233, 234, 235, 236, 244, 256, 259, 269, 271, 272, 282, 287, 288, 289, 293, 295, 296, 301, 312, 336, 337, 339, 341, 344, 347, 362, 372, 374], "To": [1, 5, 10, 17, 18, 21, 23, 24, 28, 97, 98, 145, 164, 184, 209, 211, 213, 260, 264, 265, 267, 268, 280, 284, 289, 290, 294, 349, 350, 360, 361, 364, 369, 371, 372, 373, 374], "keep": [1, 4, 16, 31, 43, 225, 244, 285, 294, 346, 347, 364], "thing": [1, 15, 23, 226, 347], "consid": [1, 10, 14, 16, 17, 26, 28, 42, 84, 101, 137, 224, 241, 244, 255, 259, 306, 350, 372, 374], "2k": [1, 101], "set": [1, 2, 3, 5, 9, 10, 12, 13, 17, 28, 29, 31, 35, 39, 41, 42, 43, 48, 53, 56, 57, 62, 64, 66, 70, 77, 78, 91, 97, 98, 100, 106, 107, 109, 112, 113, 120, 123, 134, 139, 140, 141, 144, 165, 170, 173, 181, 184, 186, 187, 188, 189, 208, 214, 221, 225, 242, 244, 247, 249, 251, 252, 254, 255, 256, 258, 259, 261, 262, 263, 266, 269, 279, 281, 288, 290, 291, 293, 296, 298, 300, 301, 302, 306, 339, 346, 347, 356, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 374, 375], "put": [1, 48, 53, 56, 62, 176, 306], "qubit": [1, 9, 10, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 29, 30, 31, 35, 36, 37, 39, 42, 48, 51, 53, 56, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 80, 87, 91, 100, 101, 136, 139, 141, 143, 144, 145, 149, 159, 164, 170, 171, 172, 175, 177, 179, 180, 181, 182, 184, 185, 186, 189, 208, 209, 210, 211, 212, 213, 215, 224, 227, 228, 229, 230, 231, 234, 235, 243, 244, 247, 248, 249, 250, 252, 255, 256, 261, 263, 266, 269, 279, 281, 283, 285, 289, 291, 295, 306, 307, 309, 329, 330, 332, 343, 344, 345, 346, 347, 350, 352, 354, 372, 373, 374, 377], "diagon": [1, 23, 24, 165, 178, 186, 259, 261, 262, 263, 266, 279, 283, 295, 362, 373, 377], "basi": [1, 5, 16, 21, 28, 29, 90, 91, 97, 139, 141, 143, 164, 169, 170, 184, 186, 187, 189, 190, 191, 192, 193, 208, 210, 229, 244, 249, 261, 285, 295, 303, 307, 317, 318, 332, 333, 334, 342, 344, 347, 363, 371, 372, 373], "wall": [1, 31], "flip": [1, 12, 16, 34, 97, 247, 249, 250, 252, 263, 269, 373], "control": [1, 5, 9, 16, 17, 18, 41, 68, 77, 78, 98, 144, 187, 213, 220, 224, 244, 255, 306, 346, 347], "z": [1, 2, 6, 10, 16, 17, 19, 20, 21, 23, 25, 26, 28, 29, 31, 65, 143, 187, 191, 192, 193, 244, 247, 261, 263, 266, 279, 281, 295, 306, 332, 372], "undo": 1, "chang": [1, 5, 17, 18, 21, 23, 34, 97, 164, 184, 186, 190, 233, 235, 237, 239, 240, 289, 295, 300, 306, 347, 363, 373, 374], "given": [1, 3, 5, 10, 23, 24, 28, 29, 31, 34, 40, 41, 43, 77, 97, 101, 104, 113, 120, 137, 147, 164, 165, 166, 186, 208, 210, 223, 241, 244, 260, 264, 265, 267, 268, 280, 284, 287, 289, 291, 306, 308, 317, 321, 336, 338, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374], "k": [1, 4, 73, 92, 101, 140, 176, 178, 183, 203, 224, 241, 243, 254, 256, 258, 267, 269, 274, 292, 306, 344, 346, 356, 358, 365, 372], "return": [1, 3, 9, 10, 14, 16, 17, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 73, 74, 78, 91, 92, 95, 96, 97, 99, 100, 101, 104, 106, 108, 109, 112, 113, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 217, 222, 223, 224, 225, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 342, 343, 344, 345, 347, 350, 365], "routin": [1, 9, 10, 15, 16, 17, 28, 41, 97, 177, 179, 181, 186, 215, 222, 223, 224, 226, 227, 228, 229, 230, 231, 234, 235, 236, 241, 243, 244, 255, 256, 257, 295, 347], "numpi": [1, 3, 10, 11, 21, 23, 24, 31, 36, 38, 41, 68, 69, 70, 71, 73, 74, 91, 102, 113, 118, 119, 134, 136, 137, 139, 165, 169, 170, 184, 185, 224, 251, 254, 260, 264, 265, 266, 267, 269, 271, 273, 279, 280, 281, 284, 291, 297, 300, 306, 308, 344, 347, 357, 358, 359, 360, 361, 364, 368, 370, 372, 373, 374, 377], "np": [1, 3, 10, 11, 21, 23, 24, 25, 31, 34, 41, 74, 101, 113, 134, 136, 141, 147, 165, 166, 168, 169, 170, 173, 174, 176, 178, 184, 185, 187, 188, 189, 190, 214, 224, 251, 254, 260, 264, 265, 266, 267, 279, 280, 281, 284, 291, 296, 300, 301, 302, 307, 317, 318, 332, 333, 334, 335, 340, 342, 343, 344, 345, 355, 357, 358, 359, 360, 361, 363, 364, 368, 370, 372, 373, 374, 377], "everyth": [1, 16, 374], "need": [1, 4, 5, 6, 10, 12, 18, 19, 23, 24, 28, 31, 34, 39, 40, 41, 60, 61, 70, 73, 75, 87, 91, 97, 134, 137, 144, 171, 229, 251, 254, 255, 260, 264, 265, 267, 268, 280, 284, 286, 291, 308, 312, 347, 348, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 370, 372, 373, 374], "standard": [1, 23, 28, 29, 30, 66, 92, 120, 140, 207, 212, 214, 250, 269, 293, 306, 333, 334, 374], "unrol": [1, 254], "fals": [1, 16, 35, 40, 48, 51, 53, 56, 62, 64, 77, 78, 79, 92, 93, 94, 97, 98, 105, 120, 134, 139, 144, 147, 165, 169, 170, 175, 179, 181, 186, 187, 189, 205, 213, 221, 225, 244, 252, 254, 256, 259, 261, 263, 264, 265, 266, 267, 268, 269, 275, 276, 277, 278, 279, 281, 284, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 306, 309, 313, 320, 343, 344, 345, 347], "wire": [1, 10, 14, 15, 225, 244, 249, 255], "rang": [1, 3, 10, 11, 17, 20, 31, 35, 39, 43, 165, 186, 215, 254, 255, 259, 269, 291, 309, 356, 364], "ctrl": [1, 10, 17, 31, 65, 77, 97, 225, 290], "list": [1, 2, 5, 7, 9, 18, 26, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 48, 51, 53, 56, 57, 61, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 81, 82, 84, 87, 89, 91, 95, 96, 97, 99, 100, 101, 113, 116, 120, 123, 127, 136, 139, 140, 141, 142, 143, 144, 146, 164, 165, 166, 167, 170, 171, 173, 177, 184, 185, 187, 188, 189, 207, 209, 211, 214, 221, 225, 242, 244, 247, 248, 249, 250, 252, 255, 262, 263, 264, 265, 267, 268, 269, 275, 283, 284, 287, 291, 292, 296, 304, 306, 307, 312, 313, 314, 323, 332, 333, 334, 335, 337, 339, 340, 342, 344, 345, 347, 350, 353, 354, 357, 358, 359, 360, 361, 373, 374, 375], "qroutin": [1, 9, 10, 13, 14, 15, 16, 17, 167, 183, 186, 213, 215, 217, 222, 223, 224, 225, 227, 229, 230, 231, 241, 243, 245, 247, 248, 249, 250, 252, 254, 256, 257, 295, 373], "new_wir": [1, 10, 14, 15, 16, 215, 225, 245, 247, 248, 249, 250, 252, 255], "As": [1, 5, 15, 19, 23, 25, 26, 29, 186, 251, 252, 291, 295, 347, 355, 361, 362, 369], "you": [1, 4, 5, 10, 11, 12, 14, 15, 16, 20, 39, 43, 48, 53, 56, 60, 61, 62, 98, 120, 164, 205, 214, 233, 242, 244, 261, 263, 266, 279, 281, 291, 293, 296, 306, 346, 347, 348, 362, 371, 372, 373, 375], "see": [1, 4, 5, 17, 19, 22, 23, 26, 29, 30, 31, 34, 41, 70, 78, 81, 82, 97, 101, 123, 176, 179, 185, 196, 212, 218, 224, 244, 247, 248, 249, 251, 252, 254, 265, 267, 268, 280, 284, 291, 295, 296, 297, 300, 302, 329, 347, 362, 372, 373, 374], "repeat": [1, 28, 30, 41, 239, 240, 356, 360], "lot": [1, 16, 40, 244, 259], "do": [1, 3, 4, 5, 14, 23, 28, 35, 40, 92, 97, 101, 141, 184, 186, 242, 288, 289, 306, 307, 363, 372, 373, 374], "revert": [1, 97, 139], "them": [1, 2, 4, 5, 6, 8, 13, 15, 16, 18, 20, 22, 23, 97, 104, 171, 195, 198, 213, 255, 301, 306, 347, 356, 360, 373], "simplifi": [1, 13, 212, 213, 372, 373], "uncomput": [1, 13, 16, 225, 255, 346], "block": [1, 16, 28, 254], "notic": [1, 5, 16, 17, 21, 41, 228, 291, 312], "how": [1, 3, 5, 7, 16, 17, 18, 20, 22, 31, 33, 34, 39, 41, 42, 97, 176, 224, 255, 362, 372, 373, 374, 375], "don": [1, 5, 41, 71, 209, 211], "t": [1, 2, 5, 10, 11, 16, 17, 18, 19, 20, 21, 34, 41, 43, 48, 53, 56, 60, 62, 65, 71, 97, 101, 123, 134, 137, 141, 146, 167, 168, 176, 183, 184, 186, 209, 211, 244, 263, 266, 269, 279, 281, 306, 308, 336, 338, 354, 357, 358, 359, 360, 361, 363, 366, 367, 368, 369, 370, 373, 374], "explicit": [1, 97, 137], "automat": [1, 4, 11, 16, 43, 98, 136, 170, 227, 228, 229, 234, 235, 242, 260, 264, 265, 267, 268, 280, 284, 347, 363, 374], "when": [1, 10, 11, 12, 14, 16, 23, 27, 28, 32, 34, 39, 43, 69, 70, 71, 73, 75, 79, 80, 91, 97, 98, 101, 106, 110, 111, 113, 114, 134, 186, 196, 213, 214, 226, 244, 247, 248, 251, 252, 254, 255, 259, 261, 263, 266, 269, 279, 281, 287, 295, 301, 302, 313, 314, 347, 352, 355, 356, 363, 372, 373, 374], "exit": [1, 16], "clearer": 1, "now": [1, 3, 4, 14, 15, 30, 42, 146, 165, 261, 263, 266, 279, 281, 347, 371, 372, 373, 374, 375], "have": [1, 2, 4, 5, 7, 10, 11, 14, 15, 16, 18, 19, 28, 31, 34, 35, 41, 60, 70, 71, 73, 77, 78, 97, 101, 120, 123, 137, 145, 164, 178, 213, 244, 249, 252, 254, 266, 279, 281, 289, 291, 295, 301, 306, 309, 344, 347, 348, 356, 362, 363, 372, 373, 374, 375], "palindrom": 1, "bit": [1, 4, 9, 12, 14, 16, 17, 20, 40, 68, 78, 89, 97, 139, 186, 213, 229, 241, 243, 244, 252, 256, 269, 306, 309, 363], "string": [1, 17, 42, 51, 78, 97, 99, 123, 141, 143, 186, 208, 210, 242, 244, 263, 266, 269, 279, 281, 292, 303, 329, 330, 336, 338, 344, 345, 363], "own": [1, 5, 9, 10, 14, 18, 31, 33, 39, 77, 91, 137, 164, 270, 293, 296, 346], "mirror": 1, "rememb": 1, "sign": [1, 97, 104, 186, 199, 263, 286, 304, 307, 312], "xor": [1, 16, 216, 249, 262, 263], "b_1": 1, "b_": [1, 241], "b_2": 1, "place": [1, 5, 17, 40, 97, 101, 225, 233, 235, 237, 244, 266, 271, 272, 273, 279, 288, 363], "second": [1, 15, 16, 23, 24, 29, 30, 31, 135, 144, 151, 174, 176, 181, 199, 213, 228, 240, 263, 266, 279, 281, 307, 319, 321, 322, 323, 324, 356, 357, 359, 360, 366, 367], "half": [1, 307, 347], "its": [1, 5, 7, 10, 11, 15, 16, 18, 23, 29, 31, 34, 35, 39, 41, 43, 91, 92, 97, 101, 118, 120, 127, 137, 140, 141, 165, 183, 186, 207, 210, 220, 221, 244, 249, 258, 263, 269, 270, 291, 327, 342, 343, 345, 347, 356, 372, 373, 374], "so": [1, 3, 5, 8, 16, 28, 34, 41, 74, 97, 141, 174, 176, 177, 184, 186, 255, 266, 279, 301, 309, 347, 355, 356, 366, 372, 373, 374], "perform": [1, 3, 5, 9, 16, 18, 28, 30, 33, 34, 35, 36, 38, 39, 41, 43, 68, 83, 97, 101, 141, 164, 183, 186, 187, 213, 215, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 249, 256, 263, 266, 269, 279, 281, 282, 285, 286, 287, 288, 291, 292, 295, 296, 303, 304, 306, 340, 347, 374], "thu": [1, 16, 28, 33, 58, 79, 186, 208, 210, 212, 224, 225, 244, 252, 254, 255, 266, 288, 298, 363, 372, 374], "origin": [1, 5, 374], "onc": [1, 11, 12, 22, 26, 78, 224, 287, 362, 373, 374], "again": [1, 255, 373], "is_palindrom": 1, "first_half": 1, "second_half": 1, "w1": [1, 255], "w2": [1, 255], "zip": [1, 31, 101, 346], "revers": [1, 5, 15, 20, 39, 241, 252, 259, 306, 373], "And": [1, 10], "There": [1, 4, 77, 212, 213, 364], "exactli": [1, 16, 252, 269], "henc": [1, 18, 25, 186, 254, 355], "approx": [1, 183], "good": [1, 5, 16, 35, 186, 356, 374], "diff": [1, 134], "start": [1, 4, 16, 17, 21, 23, 24, 29, 30, 31, 33, 35, 39, 40, 41, 43, 68, 97, 104, 186, 199, 205, 225, 248, 252, 260, 264, 265, 267, 268, 269, 270, 280, 284, 286, 291, 294, 299, 307, 312, 346, 362, 373, 376], "superposit": [1, 141, 249, 269], "nstep": [1, 41], "int": [1, 10, 14, 17, 61, 65, 70, 73, 77, 81, 82, 84, 85, 87, 89, 97, 98, 100, 101, 102, 104, 105, 113, 118, 119, 123, 134, 136, 139, 141, 142, 143, 144, 149, 151, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 195, 196, 197, 199, 201, 203, 205, 208, 209, 210, 211, 214, 217, 218, 222, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 252, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 291, 292, 294, 297, 299, 301, 302, 304, 306, 307, 308, 312, 313, 319, 329, 330, 332, 333, 334, 337, 342, 343, 344, 345, 357, 358, 359, 360, 361], "_": [1, 16, 165, 166, 176, 184, 190, 215, 229, 231, 241, 255, 291, 292, 304, 329, 338, 342, 343, 345, 372], "0000": 1, "2499999999999995": [1, 215], "0110": 1, "1001": 1, "1111": 1, "build": [1, 3, 9, 10, 11, 12, 13, 17, 18, 35, 41, 43, 77, 95, 96, 97, 100, 101, 123, 134, 139, 140, 144, 146, 164, 165, 167, 175, 180, 182, 215, 223, 228, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 249, 261, 266, 269, 279, 285, 287, 293, 296, 331, 347, 373, 374], "evalu": [1, 21, 41, 68, 72, 78, 91, 97, 101, 120, 128, 134, 137, 139, 186, 244, 245, 247, 248, 249, 250, 251, 252, 262, 283, 296, 304, 307, 347], "output": [1, 3, 16, 31, 32, 33, 35, 51, 74, 78, 97, 101, 139, 141, 186, 241, 245, 247, 249, 250, 255, 306, 307, 320, 346, 356], "decent": 1, "high": [1, 8, 9, 11, 16, 18, 34, 97, 101, 171, 173, 184, 188, 220, 226, 280, 307, 360, 366, 367, 368, 369, 370], "Of": [1, 10, 15, 16, 26, 28, 41], "cours": [1, 10, 15, 16, 26, 28, 363], "particularli": [1, 79], "help": [1, 8, 16, 31, 164, 165, 259, 293, 347, 348, 358, 371, 372, 374], "solv": [1, 22, 24, 25, 34, 164, 165, 198, 200, 201, 202, 203, 204, 206, 258, 260, 264, 265, 267, 268, 274, 275, 280, 282, 284, 346, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 374], "practic": [1, 15, 18, 28, 30, 34, 35, 71, 263, 355, 356, 362, 363], "come": [1, 4, 10, 11, 15, 16, 17, 18, 23, 43, 79, 186, 202, 203, 206, 213, 224, 260, 263, 265, 266, 267, 279, 281, 284, 291, 307, 308, 363, 374], "level": [1, 8, 9, 11, 16, 18, 75, 95, 96, 97, 100, 101, 139, 140, 144, 185, 220, 226, 244, 247, 296, 307, 347, 362, 364, 372, 373, 374, 375], "construct": [1, 3, 8, 14, 16, 17, 19, 26, 27, 41, 102, 123, 136, 143, 164, 165, 168, 174, 177, 178, 179, 181, 184, 212, 214, 224, 244, 247, 252, 281, 287, 298, 325, 329, 330, 332, 333, 334, 335, 347, 362, 371, 373], "If": [1, 4, 5, 17, 24, 25, 28, 31, 33, 35, 39, 40, 41, 48, 53, 56, 57, 60, 61, 62, 64, 77, 97, 101, 112, 120, 134, 136, 137, 139, 141, 144, 165, 170, 183, 186, 187, 196, 199, 212, 214, 215, 224, 225, 233, 242, 244, 250, 254, 255, 261, 263, 266, 269, 275, 279, 281, 286, 287, 292, 293, 297, 300, 301, 302, 306, 307, 311, 312, 333, 334, 338, 344, 347, 348, 357, 358, 359, 360, 361, 362, 364, 372], "curiou": 1, "document": [1, 5, 7, 9, 36, 37, 41, 46, 68, 91, 185, 212, 220, 247, 248, 252, 258, 263, 291, 300, 302, 306, 329, 347, 350, 372, 373], "complic": [1, 16, 244, 247], "data": [1, 31, 33, 35, 40, 41, 42, 43, 51, 54, 69, 75, 77, 89, 91, 92, 95, 96, 97, 100, 101, 102, 139, 140, 144, 186, 224, 256, 293, 306, 347, 365], "structur": [1, 12, 17, 31, 32, 69, 75, 78, 84, 85, 87, 89, 91, 97, 134, 141, 164, 169, 170, 184, 186, 187, 214, 224, 242, 244, 261, 263, 266, 269, 279, 281, 288, 293, 296, 306, 307, 312, 364, 365, 372, 373], "ani": [2, 5, 9, 10, 13, 14, 16, 17, 23, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 53, 54, 60, 61, 66, 77, 78, 97, 101, 104, 113, 139, 144, 145, 146, 199, 205, 209, 211, 213, 227, 228, 230, 242, 244, 254, 255, 279, 291, 294, 296, 300, 326, 348, 356, 363, 373, 375, 376], "must": [2, 5, 9, 31, 40, 41, 98, 101, 145, 166, 168, 169, 171, 176, 177, 209, 211, 289, 292, 294, 295, 301, 312, 339, 341, 347, 350, 375], "lift": [2, 217], "addit": [2, 3, 5, 8, 10, 13, 14, 15, 16, 20, 23, 28, 32, 35, 41, 78, 79, 97, 101, 136, 165, 205, 213, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 244, 245, 263, 266, 275, 279, 281, 296, 347, 361, 369, 372, 373], "shot": [2, 28, 29, 30, 33, 35, 43, 97, 101, 140, 141, 165, 186, 307, 350, 374], "what": [2, 14, 33, 35, 40, 42, 71, 213, 242, 251, 312], "should": [2, 5, 16, 22, 31, 33, 35, 39, 40, 41, 48, 53, 56, 62, 63, 78, 97, 101, 120, 136, 137, 141, 169, 170, 186, 187, 189, 214, 219, 220, 225, 226, 233, 242, 243, 244, 247, 249, 253, 254, 256, 260, 261, 263, 266, 267, 279, 281, 284, 287, 288, 289, 291, 293, 296, 301, 308, 312, 347, 355, 372, 373, 375], "measur": [2, 3, 5, 9, 12, 17, 18, 28, 29, 30, 32, 33, 35, 39, 42, 43, 48, 51, 53, 56, 62, 64, 65, 68, 71, 73, 74, 78, 79, 88, 89, 92, 97, 98, 101, 139, 140, 141, 165, 186, 208, 210, 213, 229, 244, 251, 291, 295, 301, 304, 306, 346, 347, 350, 354, 363, 373, 374], "observ": [2, 3, 8, 9, 11, 18, 20, 21, 24, 25, 28, 31, 32, 33, 35, 39, 41, 42, 43, 64, 90, 97, 101, 141, 143, 165, 209, 211, 251, 259, 261, 262, 263, 266, 269, 271, 279, 281, 283, 285, 287, 289, 294, 295, 303, 304, 306, 307, 308, 346, 347, 350, 372, 373, 374, 376], "call": [2, 3, 9, 10, 12, 15, 16, 17, 19, 22, 23, 28, 33, 35, 36, 38, 39, 41, 51, 97, 98, 100, 101, 123, 134, 137, 170, 177, 189, 199, 205, 213, 214, 217, 224, 227, 228, 229, 230, 231, 244, 254, 255, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 288, 293, 296, 309, 314, 321, 336, 338, 339, 347, 355, 356, 365, 372, 374, 375, 377], "select": [2, 101, 164, 184, 188, 287, 347, 371, 373, 374], "take": [2, 4, 12, 16, 21, 29, 31, 33, 34, 35, 39, 40, 41, 43, 79, 120, 125, 126, 132, 142, 186, 207, 214, 224, 251, 254, 255, 289, 296, 307, 344, 362, 363, 364, 373], "argument": [2, 10, 12, 17, 19, 21, 31, 33, 35, 39, 40, 60, 61, 80, 96, 97, 101, 104, 113, 120, 125, 126, 132, 134, 142, 144, 146, 186, 205, 214, 215, 221, 224, 227, 228, 229, 230, 231, 242, 244, 247, 251, 252, 254, 255, 259, 261, 263, 266, 279, 281, 289, 291, 293, 295, 296, 297, 300, 302, 303, 347], "4999999999999999": [2, 16, 29, 40, 254], "context": [2, 16, 23, 305, 310, 314, 373], "clinalg": [2, 6, 33, 79, 291, 305, 311, 347], "extend": [2, 5, 7, 27, 96, 97, 214, 255, 347], "plugin": [2, 3, 27, 28, 30, 31, 32, 35, 41, 42, 43, 44, 45, 57, 60, 61, 75, 79, 81, 91, 97, 100, 101, 116, 165, 194, 198, 199, 201, 202, 203, 204, 206, 261, 263, 266, 279, 281, 307, 312, 313, 347, 362, 365, 366, 367, 368, 369, 370, 371, 373, 376], "capabl": [2, 7, 18, 27, 35, 36, 39, 40, 42, 103, 350, 356], "instanc": [2, 9, 10, 12, 14, 16, 17, 23, 24, 25, 28, 31, 33, 35, 36, 39, 40, 42, 57, 69, 77, 78, 95, 96, 97, 100, 101, 120, 134, 139, 140, 148, 213, 214, 225, 233, 244, 247, 248, 252, 259, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 289, 306, 314, 336, 338, 347, 350, 354, 356, 362, 363, 365], "compil": [2, 5, 6, 9, 11, 12, 13, 35, 39, 41, 42, 51, 52, 53, 54, 57, 91, 97, 101, 225, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 312, 313, 347, 349, 376], "befor": [2, 4, 5, 15, 31, 40, 43, 46, 176, 217, 225, 244, 288, 291, 347, 363], "won": [2, 48, 53, 56, 62, 244], "limit": [2, 5, 18, 28, 36, 37, 39, 195, 196, 197, 347], "topologi": [2, 35, 42, 91, 100, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 298], "scipyminimizeplugin": [2, 3, 31, 43, 261, 263, 266, 279, 281, 285, 289, 347, 365, 366, 367, 368, 369, 370, 373, 374], "tri": [2, 31, 34], "minim": [2, 3, 11, 22, 24, 31, 41, 43, 263, 279, 285, 289, 297, 300, 302, 312, 346, 347, 355, 357, 362, 364, 366, 367, 373, 374], "averag": [2, 28, 30, 33, 35, 41, 43, 137, 314, 319, 329, 356], "valu": [2, 3, 5, 9, 10, 17, 23, 28, 30, 32, 33, 34, 35, 39, 41, 43, 57, 66, 68, 71, 73, 74, 78, 90, 96, 97, 99, 101, 118, 120, 121, 122, 124, 134, 135, 137, 139, 141, 142, 144, 146, 165, 186, 213, 214, 215, 229, 231, 233, 235, 237, 239, 242, 244, 247, 248, 249, 250, 251, 252, 254, 262, 263, 266, 270, 273, 275, 279, 281, 283, 287, 292, 294, 296, 300, 301, 302, 304, 306, 307, 308, 309, 316, 363, 373, 374], "rx": [2, 10, 17, 31, 42, 65, 97, 214, 251, 254, 289, 291, 301, 306, 347, 373, 374], "core": [2, 3, 8, 11, 12, 19, 20, 21, 26, 27, 30, 31, 35, 40, 41, 42, 43, 44, 45, 78, 164, 165, 166, 170, 184, 185, 188, 189, 191, 192, 193, 208, 214, 225, 229, 251, 259, 263, 266, 271, 272, 273, 279, 281, 298, 306, 347, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 372, 374], "theta": [2, 3, 10, 11, 17, 43, 97, 101, 165, 167, 214, 251, 254, 292, 301, 347, 373, 374], "angl": [2, 31, 39, 41, 51, 97, 120, 125, 132, 181, 251, 254, 289, 294, 301, 306, 362, 374], "parameter_map": [2, 31, 41, 43, 101, 139, 165, 289], "3": [2, 3, 4, 5, 7, 11, 15, 16, 17, 20, 24, 25, 26, 31, 33, 35, 40, 41, 42, 43, 61, 80, 97, 98, 120, 122, 124, 127, 128, 129, 131, 135, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 169, 170, 189, 191, 192, 193, 213, 215, 224, 244, 252, 254, 255, 258, 259, 260, 263, 264, 265, 266, 267, 279, 281, 284, 287, 289, 291, 298, 300, 306, 308, 316, 330, 340, 349, 351, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377], "141592657182918": 2, "141592651874659": 2, "believ": 3, "well": [3, 5, 17, 34, 41, 91, 207, 266, 279, 281, 291, 347, 356, 362, 372, 373, 375, 376], "suit": [3, 164], "noisi": [3, 5, 36, 165, 207, 304, 374], "intermedi": [3, 9, 16, 31, 32, 74, 79, 88, 89, 92, 139, 140, 186, 213, 291, 347], "scale": 3, "nisq": [3, 376], "thei": [3, 5, 7, 8, 16, 23, 25, 26, 41, 68, 69, 75, 91, 97, 113, 207, 209, 211, 213, 214, 219, 244, 253, 255, 258, 267, 284, 287, 291, 293, 312, 313, 314, 347, 354, 362, 365, 372, 373], "necessarili": [3, 5, 16], "long": [3, 23, 34, 97, 197, 244, 300, 347], "nevertheless": [3, 39, 373, 375], "prepar": [3, 5, 28, 164, 165, 167, 180, 186, 207, 208, 213, 223, 224, 243, 256, 257, 269, 270, 271, 272, 273, 347, 363, 371, 374], "ansatz": [3, 31, 43, 165, 175, 177, 181, 258, 261, 263, 266, 279, 281, 285, 287, 294, 301, 304, 347, 362, 371, 374], "below": [3, 5, 7, 16, 28, 29, 32, 42, 78, 97, 176, 196, 224, 244, 249, 254, 291, 295, 306, 347, 356, 364, 366, 367, 368, 369, 370], "illustr": [3, 29, 43, 185, 289, 373], "hamiltonian": [3, 8, 18, 22, 24, 33, 91, 136, 137, 141, 165, 168, 183, 184, 185, 186, 191, 192, 193, 202, 203, 206, 209, 211, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 279, 280, 281, 282, 284, 303, 308, 347, 362, 363, 371, 373, 374, 375], "here": [3, 4, 10, 12, 14, 15, 16, 17, 19, 25, 29, 30, 68, 78, 79, 164, 176, 184, 224, 225, 247, 251, 255, 291, 298, 307, 314, 347, 355, 356, 364, 365, 366, 367, 368, 369, 370, 373, 374], "antiferromagnet": [3, 34], "heisenberg": 3, "whose": [3, 16, 78, 196, 245, 251, 262, 287, 291, 329, 347, 362, 363, 373], "ground": [3, 18, 23, 31, 165, 187, 263, 269, 362, 363, 373, 374], "energi": [3, 11, 18, 22, 23, 31, 34, 41, 43, 101, 139, 165, 173, 174, 184, 185, 186, 187, 251, 260, 263, 264, 265, 266, 267, 268, 279, 280, 281, 284, 289, 308, 347, 355, 362, 373, 374], "want": [3, 4, 23, 28, 39, 41, 137, 139, 165, 214, 225, 251, 254, 260, 261, 263, 266, 279, 280, 281, 301, 361, 369, 374], "approxim": [3, 25, 32, 36, 140, 165, 183, 186, 263, 264, 265, 266, 267, 268, 269, 279, 281, 284, 285, 302, 336, 346, 355, 370, 374], "theta_i": [3, 292], "stack": [3, 10, 30, 31, 32, 39, 40, 41, 43, 97, 100, 101, 165, 198, 199, 200, 201, 202, 203, 204, 206, 255, 285, 288, 289, 293, 294, 300, 304, 347, 365, 373, 374, 376], "go": [3, 39, 186, 304, 366, 367, 368, 369, 370], "ob": [3, 11, 26, 28, 30, 31, 43, 97, 141, 251, 263, 308, 374], "ry": [3, 10, 11, 17, 41, 43, 65, 97, 165, 177, 214, 224, 295, 301, 306, 373, 374], "arrai": [3, 10, 16, 40, 68, 69, 73, 91, 101, 102, 118, 119, 120, 136, 137, 139, 141, 147, 166, 168, 169, 173, 176, 184, 208, 210, 213, 214, 219, 224, 244, 247, 248, 251, 253, 254, 260, 263, 266, 269, 279, 280, 281, 300, 302, 306, 308, 331, 336, 338, 342, 343, 344, 345, 364, 372, 373], "length": [3, 14, 31, 40, 70, 97, 101, 141, 159, 219, 244, 248, 252, 253, 255, 263, 269], "ans\u00e4tz": [3, 11, 259, 263, 266, 281, 362, 371], "sigma_z": [3, 19, 26, 31, 41, 251, 262, 269, 283, 330], "sigma_x": [3, 11, 19, 26, 43, 269, 330, 362, 363], "sigma_i": [3, 26, 269, 330], "scipi": [3, 39, 43, 136, 285, 300, 346], "re": [3, 5, 16, 35, 39, 40, 77, 97, 292, 373], "x0": [3, 25, 165, 292, 297, 300, 301, 302, 373, 374], "8": [3, 4, 5, 16, 43, 128, 135, 148, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 169, 181, 182, 224, 226, 265, 268, 276, 277, 278, 347, 357, 359, 360, 366, 367, 368, 373], "equival": [3, 5, 14, 26, 29, 40, 51, 73, 97, 101, 291, 362, 374], "deleg": [3, 5, 293], "equip": [3, 34], "minimum": [3, 22, 23, 34, 265, 266, 281, 291, 301, 363], "vqe": [3, 39, 43, 165, 287, 294, 346, 347, 371, 374, 376], "messag": [3, 35, 40, 79, 81, 82, 93, 94, 244], "termin": [3, 5, 91, 97, 98, 285], "successfulli": 3, "success": [3, 63, 68, 302], "true": [3, 9, 16, 35, 40, 48, 51, 53, 56, 57, 62, 64, 68, 72, 77, 78, 92, 93, 94, 97, 98, 105, 134, 136, 139, 140, 141, 143, 165, 170, 181, 187, 205, 225, 244, 245, 247, 249, 250, 251, 252, 254, 256, 259, 261, 263, 266, 269, 275, 276, 277, 278, 279, 281, 286, 288, 289, 290, 292, 293, 299, 306, 309, 313, 319, 321, 326, 327, 338, 343, 344, 345, 347, 363, 364, 374], "statu": [3, 63, 347], "fun": [3, 113, 254], "3099330343247272": 3, "810e": 3, "800e": 3, "nit": 3, "jac": 3, "000e": 3, "hess_inv": 3, "nfev": 3, "6": [3, 5, 16, 23, 26, 43, 100, 121, 125, 135, 148, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 169, 260, 264, 265, 267, 268, 276, 277, 278, 280, 284, 320, 349, 351, 356, 357, 359, 361, 365, 366, 367, 368, 369, 372, 373, 377], "njev": 3, "999999999999984": 3, "No": [3, 9, 15, 61, 70, 251, 279, 347, 349], "gpu": [3, 9, 87, 251], "tpu": [3, 9, 251], "fall": [3, 9, 251], "back": [3, 9, 28, 39, 41, 251, 293, 374], "cpu": [3, 4, 9, 251, 347], "tf_cpp_min_log_level": [3, 9, 251], "rerun": [3, 9, 251], "info": [3, 9, 71, 187, 251, 294, 373], "term": [3, 4, 5, 11, 16, 19, 20, 21, 23, 24, 25, 30, 32, 35, 43, 91, 136, 164, 165, 170, 176, 178, 186, 189, 191, 192, 193, 202, 203, 206, 252, 259, 260, 261, 263, 265, 266, 267, 279, 281, 284, 295, 347, 372, 373, 374], "prog": [3, 9, 11, 14, 15, 16, 31, 77, 79, 97, 98, 165, 216, 224, 225, 226, 244, 255, 289, 291, 298, 309, 347, 373, 374], "reg": [3, 165, 373, 374], "new_var": [3, 11, 25, 31, 91, 97, 165, 244, 263, 289, 373, 374], "float": [3, 10, 11, 17, 31, 58, 73, 84, 89, 92, 97, 101, 113, 136, 137, 139, 140, 141, 143, 146, 165, 166, 169, 170, 171, 173, 174, 176, 178, 183, 184, 185, 186, 187, 188, 189, 208, 209, 210, 212, 214, 244, 254, 263, 266, 269, 271, 279, 281, 287, 289, 292, 296, 297, 301, 302, 306, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 338, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 373, 374], "theta_": [3, 165, 173, 374], "circ": [3, 9, 12, 17, 31, 48, 77, 97, 98, 136, 165, 255, 266, 279, 289, 353, 354, 373, 374], "handl": [3, 16, 34, 164, 165, 213, 258, 261, 263, 266, 279, 281, 298, 309, 362, 372, 376], "optimizer_scipi": 3, "cobyla": [3, 43, 300, 365, 366, 367, 368, 369, 370, 373, 374], "tol": [3, 43, 212, 292, 300, 315, 325, 326, 327, 328, 365, 366, 367, 368, 369, 370, 374], "1e": [3, 31, 43, 92, 165, 212, 244, 287, 292, 300, 302, 315, 320, 325, 326, 327, 328, 365, 366, 367, 368, 369, 370, 374], "option": [3, 18, 28, 31, 33, 35, 40, 43, 48, 51, 53, 56, 57, 61, 62, 64, 65, 70, 77, 78, 79, 81, 82, 84, 85, 87, 89, 92, 97, 98, 101, 102, 104, 105, 113, 116, 123, 134, 136, 137, 139, 140, 141, 142, 144, 147, 165, 169, 170, 171, 173, 175, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 195, 196, 197, 199, 202, 203, 205, 206, 208, 209, 210, 211, 212, 215, 224, 225, 228, 229, 244, 245, 247, 248, 249, 250, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 269, 275, 276, 277, 278, 279, 281, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 312, 313, 319, 320, 321, 322, 325, 329, 330, 338, 343, 344, 345, 347, 365, 366, 367, 368, 369, 370, 372, 374], "maxit": [3, 43, 292, 300, 302, 365, 366, 367, 368, 369, 370, 374], "200": [3, 292, 365, 366, 367, 368, 369, 370], "exact": [3, 28, 36, 78, 165, 269, 373], "g": [3, 5, 7, 9, 10, 13, 17, 23, 25, 33, 35, 39, 51, 64, 77, 87, 97, 137, 165, 208, 209, 210, 227, 228, 230, 232, 255, 258, 261, 263, 266, 279, 281, 292, 293, 296, 300, 301, 304, 347, 364, 374, 376], "meta_data": [3, 28, 32, 35, 40, 41, 42, 43, 57, 61, 64, 92, 95, 96, 100, 101, 139, 165, 263, 266, 279, 281, 293, 296, 306, 307, 312, 347, 373], "optimizer_data": [3, 296], "9999999999997735": 3, "571e": 3, "142e": 3, "59": [3, 163], "maxcv": 3, "For": [3, 4, 5, 9, 11, 12, 16, 17, 18, 23, 26, 28, 31, 32, 33, 35, 36, 37, 39, 40, 75, 97, 120, 134, 137, 146, 148, 185, 186, 214, 225, 244, 247, 254, 255, 260, 263, 265, 266, 267, 274, 275, 276, 279, 281, 284, 289, 292, 306, 330, 338, 347, 354, 356, 363, 365, 372, 373, 374], "explain": [3, 7, 31, 33, 34, 39, 42, 347, 372, 373, 375], "pleas": [4, 5, 9, 26, 32, 35, 36, 37, 41, 46, 60, 61, 77, 97, 186, 306, 346, 347, 348, 349, 350, 364, 371, 374], "read": [4, 5, 43, 101, 186], "ato": [4, 5, 9, 10, 346, 347], "end": [4, 5, 11, 13, 17, 21, 23, 35, 97, 186, 244, 269, 294, 307, 312, 323, 331, 336, 338, 347], "licenc": 4, "agreement": [4, 5], "eula": [4, 5], "carefulli": [4, 5], "permit": [4, 5], "pursuant": 4, "condit": [4, 5, 12, 17, 199, 244, 249, 252, 356], "between": [4, 18, 23, 25, 35, 40, 42, 78, 120, 124, 144, 176, 205, 212, 228, 230, 249, 258, 263, 266, 269, 279, 281, 282, 287, 289, 302, 304, 308, 314, 319, 321, 322, 323, 324, 327, 330, 347, 362, 374], "individu": [4, 5, 32, 233, 295, 357, 367], "legal": [4, 5], "entiti": [4, 5], "bull": [4, 5], "sa": [4, 5, 23, 25, 34, 260, 263, 264, 265, 266, 267, 268, 279, 280, 281, 284, 356, 357, 358, 359, 360, 361], "By": [4, 5, 10, 28, 97, 98, 215, 230, 244, 249, 254, 297, 349, 350, 364, 374], "download": [4, 5, 346], "otherwis": [4, 5, 40, 57, 64, 97, 101, 144], "render": 4, "your": [4, 5, 6, 9, 10, 12, 14, 33, 36, 37, 39, 41, 77, 97, 98, 120, 144, 164, 261, 263, 266, 279, 281, 286, 293, 296, 347, 348, 350, 353, 371, 372], "agre": [4, 5], "bound": [4, 5, 97, 128, 186, 244, 320], "licens": 4, "copi": [4, 5, 16, 97, 138, 169, 170, 189, 252, 306, 347], "promptli": 4, "delet": [4, 375], "pip": 4, "conda": [4, 6, 347], "check": [4, 10, 31, 35, 40, 83, 93, 94, 105, 136, 143, 205, 299, 301, 313, 314, 327, 344, 347], "displai": [4, 5, 9, 31, 40, 51, 91, 97, 134, 138, 139, 140, 242, 244, 251, 254, 263, 274, 276, 277, 278, 285, 306, 346, 347, 365, 366, 367, 368, 369, 370, 373], "bellow": 4, "o": [4, 23, 24, 28, 30, 91, 165, 166, 171, 173, 184, 269, 304, 351, 370, 374], "64": [4, 163], "9": [4, 5, 10, 15, 16, 17, 43, 97, 141, 148, 150, 153, 154, 155, 156, 157, 161, 163, 244, 252, 259, 265, 330, 356, 357, 359, 360, 366, 367], "10": [4, 10, 12, 14, 15, 16, 19, 23, 28, 43, 79, 80, 92, 104, 148, 149, 150, 153, 154, 155, 156, 157, 161, 163, 165, 185, 199, 217, 226, 232, 236, 244, 245, 250, 252, 259, 260, 263, 265, 266, 269, 279, 281, 286, 289, 291, 292, 297, 300, 301, 302, 307, 309, 312, 325, 356, 357, 359, 363, 366, 367, 369], "12": [4, 16, 25, 80, 148, 150, 153, 154, 155, 156, 157, 161, 163, 168, 184, 212, 255, 264, 276, 277, 278, 309, 359, 366, 367], "cpython": [4, 6], "linux": [4, 347], "x86_64": 4, "window": [4, 137, 186, 347], "maco": [4, 347], "arm64": 4, "org": [4, 5, 6, 23, 226, 232, 236, 302, 319, 347], "brew": [4, 6, 347], "type": [4, 5, 9, 13, 17, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 48, 53, 56, 57, 61, 62, 64, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 97, 100, 101, 104, 112, 113, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 222, 223, 224, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 279, 281, 283, 286, 287, 289, 291, 292, 293, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 312, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 343, 344, 345, 346, 347, 355, 365, 366, 367, 368, 369, 370, 372], "command": [4, 12, 17, 53, 346, 354], "prompt": 4, "c": [4, 5, 17, 51, 73, 77, 95, 97, 101, 166, 169, 174, 176, 178, 184, 190, 205, 216, 229, 234, 238, 239, 240, 260, 288, 290, 301, 302, 304, 305, 347, 354, 362, 363, 372, 374], "abov": [4, 5, 14, 23, 24, 25, 28, 35, 137, 224, 242, 301, 307, 347, 355, 356], "work": [4, 5, 36, 37, 41, 43, 73, 139, 186, 208, 210, 229, 304, 319, 347, 354, 374, 377], "under": [4, 5, 8, 12, 92, 97, 101, 141, 197, 276, 287, 296, 346, 347, 374], "environ": [4, 6, 60, 61, 97, 120, 207, 209, 210, 211, 314, 346, 351], "resolv": 4, "infinit": [4, 28, 29, 30, 140, 141, 165], "complet": [4, 5, 36, 41, 84, 102, 184, 187, 188, 314, 320, 325, 356, 358, 368], "like": [4, 5, 6, 14, 16, 18, 23, 35, 40, 41, 78, 97, 140, 141, 186, 258, 291, 347, 356], "fail": [4, 5, 14, 16, 120, 254, 291, 298, 347], "becaus": [4, 24, 28, 29], "doe": [4, 5, 23, 30, 31, 34, 35, 39, 40, 41, 71, 97, 199, 228, 229, 248, 252, 254, 266, 279, 286, 289, 306, 347, 356], "consequ": [4, 15, 23, 97, 101, 255, 262], "been": [4, 5, 6, 7, 23, 24, 28, 31, 34, 46, 60, 71, 73, 137, 255, 266, 279, 281, 289, 306, 346, 347, 354, 356, 374, 375], "bz2": 4, "file": [4, 5, 6, 12, 23, 28, 32, 51, 60, 63, 79, 81, 82, 91, 95, 96, 97, 100, 101, 102, 136, 139, 141, 144, 244, 266, 279, 309, 346, 347, 354, 372], "instead": [4, 10, 19, 28, 97, 147, 213, 215, 226, 296, 338, 347, 365, 372, 375], "expect": [4, 29, 30, 31, 39, 40, 134, 141, 186, 229, 251, 287, 289, 291, 304, 306, 373, 374], "manual": [4, 9, 28, 57, 77, 373], "pypi": [4, 6, 347], "forg": 4, "thrift": [4, 79, 95, 96, 97, 100, 101, 105, 123, 139, 140, 143, 144, 146, 205, 266, 279, 299, 313], "16": [4, 126, 150, 153, 156, 157, 163, 359, 366, 367], "make": [4, 5, 23, 24, 33, 39, 137, 186, 214, 229, 261, 263, 266, 279, 281, 288, 306, 348, 377], "sure": [4, 269], "clean": [4, 16, 35], "avoid": [4, 97], "conflict": [4, 5], "supplementari": 4, "common": [4, 5, 15, 115, 116], "platform": [4, 347], "bitstr": [4, 28, 29, 31, 141, 142, 263, 269, 275, 289], "qutip": 4, "cvxpy": 4, "anytre": 4, "pydo": 4, "svgwrite": 4, "20": [4, 15, 16, 36, 37, 150, 163, 244, 291, 347, 356, 359, 360, 366, 367], "jax": [4, 347], "pyopenssl": 4, "wand": 4, "curs": 4, "coupl": [4, 23, 174, 207, 265, 266, 268, 279, 280, 308, 314, 347, 373, 377], "other": [4, 5, 16, 23, 31, 33, 39, 91, 97, 127, 136, 183, 186, 187, 216, 220, 244, 245, 249, 250, 252, 269, 291, 301, 304, 307, 330, 349, 354, 371, 374], "jupyt": [4, 91, 138, 139, 346, 347, 371, 372, 373, 374], "interact": [4, 23, 35, 170, 187, 258, 306, 372, 373], "tutori": [4, 374], "notebook": [4, 34, 43, 91, 97, 98, 138, 139, 346, 347, 356, 357, 358, 359, 360, 361, 371, 372, 373, 374], "configur": [4, 5, 23, 28, 34, 66, 97, 117, 118, 119, 141, 187, 291, 293, 296, 308, 357, 358, 359, 360, 361], "featur": [4, 5, 8, 9, 13, 16, 27, 32, 39, 43, 374], "design": [4, 5, 7, 8, 12, 13, 14, 23, 27, 31, 33, 39, 40, 46, 77, 97, 104, 123, 198, 213, 216, 245, 247, 248, 249, 250, 252, 255, 289, 291, 347, 350, 362, 365, 373, 376], "imagemagick": 4, "ghostscript": 4, "pdf": [4, 138, 347], "format": [4, 5, 12, 16, 28, 32, 53, 68, 69, 78, 95, 96, 97, 99, 100, 134, 138, 139, 142, 144, 146, 187, 244, 259, 269, 326, 327, 349, 351, 374], "alreadi": [4, 35, 186, 224, 243, 244, 254, 256, 312, 314, 363, 373, 374], "magic": 4, "qatdisplai": 4, "insid": [4, 9, 10, 13, 14, 15, 16, 19, 41, 79, 91, 95, 96, 97, 98, 99, 100, 104, 123, 138, 139, 144, 186, 199, 202, 203, 206, 219, 227, 228, 229, 230, 231, 244, 253, 254, 255, 260, 261, 263, 265, 266, 267, 279, 281, 284, 285, 286, 287, 292, 293, 295, 296, 297, 300, 301, 302, 307, 312, 313, 346], "m": [4, 65, 176, 254, 260, 269, 340], "overview": [4, 12, 346], "ipynb": [4, 346], "tabl": [4, 51, 346, 347], "content": [4, 5, 16, 77, 97, 98, 225, 233, 235, 237, 239, 240, 346, 347], "interop": [4, 44, 45, 346, 347, 350, 351, 352, 353, 354], "product": [4, 5, 15, 26, 101, 136, 183, 212, 255, 269, 301, 314, 319, 330, 335, 340, 344, 363, 374], "version": [4, 5, 6, 17, 77, 123, 146, 164, 175, 185, 274, 275, 276, 277, 278, 291, 347, 354, 371, 373, 375], "cirq": [4, 45, 46, 346, 347, 349, 354], "projectq": [4, 45, 46, 346, 347, 349], "pyquil": [4, 45, 46, 346, 347, 349], "5": [4, 5, 11, 16, 19, 20, 24, 25, 31, 42, 43, 80, 97, 98, 124, 128, 137, 148, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 169, 244, 259, 263, 265, 267, 269, 284, 294, 302, 304, 336, 338, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377], "qiskit": [4, 45, 46, 346, 347, 349], "43": [4, 150, 163, 259, 347], "46": [4, 150, 163], "enabl": [4, 18, 187], "access": [4, 9, 28, 31, 33, 35, 39, 40, 68, 78, 97, 120, 137, 147, 148, 205, 213, 219, 224, 253, 266, 277, 278, 279, 281, 299, 306, 372, 373, 374], "someon": 4, "who": [4, 5], "mai": [4, 5, 6, 18, 28, 31, 39, 77, 127, 140, 141, 164, 178, 181, 186, 259, 261, 263, 266, 279, 281, 294, 297, 347, 349, 356, 363, 372], "desir": [4, 25, 32, 186, 349, 355, 358], "cherri": 4, "pick": [4, 269, 291, 297, 311, 362, 374], "qiskit_bind": 4, "projectq_bind": 4, "cirq_bind": 4, "pyquil_bind": 4, "could": [4, 9, 14, 22, 25, 31, 34, 35, 42, 123, 199, 200, 260, 264, 265, 266, 267, 268, 274, 276, 277, 278, 279, 280, 281, 284, 347, 356, 372], "softwar": [5, 33, 347, 376], "FOR": 5, "hereinaft": 5, "refer": [5, 23, 26, 32, 36, 37, 77, 79, 97, 164, 176, 178, 180, 181, 217, 254, 255, 260, 264, 265, 267, 268, 280, 284, 291, 302, 306, 319, 321, 322, 346, 347, 349, 350, 356, 364, 371, 373, 374, 376], "recit": 5, "bind": [5, 28, 41, 97, 101, 242, 261, 263, 266, 279, 281, 296, 297, 300, 302], "compani": 5, "physic": [5, 18, 22, 23, 33, 36, 85, 268, 344, 372], "person": 5, "oblig": 5, "present": [5, 18, 22, 33, 34, 71, 97, 136, 213, 225, 287, 289, 292, 297, 300, 301, 302, 356, 373, 377], "identifi": [5, 51, 85, 173, 283, 303, 314], "footnot": 5, "associ": [5, 35, 41, 101, 176, 186, 263, 294, 373, 374], "media": 5, "materi": [5, 18], "onlin": 5, "electron": [5, 164, 169, 170, 171, 172, 173, 184, 185, 186, 187, 188, 373], "collect": [5, 8, 11, 17, 19, 43, 91, 101, 111, 112, 196, 225, 244, 261, 263, 266, 279, 281, 291, 292, 293, 296, 297, 300, 301, 302, 347, 362, 373], "primari": [5, 220, 347], "allow": [5, 8, 10, 11, 14, 16, 17, 20, 23, 24, 27, 28, 32, 34, 39, 43, 79, 127, 134, 213, 224, 244, 251, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 276, 279, 280, 281, 284, 285, 293, 313, 314, 355, 362, 372, 373, 374], "student": 5, "research": 5, "develop": [5, 306, 376], "test": [5, 34, 101, 325, 326, 328, 347, 354, 356], "infrastructur": 5, "learn": [5, 347, 374], "machin": [5, 23, 84, 347, 372], "qlm": [5, 41, 48, 49, 51, 53, 56, 57, 58, 60, 62, 65, 66, 100, 259, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 293, 296, 347, 350, 353], "benefit": [5, 298, 347], "combin": [5, 16, 25, 28, 181, 252, 258], "accordingli": [5, 35, 185], "runtim": [5, 59, 347, 350], "apach": 5, "v2": 5, "each": [5, 8, 16, 23, 27, 28, 29, 30, 31, 34, 40, 73, 80, 92, 97, 101, 104, 136, 137, 144, 148, 174, 178, 186, 199, 208, 209, 210, 211, 212, 244, 258, 262, 263, 264, 266, 279, 283, 286, 290, 291, 294, 295, 301, 304, 307, 308, 312, 336, 338, 356, 357, 364, 367, 374], "categori": [5, 36, 347], "root": [5, 120, 133, 229], "folder": 5, "compli": 5, "thereof": 5, "out": [5, 17, 28, 29, 39, 40, 43, 70, 97, 123, 141, 184, 232, 241, 266, 279, 294, 306, 340, 358, 368], "shall": [5, 35, 291], "THE": 5, "AND": [5, 16, 17, 78, 249, 263], "definit": [5, 14, 22, 23, 33, 51, 77, 97, 145, 184, 212, 225, 244, 261, 263, 266, 279, 281, 319, 330, 346, 347, 372], "equal": [5, 10, 28, 39, 40, 208, 230, 297, 314, 315, 347, 357, 360, 364, 367, 372], "b": [5, 16, 97, 120, 123, 146, 171, 173, 202, 203, 206, 228, 231, 233, 235, 237, 239, 240, 260, 262, 265, 267, 284, 304, 315, 357, 358, 361, 374, 377], "mean": [5, 24, 28, 29, 35, 64, 79, 92, 97, 102, 140, 141, 213, 233, 244, 263, 350, 373, 374], "accord": [5, 97, 164, 184, 188, 213, 286, 292, 363], "natur": [5, 28, 61, 120, 126, 130, 164, 171, 173, 180, 184, 185, 188, 285, 292, 346, 347, 371, 373, 374], "wish": [5, 8, 233, 260, 264, 265, 267, 268, 280, 284], "variou": [5, 8, 9, 12, 29, 78, 97, 136, 148, 164, 187, 213, 214, 216, 221, 236, 244, 356, 373], "d": [5, 97, 168, 176, 184, 265, 319, 322, 324, 330, 338, 343, 345, 362], "OF": 5, "grant": 5, "accept": [5, 25, 28, 34, 36, 37, 41, 96, 104, 171, 196, 199, 244, 286, 307, 312, 347, 372], "specif": [5, 18, 23, 31, 32, 164, 208, 210, 233, 290, 298, 304, 307, 338, 347, 362, 364], "both": [5, 6, 16, 23, 24, 42, 64, 112, 137, 281, 284, 350, 360, 362, 365, 371, 372, 374], "author": [5, 97, 104, 141, 199, 286, 307, 312], "repres": [5, 14, 16, 18, 19, 22, 27, 42, 77, 78, 89, 91, 112, 119, 120, 123, 134, 136, 137, 141, 142, 184, 213, 224, 255, 258, 262, 263, 266, 274, 275, 279, 281, 283, 307, 308, 314, 355, 356, 374], "acknowledg": 5, "refrain": 5, "violat": 5, "wai": [5, 6, 8, 10, 12, 18, 25, 39, 40, 41, 43, 77, 78, 91, 97, 136, 214, 241, 279, 306, 347, 356, 364, 373, 374], "whatsoev": 5, "thereund": 5, "confidenti": 5, "subject": [5, 260], "provis": 5, "nondisclosur": 5, "parti": [5, 46], "receiv": [5, 34, 41, 52, 78, 79, 97, 293, 301], "reproduc": [5, 348], "disclos": 5, "purpos": [5, 17, 34, 136, 142, 185, 225, 244, 269, 291, 309, 374], "exercis": 5, "right": [5, 10, 12, 23, 24, 31, 92, 137, 140, 164, 168, 172, 183, 184, 188, 208, 210, 215, 216, 223, 241, 250, 252, 260, 265, 267, 269, 284, 291, 292, 304, 307, 319, 323, 331, 336, 338, 345, 356, 357, 358, 361], "extent": 5, "necessari": [5, 8, 28, 194, 207, 211, 242], "restrict": [5, 23, 164, 166, 184, 269, 363, 373], "disclosur": 5, "employe": 5, "consult": [5, 372], "advisor": 5, "know": [5, 71, 186, 242, 254, 361, 369, 373], "third": [5, 46, 239], "without": [5, 9, 14, 16, 18, 71, 78, 194, 195, 244, 254, 261, 263, 266, 279, 281, 285, 290, 294, 323, 346, 374], "prior": [5, 249, 285], "written": [5, 24, 26, 36, 37, 38, 91, 307, 318, 347, 372], "approv": 5, "forego": 5, "satisfi": [5, 12, 258, 262], "through": [5, 17, 27, 32, 39, 187, 219, 221, 224, 242, 253, 255, 260, 264, 265, 266, 267, 268, 277, 278, 280, 284, 287, 292, 297, 300, 301, 302, 306, 313, 314, 343, 345, 346, 350, 353, 376], "least": [5, 16, 41, 139, 291, 306, 347, 356, 362], "same": [5, 9, 10, 14, 16, 19, 21, 22, 23, 29, 31, 60, 78, 91, 97, 101, 106, 110, 123, 174, 185, 208, 209, 210, 211, 212, 224, 226, 244, 292, 298, 301, 347, 355, 370, 374], "degre": [5, 265], "care": [5, 43, 269, 304, 362, 373], "less": [5, 21, 196, 225, 291, 347], "reason": [5, 97, 372], "whom": 5, "non": [5, 17, 24, 34, 77, 79, 97, 139, 224, 255, 295, 305, 347, 356, 363], "protect": 5, "notwithstand": 5, "breach": 5, "compel": 5, "law": [5, 16], "judici": 5, "government": 5, "investig": [5, 137, 294], "proceed": 5, "ha": [5, 6, 10, 12, 15, 16, 20, 23, 24, 28, 31, 33, 34, 39, 40, 46, 60, 74, 77, 97, 100, 101, 120, 137, 143, 174, 199, 227, 228, 229, 233, 234, 235, 242, 255, 259, 262, 289, 307, 327, 336, 338, 345, 346, 347, 360, 361, 369, 372, 374, 375], "assist": 5, "opportun": 5, "except": [5, 35, 40, 45, 68, 72, 75, 93, 94, 98, 106, 110, 111, 114, 185, 213, 263, 266, 279, 281, 311, 347], "anyth": [5, 41, 346], "contrari": 5, "herein": 5, "neither": [5, 31, 35], "liabl": 5, "prove": [5, 266, 279, 281, 364], "wa": [5, 16, 36, 38, 63, 71, 97, 137, 175, 247, 251, 252, 304, 310, 347, 356], "public": [5, 227, 228, 229, 234, 235, 255, 287, 292, 374], "domain": 5, "enter": [5, 23, 41, 137, 186, 301], "fault": [5, 6, 347], "ii": [5, 166, 184], "known": [5, 12, 31, 34, 74, 113, 120, 301, 370], "demonstr": 5, "exist": [5, 255, 358, 368, 375], "iii": 5, "iv": 5, "independ": [5, 207, 210, 255, 258, 269, 271, 279, 296, 347, 363], "v": [5, 11, 16, 31, 101, 166, 168, 174, 184, 262, 279, 289, 347, 357, 358, 359, 361, 364, 366, 367, 368, 369, 370, 372], "becom": [5, 16, 43, 97], "vi": 5, "similar": [5, 17, 18, 24, 176, 202, 203, 206, 254, 260, 265, 267, 284, 347], "those": [5, 6, 26, 28, 36, 104, 242, 254, 291], "remedi": 5, "immedi": 5, "irrepar": 5, "harm": 5, "monei": 5, "damag": 5, "alon": [5, 18], "inadequ": 5, "compens": [5, 209, 211], "therefor": [5, 6, 12, 14, 16, 18, 31, 33, 34, 39, 186, 356, 366, 367, 368, 369, 370], "event": 5, "entitl": 5, "seek": 5, "equit": 5, "relief": 5, "temporari": [5, 16, 250, 346], "restrain": 5, "order": [5, 10, 14, 17, 18, 23, 26, 28, 39, 78, 97, 101, 134, 139, 164, 170, 171, 173, 176, 183, 184, 186, 187, 188, 213, 214, 229, 241, 249, 252, 255, 259, 261, 263, 266, 271, 272, 273, 279, 281, 291, 306, 347, 352, 356, 362, 372, 373, 375], "injunct": 5, "perman": 5, "post": [5, 32, 33, 39, 40, 41, 97, 101, 141, 199, 200, 205, 285, 286, 313, 347], "bond": 5, "secur": 5, "miscellan": [5, 36, 37], "assign": [5, 71, 262, 275, 283, 309], "sublicens": 5, "transfer": [5, 208, 209, 261, 263, 266, 279, 281, 314, 319, 321, 345], "consent": 5, "trigger": [5, 16, 79, 252], "merg": [5, 20, 42, 194, 195, 196, 285, 291, 306, 347], "consolid": 5, "purchas": 5, "substanti": 5, "asset": 5, "stock": 5, "assigne": 5, "assum": [5, 31, 33, 35, 39, 42, 84, 224, 243, 252, 254, 256, 289, 300, 301, 312, 336, 340, 345, 351, 373, 374], "upon": [5, 15, 16, 29, 41, 79, 173, 283, 293, 296], "enforc": [5, 100], "against": [5, 244, 347], "successor": 5, "unauthor": 5, "null": [5, 28, 101], "void": 5, "constitut": [5, 17, 75], "regul": 5, "underli": [5, 14, 16, 17, 120, 134, 139, 213, 217, 247, 248, 249, 250, 252, 298, 366, 367, 368, 369, 370, 372, 375], "technologi": 5, "full": [5, 14, 18, 34, 36, 70, 71, 73, 98, 186, 187, 224, 233, 241, 263, 266, 279, 281, 293, 347, 356, 365, 374], "complianc": 5, "forc": [5, 270, 273, 343, 345], "majeur": 5, "respons": [5, 66, 83], "delai": [5, 20], "failur": 5, "payment": 5, "connect": [5, 31, 33, 39, 57, 60, 61, 64, 100, 104, 105, 116, 144, 148, 149, 151, 159, 162, 198, 199, 205, 285, 286, 298, 299, 305, 307, 312, 313, 349, 356, 357, 359, 364, 366, 367, 370, 376], "act": [5, 16, 17, 23, 78, 97, 101, 136, 224, 266, 279, 283, 289, 308, 372, 374], "circumst": [5, 347], "beyond": 5, "forese": 5, "Such": [5, 23, 251, 301], "god": 5, "earthquak": 5, "hurrican": 5, "volcan": 5, "erupt": 5, "strike": 5, "lockout": 5, "riot": 5, "civil": 5, "unrest": 5, "protest": 5, "war": 5, "epidem": 5, "communic": 5, "diseas": 5, "outbreak": 5, "health": 5, "emerg": 5, "superimpos": 5, "after": [5, 8, 17, 32, 41, 136, 209, 211, 225, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 301, 302, 304, 306, 364], "fact": [5, 16, 18, 78, 97, 355], "fire": 5, "commun": [5, 348], "disast": 5, "whether": [5, 28, 51, 63, 139, 147, 169, 170, 175, 179, 181, 187, 189, 292, 301, 302, 306, 315, 325, 326, 328, 338, 344, 358, 368, 370], "relev": [5, 78], "period": 5, "dure": [5, 12, 17, 19, 31, 33, 39, 184, 188, 226, 228, 244, 255, 363, 374], "opinion": 5, "affect": [5, 187, 209, 211], "prevent": [5, 41], "continu": [5, 31, 259, 363], "six": [5, 141], "month": 5, "date": [5, 42], "initi": [5, 10, 13, 21, 28, 33, 35, 36, 38, 39, 40, 74, 97, 101, 141, 164, 173, 184, 185, 186, 208, 210, 224, 225, 242, 244, 263, 266, 269, 270, 271, 272, 273, 279, 281, 282, 291, 292, 293, 294, 297, 300, 301, 302, 309, 347, 362, 363, 364, 373, 374, 375], "due": [5, 22, 29, 30, 97, 171, 173], "virtu": 5, "aforesaid": 5, "endeavor": 5, "mitig": [5, 346, 347, 371, 374], "effect": [5, 24, 25, 30, 97, 123, 213, 247, 252, 255, 307, 363], "particular": [5, 15, 28, 36, 38, 41, 43, 97, 201, 202, 203, 204, 206, 233, 244, 255, 269, 271, 272, 273, 274, 297, 298, 300, 301, 302], "cooper": 5, "faith": 5, "adopt": [5, 259, 261, 263, 266, 279, 281], "togeth": [5, 39, 97, 101, 141, 258, 285, 306, 356], "decreas": [5, 29, 34, 244, 266, 279, 281, 373, 374], "impact": 5, "remot": [5, 31, 33, 35, 39, 40, 79, 103, 120, 198, 205, 285, 299, 347], "off": [5, 373], "nearshor": 5, "far": [5, 16, 373], "proportion": 5, "adequ": 5, "govern": 5, "disput": 5, "resolut": 5, "interpret": [5, 200, 201, 202, 203, 204, 206], "franc": 5, "give": [5, 12, 18, 40, 41, 199, 355], "rule": [5, 97, 101, 186, 292, 301, 347, 374], "exclus": [5, 347], "jurisdict": 5, "venu": 5, "compet": 5, "court": 5, "pari": 5, "settl": [5, 34], "friendli": [5, 31, 97, 365], "manner": [5, 18], "within": [5, 35, 71, 74, 91, 255, 307, 327, 350], "sixti": 5, "60": [5, 163, 356], "dai": 5, "copyright": 5, "2021": [5, 301, 347, 374], "2022": [5, 347], "reserv": [5, 83, 84, 86, 87], "worldwid": 5, "sub": [5, 10, 97, 98, 227, 228, 229, 230, 231], "forth": [5, 374], "multipl": [5, 16, 20, 23, 27, 35, 77, 187, 226, 230, 236, 239, 240, 245, 347, 374], "locat": [5, 224, 269, 372, 373, 375], "premis": 5, "sole": [5, 10], "intend": [5, 254, 291, 347], "anoth": [5, 9, 13, 16, 41, 43, 46, 77, 79, 112, 213, 233, 244, 247, 255, 286, 314, 347, 349, 373], "network": [5, 226, 232], "modifi": [5, 32, 97, 101, 185, 225, 271, 272, 273], "deriv": [5, 43, 60, 101, 279, 314, 347], "market": 5, "publish": [5, 104, 199, 286, 307, 312, 347], "rent": 5, "leas": 5, "loan": 5, "commerci": 5, "share": [5, 42, 45, 74, 75], "alter": 5, "adapt": [5, 35, 40, 41, 42, 97, 287, 347, 371, 374, 375], "translat": [5, 16, 20, 23, 24, 25, 34, 51, 58, 65, 117, 118, 119, 263, 266, 279, 281, 347, 349, 377], "decompil": 5, "engin": [5, 40, 52, 53, 54, 353], "disassembl": 5, "reduc": [5, 16, 31, 187, 255, 259, 263, 266, 279, 281, 285, 314, 327, 373], "human": [5, 12], "perceiv": 5, "form": [5, 16, 23, 26, 39, 70, 71, 77, 79, 174, 176, 218, 223, 276, 277, 278, 279, 291, 300, 301, 304, 308, 325, 336, 338, 347, 356, 369, 374], "free": [5, 15, 97, 244, 304, 373, 374], "lend": 5, "sell": 5, "resel": 5, "intellectu": 5, "properti": [5, 18, 97, 100, 101, 137, 139, 140, 142, 144, 266, 277, 278, 279, 281, 306, 314, 345, 356], "intern": [5, 15, 69, 105, 187, 205, 225, 262, 263, 266, 275, 279, 281, 287, 288, 299, 313, 347], "treati": 5, "sold": 5, "furthermor": 5, "trademark": 5, "servic": [5, 12, 31, 64, 308, 347], "mark": 5, "pertain": 5, "NO": 5, "warranti": 5, "AS": 5, "ITS": 5, "supplier": 5, "licensor": 5, "TO": 5, "OR": [5, 16, 78], "maximum": [5, 104, 120, 128, 135, 194, 199, 258, 268, 279, 286, 287, 292, 297, 304, 307, 312, 347, 359, 366], "BY": 5, "disclaim": 5, "represent": [5, 12, 36, 70, 73, 91, 118, 123, 136, 142, 165, 167, 169, 170, 183, 189, 191, 192, 193, 202, 203, 206, 208, 209, 213, 260, 264, 265, 266, 267, 268, 276, 279, 280, 281, 284, 314, 316, 321, 322, 338, 342, 343, 344, 345, 355, 364, 373, 374], "express": [5, 8, 14, 17, 19, 24, 39, 120, 123, 134, 137, 141, 146, 241, 242, 245, 247, 248, 249, 250, 252, 271, 338, 347], "impli": [5, 36, 37], "statutori": 5, "BUT": 5, "NOT": [5, 12, 16, 17], "merchant": 5, "satisfactori": 5, "qualiti": [5, 34, 165], "fit": [5, 41, 304, 374], "titl": 5, "infring": 5, "entir": [5, 32, 36, 37, 38, 73, 187, 307], "risk": 5, "aris": [5, 374], "WITH": 5, "liabil": 5, "IN": 5, "BE": 5, "cost": [5, 16, 22, 23, 24, 34, 43, 165, 196, 225, 258, 261, 262, 263, 266, 275, 279, 281, 282, 283, 289, 301, 333, 334, 362, 363, 364, 365, 366, 372, 373], "substitut": 5, "special": [5, 23, 34, 76, 201, 202, 203, 204, 206, 258, 260, 264, 265, 267, 268, 270, 280, 284, 285, 376], "incident": 5, "indirect": 5, "consequenti": 5, "loss": [5, 374], "busi": 5, "profit": 5, "interrupt": [5, 12], "inabl": 5, "even": [5, 11, 14, 18, 23, 24, 31, 33, 34, 39, 171, 177, 185, 186, 213, 347], "IF": 5, "advis": [5, 17], "possibl": [5, 10, 11, 14, 15, 16, 17, 19, 21, 23, 26, 27, 28, 41, 90, 91, 97, 136, 141, 183, 186, 187, 209, 212, 214, 254, 261, 263, 266, 269, 270, 279, 281, 291, 292, 309, 347, 348, 360, 362, 363], "SUCH": 5, "case": [5, 8, 23, 25, 27, 28, 29, 31, 32, 34, 39, 41, 78, 141, 176, 183, 186, 208, 213, 221, 224, 254, 261, 263, 266, 269, 279, 281, 287, 300, 301, 304, 307, 344, 347, 362, 372], "amount": [5, 97, 141], "paid": 5, "THAT": 5, "caus": [5, 6, 186, 207, 347], "7": [5, 16, 28, 43, 97, 143, 148, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 169, 265, 357, 359, 366, 367, 368, 372, 373, 374], "exampl": [5, 9, 18, 19, 25, 26, 27, 28, 29, 31, 32, 34, 35, 42, 43, 51, 77, 97, 136, 137, 165, 169, 170, 184, 185, 186, 189, 191, 192, 193, 199, 218, 224, 225, 249, 251, 252, 255, 259, 269, 270, 289, 298, 300, 314, 329, 330, 336, 338, 346, 347, 356, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370, 373, 374, 377], "bear": 5, "technic": 5, "inaccuraci": 5, "typograph": 5, "error": [5, 14, 29, 30, 32, 35, 40, 79, 80, 81, 82, 92, 93, 94, 139, 140, 212, 329, 336, 347, 374], "updat": [5, 14, 17, 23, 34, 35, 57, 74, 97, 144, 184, 228, 244, 260, 264, 265, 267, 268, 280, 284, 292, 371, 373, 374, 375], "januari": [5, 347], "2004": [5, 232], "http": [5, 23, 226, 232, 236, 302, 319, 351], "www": 5, "reproduct": 5, "owner": 5, "union": [5, 112, 183, 185, 191, 192, 193, 209, 211], "direct": [5, 23, 97, 144, 344, 372, 373], "manag": [5, 13, 16, 84, 288, 346], "contract": [5, 101, 307], "ownership": [5, 306], "fifti": 5, "percent": [5, 329], "50": [5, 28, 31, 41, 42, 150, 163, 269, 360, 374], "outstand": 5, "benefici": [5, 33], "permiss": [5, 347], "prefer": [5, 372, 373], "modif": [5, 28], "mechan": [5, 11, 14, 28, 43, 91], "transform": [5, 18, 39, 41, 77, 137, 169, 170, 183, 184, 186, 190, 215, 222, 223, 236, 241, 244, 263, 266, 279, 281, 285, 303, 342, 346, 347, 371, 372, 373, 374], "convers": [5, 49, 65], "authorship": 5, "made": [5, 15, 33, 34, 177, 220], "indic": [5, 17, 63, 77, 78, 164, 166, 176, 184, 190, 208, 210, 213, 244, 254, 255, 307, 340, 373], "attach": [5, 10, 14, 26, 43, 97, 116, 213, 214, 225, 244, 288], "appendix": 5, "editori": 5, "revis": 5, "annot": [5, 217], "elabor": 5, "whole": [5, 18, 186, 347], "separ": [5, 14, 23, 48, 53, 56, 62, 213, 306, 375], "mere": [5, 29], "link": [5, 10, 13, 15, 16, 31, 46, 61, 144, 213, 226, 229, 232, 233, 244, 261, 263, 266, 279, 281, 346, 347], "contribut": [5, 178, 376], "intention": 5, "inclus": [5, 100], "behalf": 5, "verbal": 5, "sent": [5, 12, 18, 22, 28, 51, 53, 54, 199, 201, 202, 203, 204, 206, 263, 266, 279, 281, 304, 313], "mail": 5, "system": [5, 6, 7, 8, 15, 18, 22, 23, 33, 34, 41, 164, 171, 172, 173, 186, 224, 269, 279, 314, 347, 363, 372, 373, 374], "issu": [5, 347, 374], "track": 5, "discuss": [5, 9, 43], "improv": [5, 35, 39, 165, 173, 291, 347, 371, 374, 375], "exclud": [5, 347], "conspicu": 5, "Not": [5, 136, 139], "contributor": 5, "subsequ": [5, 291, 372], "incorpor": 5, "herebi": 5, "perpetu": 5, "charg": [5, 187, 373], "royalti": 5, "irrevoc": 5, "publicli": 5, "patent": 5, "offer": [5, 8, 10, 11, 32, 41, 198, 285, 305, 356], "claim": 5, "institut": 5, "litig": 5, "cross": [5, 263, 266, 279, 281, 355], "counterclaim": 5, "lawsuit": 5, "alleg": 5, "contributori": 5, "redistribut": 5, "medium": 5, "meet": [5, 12], "recipi": 5, "carri": [5, 9, 16, 28, 70, 184, 213, 224, 226, 232, 242, 249, 294, 376], "promin": 5, "retain": 5, "attribut": [5, 35, 41, 42, 68, 77, 78, 95, 96, 100, 101, 139, 140, 224, 247, 248, 252, 277, 278, 279, 296, 307, 339, 347, 372, 373], "text": [5, 12, 244, 307, 354, 356], "readabl": [5, 12, 23], "along": [5, 22, 28, 265, 268, 280, 356, 362], "wherev": 5, "normal": [5, 48, 53, 56, 62, 170, 224, 347], "appear": [5, 29, 79, 95, 97, 101, 123, 141, 242, 244, 262, 296, 356], "add": [5, 14, 15, 16, 25, 31, 92, 96, 98, 112, 120, 139, 209, 213, 225, 227, 228, 230, 231, 232, 234, 235, 236, 238, 244, 252, 259, 263, 277, 278, 295, 347, 373], "alongsid": 5, "addendum": 5, "cannot": [5, 16, 58, 291, 306, 347], "constru": 5, "statement": [5, 15, 249, 251, 255, 307], "differ": [5, 7, 8, 15, 16, 18, 21, 24, 27, 28, 29, 30, 77, 90, 104, 184, 186, 199, 213, 259, 279, 286, 291, 294, 295, 302, 304, 307, 312, 314, 319, 347, 356, 362, 365, 366, 367, 368, 369, 370, 373, 374], "submiss": [5, 31, 347], "unless": [5, 233, 235, 237, 238, 239, 240], "explicitli": [5, 25], "noth": [5, 35, 40, 209, 248, 252, 289], "supersed": 5, "regard": [5, 22, 35, 97, 186, 269], "trade": 5, "customari": 5, "kind": [5, 293, 297, 373], "determin": [5, 78, 315, 365, 374], "appropri": [5, 101, 113, 224, 269], "theori": [5, 164, 173, 362, 373, 375], "tort": 5, "neglig": [5, 34], "deliber": 5, "grossli": 5, "charact": [5, 143], "goodwil": 5, "stoppag": 5, "malfunct": 5, "while": [5, 8, 25, 28, 31, 97, 141, 298, 319, 347, 350, 372, 373, 374], "choos": [5, 34, 120, 269, 287, 292, 306, 364, 373, 374], "fee": 5, "indemn": 5, "howev": [5, 6, 10, 17, 18, 25, 29, 91, 137, 186, 244, 260, 264, 265, 267, 268, 280, 284, 301, 306, 355, 356, 374], "indemnifi": 5, "defend": 5, "hold": [5, 12, 16, 233, 235, 237, 238, 239, 240], "harmless": 5, "incur": [5, 34], "assert": [5, 31, 35, 40, 91, 149, 309], "boilerpl": 5, "field": [5, 18, 23, 24, 28, 29, 30, 78, 97, 134, 141, 260, 264, 265, 266, 267, 268, 272, 279, 280, 284, 296, 301, 308, 347, 377], "enclos": [5, 128, 186], "bracket": [5, 219, 253], "replac": [5, 6, 97, 213, 225, 251, 254, 304, 350, 374, 375], "comment": [5, 244], "syntax": [5, 9, 17, 77, 97, 213, 242, 347], "recommend": [5, 6, 170, 224, 306], "easier": [5, 289], "identif": 5, "archiv": 5, "obtain": [5, 8, 28, 32, 92, 136, 140, 175, 187, 292, 360, 374, 375], "three": [6, 8, 30, 77, 145, 213, 244, 295, 301, 350, 355, 362, 372], "homebrew": 6, "attent": 6, "mismatch": 6, "segment": [6, 347], "qdldl": 6, "wheel": [6, 347], "cmake": 6, "emul": [6, 28, 33, 79, 97, 285, 288, 298, 346, 347], "libomp": 6, "y": [6, 10, 17, 26, 65, 124, 143, 187, 191, 193, 225, 295, 306, 332, 372, 374], "opt": [6, 23, 24, 25, 44, 45, 347, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 377], "ln": [6, 120], "sf": 6, "cellar": 6, "lib": 6, "dylib": 6, "usr": 6, "local": [6, 23, 34, 79, 116, 301, 312, 313, 351, 374], "part": [7, 14, 15, 18, 23, 24, 41, 91, 120, 129, 131, 164, 186, 199, 220, 263, 266, 279, 281, 293, 347, 364, 371], "clarifi": [7, 375], "main": [7, 8, 35, 78, 186, 225, 244, 269, 288, 298, 307, 309, 350, 351], "concept": [7, 31, 39, 91, 272, 337], "divid": [7, 184, 188], "kei": [7, 35, 51, 78, 104, 105, 144, 199, 205, 208, 210, 242, 244, 260, 264, 265, 267, 268, 280, 284, 286, 296, 299, 307, 312, 313, 338], "It": [7, 9, 13, 16, 17, 19, 23, 29, 32, 34, 36, 37, 38, 41, 70, 71, 73, 74, 97, 101, 136, 137, 143, 184, 186, 188, 209, 212, 213, 214, 224, 251, 254, 255, 260, 263, 264, 265, 266, 267, 268, 279, 280, 281, 282, 284, 291, 297, 300, 301, 308, 309, 310, 321, 347, 362, 363, 373, 374, 375], "procedur": [7, 16, 17, 41, 46, 165, 251, 279], "spin": [7, 23, 34, 45, 91, 165, 169, 170, 171, 173, 176, 178, 183, 187, 189, 191, 192, 193, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 308, 347, 356, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 373], "fermion": [7, 44, 45, 91, 303, 374, 375], "combinatori": [7, 9, 11, 22, 34, 200, 201, 202, 203, 204, 206, 263, 266, 275, 276, 279, 281, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377], "interoper": 7, "mainli": [8, 32, 67, 68, 136], "sequenc": [8, 9, 13, 16, 17, 97, 214, 224, 244], "instruct": [8, 9, 12, 52, 79, 97, 216, 272], "comprehens": [8, 19], "mostli": [8, 75, 123, 356], "wrap": [8, 9, 10, 13, 16, 28, 33, 34, 43, 59, 64, 139, 140, 213, 244, 254, 255, 276, 277, 278, 306, 307, 350, 351], "higher": [8, 41, 95, 96, 97, 100, 139, 140, 144, 183, 185, 213, 244, 289, 296, 306, 347, 364], "seri": [8, 28, 186], "manipul": [8, 9, 17, 18, 25, 27, 39, 97, 136, 216, 249, 250, 254, 285, 307, 314, 346, 347, 371], "evolv": [8, 18, 34, 141, 363], "encod": [8, 18, 22, 25, 34, 91, 101, 136, 137, 141, 164, 252, 258, 260, 261, 263, 264, 265, 266, 267, 268, 280, 281, 282, 284, 289, 355, 357, 358, 361, 362, 363, 364, 377], "often": [8, 18, 19, 35, 259, 363, 372], "u": [8, 14, 16, 17, 30, 51, 65, 166, 168, 174, 176, 178, 184, 190, 213, 215, 223, 241, 251, 279, 291, 355, 372, 373, 374], "pure": [9, 12, 13, 95, 101, 213, 314, 338], "built": [9, 11, 19, 97, 105, 165, 224, 245, 250, 251, 262, 299, 313, 347, 372], "hybrid": [9, 176, 285, 300, 347, 371, 374], "nice": [9, 16, 43, 71], "api": [9, 32, 39, 41, 104, 199, 213, 286, 307, 312, 347, 350, 356, 376], "usual": [9, 15, 16, 19, 23, 97, 139, 186, 208, 212, 291, 330, 347, 362, 363, 374], "fed": [9, 19, 23, 24, 29, 97, 209, 211], "note": [9, 17, 20, 97, 167, 178, 183, 212, 279, 295, 323, 327, 329, 374, 376], "qaoa": [9, 25, 200, 201, 202, 203, 204, 206, 259, 261, 263, 266, 279, 281, 291, 355, 365, 366, 367, 368, 369, 370, 376], "batchmod": [9, 98, 251, 254, 290, 347], "oracl": [9, 213, 215, 252, 256, 309], "assembl": [9, 10], "aqasm": [9, 10, 12, 14, 15, 16, 29, 30, 31, 40, 45, 51, 53, 73, 77, 78, 79, 97, 98, 165, 177, 213, 215, 224, 225, 244, 255, 289, 291, 298, 309, 346, 353, 373, 374], "submodul": [9, 213, 375], "pyaqasm": [9, 10, 11, 12, 14, 16, 17, 48, 56, 62, 78, 91, 97, 213, 216, 224, 225, 346], "qftarith": [9, 15, 16, 17, 45, 77, 97, 98, 213, 226, 227, 228, 229, 230], "qft": [9, 10, 16, 17, 77, 97, 213, 226, 229, 236], "arithmet": [9, 15, 17, 18, 19, 23, 26, 45, 120, 123, 134, 146, 232, 236, 245, 252, 347], "itself": [9, 11, 263, 296, 373], "classarith": [9, 15, 16, 45, 213, 226, 227, 228, 230], "unifi": 9, "basic": [10, 11, 23, 26, 31, 34, 43, 51, 66, 143, 214, 263, 289, 307, 347, 372, 373], "Their": [10, 39], "rather": [10, 17, 31, 41, 95, 101, 186, 216, 245, 247, 248, 250, 252, 372], "self": [10, 31, 35, 40, 41, 247, 252, 283, 296, 306], "explanatori": 10, "constant": [10, 16, 17, 23, 106, 109, 123, 136, 137, 166, 169, 170, 184, 185, 187, 189, 202, 203, 206, 208, 209, 211, 213, 226, 227, 228, 230, 231, 232, 234, 238, 240, 260, 265, 267, 269, 284, 297, 304, 363, 373, 374], "ccnot": [10, 17, 65, 306, 309], "csign": [10, 17, 65, 225, 306], "swap": [10, 17, 65, 229, 306], "sqrtswap": [10, 17, 306], "iswap": [10, 17, 306], "rz": [10, 11, 17, 42, 43, 65, 77, 79, 165, 208, 210, 213, 214, 244, 254, 291, 301, 306, 374], "ph": [10, 15, 17, 51, 97, 229, 232, 269, 295, 306, 319], "phase": [10, 17, 186, 213, 215, 243, 247, 249, 250, 252, 314, 315, 346, 347, 371], "shift": [10, 17, 20, 97, 101, 209, 211, 301, 347, 355, 374], "mathemat": [10, 34], "my_program": [10, 12], "qbits_reg": [10, 12, 214], "regist": [10, 13, 16, 28, 51, 97, 139, 140, 142, 208, 210, 219, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 244, 245, 247, 248, 252, 253, 255, 256], "new": [10, 16, 39, 40, 41, 43, 78, 97, 104, 112, 120, 164, 175, 184, 186, 190, 196, 198, 199, 214, 225, 232, 242, 244, 255, 263, 279, 286, 293, 300, 307, 312, 350, 373, 375], "dag": [10, 17, 65, 97, 169, 170, 189, 214, 242, 347], "convent": [10, 22, 23, 97, 139, 141, 174, 178, 306, 307, 319], "outermost": 10, "alwai": [10, 18, 31, 34, 79, 139, 170, 186, 224, 263, 289, 309], "index": [10, 17, 31, 40, 41, 74, 78, 81, 82, 97, 123, 127, 139, 144, 145, 164, 172, 175, 178, 179, 218, 246, 247, 248, 252, 259, 262, 283, 292, 307, 344], "my_routin": 10, "idx": [10, 31, 43, 289], "parameter": [10, 287, 301, 374], "think": [10, 186], "quit": [10, 15, 16, 39, 41, 279], "conveni": [10, 39, 347], "hardwar": [10, 18, 31, 35, 42, 44, 45, 87, 100, 138, 164, 177, 205, 285, 286, 289, 290, 298, 346, 347, 373], "black": [10, 364], "box": [10, 213, 244, 364], "properli": [10, 46], "might": [10, 14, 16, 23, 41, 97, 120, 139, 213, 225, 227, 230, 231, 254, 255, 259, 261, 263, 266, 272, 279, 281, 288, 295, 354, 363, 372, 374], "abl": [10, 16, 18, 31, 52, 214, 244, 254, 261, 263, 266, 279, 281, 288, 305], "simplic": [10, 373, 374], "input": [10, 16, 23, 49, 51, 65, 68, 74, 98, 101, 141, 171, 198, 224, 225, 241, 249, 254, 255, 259, 263, 266, 279, 281, 290, 291, 298, 307, 347, 364, 366, 367, 368, 369, 370, 372, 373], "signatur": [10, 17, 97, 112, 217, 225], "phase_matrix": 10, "diag": [10, 23, 377], "exp": [10, 120, 130, 214, 287, 301, 336, 338], "1j": [10, 126, 133, 214], "phase_g": 10, "matrix_gener": [10, 113, 214], "Or": [10, 249, 350, 351, 352], "set_matrix_gener": [10, 113], "similarli": [10, 12, 16, 17, 21, 219, 252, 253, 266, 313, 366, 367, 368, 369, 370, 372], "c_phase": 10, "c_phase_g": 10, "circuit_gener": [10, 113, 258], "set_circuit_gener": [10, 113], "variabl": [10, 14, 20, 21, 24, 25, 28, 34, 39, 41, 43, 45, 60, 61, 84, 95, 97, 98, 101, 106, 110, 137, 141, 242, 244, 251, 254, 258, 259, 261, 262, 263, 266, 271, 279, 281, 283, 292, 296, 297, 300, 302, 308, 347, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370, 374], "lambda": [10, 14, 16, 17, 97, 134, 176, 208, 209, 210, 211, 214, 292, 331, 338], "n": [10, 14, 17, 19, 20, 23, 24, 25, 31, 34, 36, 40, 74, 183, 184, 191, 192, 193, 233, 235, 237, 238, 239, 240, 241, 243, 254, 256, 259, 260, 265, 269, 291, 304, 306, 307, 329, 332, 340, 357, 358, 359, 360, 361, 363, 370, 372, 374], "static": [10, 95, 96, 97, 100, 123, 139, 144, 254, 259, 262, 263, 266, 269, 279, 281, 347], "previou": [10, 31, 43, 186, 350, 372], "done": [10, 12, 14, 16, 17, 31, 64, 97, 170, 233, 235, 237, 255, 263, 270, 296, 306, 372, 374], "customg": 10, "mat": [10, 317], "my_minus_z": 10, "effici": [11, 16, 17, 20, 43, 136, 164, 173, 177, 285, 344, 347, 362, 373, 374], "introduc": [11, 27, 31, 43, 373], "scheme": [11, 15, 43], "usag": [11, 16, 83, 97, 139, 205, 214, 224, 244, 254, 298, 299, 346, 372], "most": [11, 14, 17, 18, 23, 25, 28, 41, 51, 75, 91, 100, 101, 164, 226, 241, 252, 269, 306, 309, 347, 355, 356, 372, 374], "interest": [11, 16, 18, 165, 186, 304, 372, 374], "psi": [11, 28, 29, 30, 43, 101, 165, 269, 292, 307, 323, 344], "open": [11, 15, 18, 19, 41, 164, 255, 291, 347, 371], "get_vari": [11, 41, 95, 97, 101, 123, 141, 146, 242, 262, 283, 292, 347], "addition": [11, 79, 123, 148, 213], "sum_i": [11, 18, 101, 141, 178, 224, 269, 308, 330, 362, 364], "qbit_idx": 11, "layer": [11, 177, 179, 259, 362, 373], "tradeoff": 11, "up": [11, 15, 16, 17, 19, 25, 27, 35, 39, 97, 164, 174, 213, 244, 314, 315, 347, 356, 372, 374], "ve": 11, "overload": [11, 20, 41, 97, 116, 123, 134, 142, 252, 258, 262, 339, 347], "__call__": [11, 41, 134], "step": [11, 12, 14, 27, 35, 39, 41, 167, 183, 186, 213, 215, 244, 292, 306, 308, 373, 374], "job_2": 11, "job_3": 11, "op": [11, 16, 40, 68, 72, 76, 77, 97, 143, 165, 224, 225, 255, 259, 347, 353], "iterate_simpl": [11, 16, 35, 40, 51, 97, 224, 225, 259, 353, 354], "11654919733176028": 11, "5207851515777621": 11, "0831406063110482": 11, "5714341238572014": 11, "6368489637864566": 11, "5473958551458264": 11, "store": [12, 15, 16, 17, 41, 42, 68, 74, 77, 78, 97, 99, 101, 136, 139, 141, 146, 164, 172, 220, 239, 243, 244, 249, 250, 256, 260, 264, 265, 267, 268, 280, 284, 296, 307, 347, 350], "serial": [12, 17, 28, 32, 35, 40, 68, 69, 91, 95, 97, 101, 139, 143, 347], "pictur": [12, 34], "path": [12, 104, 105, 199, 205, 286, 299, 307, 312, 313, 346], "figur": [12, 276, 277, 278], "aqasm2circ": [12, 17], "left": [12, 23, 24, 92, 137, 140, 164, 168, 172, 183, 184, 208, 210, 215, 216, 223, 241, 244, 250, 252, 269, 291, 292, 304, 307, 319, 323, 331, 336, 338, 345], "sinc": [12, 16, 28, 60, 79, 209, 211, 213, 220, 225, 226, 247, 251, 255, 338, 355, 363, 366, 374], "mandatori": [12, 31, 104, 199, 286, 307, 312], "facilit": 12, "calloc": [12, 79, 97, 216, 219, 244], "cbits_reg": 12, "reset": [12, 13, 17, 68, 71, 78, 97, 225, 229, 244, 306, 347], "outcom": [12, 88, 89, 208, 210], "cc_appli": [12, 244], "condition": 12, "cbreak": [12, 79, 244], "fine": [12, 269, 356], "tune": [12, 301, 356], "creation": [13, 19, 31, 33, 39, 137, 263, 266, 279, 281, 346], "abstractg": [13, 14, 17, 51, 77, 97, 111, 213, 217, 221, 225, 226, 242, 244], "ancilla": [13, 16, 77, 97, 244, 249, 255, 346], "scope": [13, 16, 40, 221, 245, 246, 247, 248, 249, 250, 252, 253, 255, 346, 347], "moreov": [13, 31, 39, 97, 247, 252, 255, 269, 347], "flag": [13, 16], "reus": [13, 30, 255], "later": [13, 16, 28, 32, 63, 213, 244], "though": [14, 306], "veri": [14, 18, 27, 31, 97, 187, 220, 244, 270, 273, 294, 346, 347, 366, 367, 368, 369, 370, 372, 373, 374], "still": [14, 18, 25, 97, 186, 244, 252, 254, 298, 306, 375], "seem": 14, "clunki": 14, "build_gat": [14, 17, 213, 221, 225], "simplfi": 14, "turn": [14, 16, 21, 41, 91, 97, 213, 244, 251, 254, 285], "walsh_hadamard": 14, "ariti": [14, 15, 16, 17, 36, 37, 51, 69, 77, 97, 113, 120, 134, 177, 214, 217, 220, 222, 225, 226, 227, 228, 229, 234, 235, 242, 243, 244, 255, 256, 262, 295, 307, 342, 343, 345], "wht": 14, "subcircuit": [14, 15, 17, 77, 97, 213, 225, 255], "subroutin": [14, 77, 288], "adder": [14, 16, 213, 226, 232, 233, 236], "n1": 14, "n2": 14, "singl": [14, 16, 17, 20, 28, 31, 34, 41, 42, 57, 60, 61, 64, 78, 91, 104, 146, 164, 170, 174, 184, 199, 212, 213, 215, 224, 272, 286, 287, 292, 295, 296, 297, 300, 301, 302, 306, 307, 312, 372], "attempt": [14, 63, 254, 291], "imagin": [14, 17, 137], "ly": 14, "namespac": [14, 17, 213, 233], "foo": [14, 20, 217], "Its": [14, 134, 142, 187, 220, 269, 291, 336, 338, 363, 374], "my_add": 14, "length1": 14, "length2": 14, "proper": [14, 16, 41, 97, 134, 247, 248, 251, 362, 377], "keyword": [14, 17, 60, 61, 96, 97, 199, 205, 244, 254, 263, 266, 279, 281, 347], "piec": [14, 16, 29, 78, 101, 120, 224, 245, 247, 261, 263, 266, 279, 281, 363], "stai": [14, 291], "had": [14, 16, 25, 70, 71, 73], "mani": [14, 18, 19, 22, 25, 28, 31, 41, 43, 137, 141, 186, 224, 258, 260, 261, 263, 264, 265, 266, 267, 279, 280, 281, 284, 347, 355, 356, 372, 374], "fresh": [15, 39, 97, 106, 107, 225, 242, 244, 255, 263, 293, 296], "set_ancilla": [15, 16, 255], "being": [15, 18, 23, 24, 28, 34, 51, 72, 244, 255, 263, 266, 279, 281, 306], "dynam": [15, 31, 39, 97, 209, 211, 244, 300, 314, 363], "pass": [15, 97, 101, 104, 137, 186, 205, 214, 225, 242, 244, 254, 255, 259, 263, 266, 276, 277, 278, 279, 281, 289, 291, 296, 297, 298, 300, 365, 366, 367, 368, 369, 370], "recurs": [15, 214, 263], "across": 15, "tree": [15, 213, 224, 242, 262, 356], "ensur": [15, 35, 40, 41, 46, 91, 260, 267, 284, 298], "freed": [15, 16, 255], "leav": [15, 19, 66, 78, 186, 262], "resourc": [15, 16, 17, 45, 75, 139, 312], "close": [15, 244, 255, 258, 269, 279, 360, 373], "pop": [15, 41, 255], "last": [15, 16, 23, 31, 42, 51, 100, 176, 243, 256, 309, 310, 372], "dagger": [15, 77, 97, 165, 169, 174, 176, 183, 184, 186, 190, 214, 215, 220, 223, 242, 255, 304, 324, 327, 342, 344, 362, 372, 374], "nest": 15, "aglorithm": 16, "sometim": [16, 23, 323], "hard": [16, 25, 34, 36, 37, 289, 355, 363, 377], "quickli": [16, 251], "overwhelm": 16, "fair": 16, "er": 16, "qint": [16, 213, 215, 244, 247, 255], "comparison": [16, 213, 244, 250, 252], "qint1": [16, 252], "qint2": [16, 252], "unimpl": 16, "circuit_ab": 16, "circuit_qft": [16, 226], "circuit_class": [16, 226], "subsect": 16, "qbool": [16, 213, 244, 255], "simplest": [16, 43, 97], "qboolarrai": [16, 213, 244, 247, 249], "correspond": [16, 17, 18, 24, 27, 29, 35, 40, 51, 53, 57, 60, 61, 64, 71, 77, 78, 92, 97, 100, 101, 102, 113, 119, 134, 137, 144, 169, 170, 174, 176, 184, 189, 208, 210, 214, 224, 260, 263, 264, 265, 267, 268, 269, 280, 284, 293, 296, 304, 306, 307, 310, 312, 336, 338, 347, 354, 362, 364, 374], "rout": [16, 217, 225, 245, 247, 248, 249, 250, 252, 255], "and_expr": [16, 216], "expr1": 16, "expr2": 16, "q": [16, 17, 24, 51, 64, 73, 167, 173, 174, 176, 184, 190, 241, 244, 252, 260, 264, 267, 281, 284, 290, 353, 354, 364], "append": [16, 41, 96, 209, 211, 259], "current": [16, 35, 40, 78, 97, 145, 169, 170, 189, 198, 214, 225, 255, 270, 271, 285, 288, 301, 305, 307, 310, 365, 366, 367, 368, 369, 370], "were": [16, 71, 355, 356], "produc": [16, 23, 24, 26, 97, 101, 186, 224, 252, 258, 263, 266, 275, 279, 281, 298, 362, 363], "q_4": 16, "q_5": 16, "toffoli": [16, 17, 233, 235], "q_3": 16, "de": 16, "morgan": 16, "NOTS": 16, "inde": [16, 24, 41, 186], "mind": [16, 372], "just": [16, 18, 23, 363], "syntact": 16, "sugar": 16, "releas": [16, 97, 225, 244, 255, 376], "free_ancilla": [16, 244, 255], "verifi": [16, 30], "expr": [16, 120, 123, 146], "set_valu": [16, 252], "circuit1": [16, 97], "circuit2": [16, 97], "empti": [16, 17, 97, 101, 139, 225, 244, 312, 345, 373], "did": [16, 17, 141], "qint3": [16, 252], "depth": [16, 97, 98, 123, 138, 259, 261, 263, 266, 279, 281, 291, 362, 373], "mult": [16, 20, 236], "14": [16, 79, 80, 148, 150, 153, 155, 156, 157, 161, 163, 244, 252, 289, 359, 366, 367], "13": [16, 80, 97, 141, 148, 150, 153, 154, 155, 156, 157, 161, 163, 289, 356, 359, 366, 367, 372], "compar": [16, 19, 213, 306, 313], "increment": 16, "cast_to": [16, 247], "cast": [16, 42, 55, 95, 97, 100, 101, 140, 142, 144, 146, 244, 247, 248, 249, 252, 303], "sai": [16, 177, 251], "anc": 16, "3535533905932732": 16, "813961400789805e": 16, "17j": 16, "3535533905932733": 16, "831019179913692e": 16, "35355339059327334": 16, "1180695148086566e": 16, "58020831115014e": 16, "3535533905932734": 16, "231448391212731e": 16, "3535533905932729": 16, "289974949513096e": 16, "16j": 16, "353553390593273": 16, "0594047723252207e": 16, "686323053012687e": 16, "straightforward": [16, 23, 30, 39, 97, 270], "networkx": [16, 42, 100, 144, 201, 202, 203, 204, 206, 264, 265, 267, 268, 276, 277, 278, 284, 347, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 377], "functool": [16, 31], "coloring_oracl": 16, "bitlength": [16, 229], "node": [16, 83, 86, 87, 123, 144, 262, 263, 264, 265, 266, 267, 268, 276, 277, 278, 279, 281, 284, 356, 357, 358, 359, 361, 364, 366, 367, 368, 369, 370], "edg": [16, 279, 356, 357, 358, 359, 361, 364, 366, 367, 368, 369, 370], "nx": [16, 42, 144, 264, 265, 267, 268, 279, 284, 347, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 377], "path_graph": 16, "len": [16, 31, 40, 70, 73, 77, 255, 259, 260, 264, 265, 267, 268, 284, 309, 347, 357, 358, 359, 360, 361, 369], "19": [16, 150, 153, 156, 157, 163, 229, 359, 360, 366, 367], "vertex": [16, 198, 206, 258, 274, 278, 284, 346, 356, 357, 358, 359, 364, 365, 366, 367, 368, 370], "formula": [16, 17, 23, 28, 68, 72, 77, 78, 91, 97, 99, 173, 213, 216, 218, 244, 249, 252, 262], "c_i": 16, "neq": [16, 24, 363], "c_j": [16, 178], "j": [16, 23, 24, 34, 40, 165, 170, 171, 173, 176, 184, 189, 190, 254, 265, 266, 268, 269, 279, 280, 308, 329, 330, 336, 338, 342, 345, 347, 364, 372, 374, 377], "loop": [16, 40, 68, 74, 287, 292, 297, 300, 301, 302, 307], "asymptot": [16, 304], "save": [16, 40, 138, 225, 244, 350], "increas": [16, 34, 97, 98, 186, 194, 195, 225, 304, 362, 363, 374], "counter": 16, "larg": [16, 18, 34, 101, 169, 170, 186, 189, 259, 269, 363], "enough": [16, 34, 83, 373], "count": [16, 97, 102, 213, 256, 259, 261, 263, 266, 279, 281, 289, 346, 347, 356], "number_of_edg": [16, 149], "bit_length": 16, "frugal": 16, "log": [16, 139, 224, 370], "didn": [16, 97], "mention": [16, 26, 301], "strongli": [17, 301], "binari": [17, 22, 28, 32, 34, 60, 63, 70, 73, 91, 95, 96, 97, 100, 101, 102, 118, 119, 136, 139, 141, 144, 258, 260, 263, 266, 279, 281, 347, 374, 377], "dump": [17, 28, 32, 43, 60, 63, 95, 96, 97, 100, 101, 136, 139, 141, 144, 266, 279, 347], "sourc": [17, 41, 51, 68, 164, 347, 356, 371, 373], "potenti": [17, 168, 174, 176, 178, 184, 244, 360], "matric": [17, 51, 69, 91, 97, 106, 109, 165, 208, 213, 225, 244, 261, 263, 266, 279, 281, 291, 301, 314, 319, 321, 323, 324, 330, 332, 333, 335, 340, 374], "constructor": [17, 35, 41, 111, 113, 209, 214, 244, 255, 261, 263, 266, 279, 281, 291, 293, 296, 339, 341, 347, 365, 373], "bodi": [17, 78, 166, 168, 173, 184, 185, 187, 190, 225, 251, 288, 372, 373], "sum": [17, 20, 23, 24, 31, 39, 43, 101, 136, 176, 213, 224, 258, 259, 263, 269, 289, 296, 347, 356, 360, 363], "begin": [17, 23, 31, 34, 323, 331, 336, 338, 347], "cbit": [17, 51, 72, 77, 78, 79, 80, 89, 99, 213, 216, 219, 244, 354], "straightfoward": 17, "matrix": [17, 23, 24, 26, 68, 69, 77, 79, 97, 113, 136, 165, 169, 170, 174, 176, 178, 184, 187, 189, 190, 208, 209, 210, 213, 214, 220, 225, 244, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 296, 306, 308, 314, 315, 317, 318, 319, 321, 323, 324, 333, 340, 342, 343, 344, 345, 347, 364, 372, 373, 374, 375, 377], "my_z": 17, "involv": [17, 34, 274, 276, 363], "param": [17, 97, 208, 209, 210, 242, 302, 331], "my_rxrz": 17, "my_qft": 17, "none": [17, 29, 35, 40, 51, 57, 58, 60, 61, 64, 65, 77, 78, 79, 89, 95, 97, 98, 100, 101, 104, 105, 112, 113, 116, 123, 134, 136, 137, 138, 139, 140, 141, 142, 144, 169, 170, 171, 173, 176, 177, 186, 187, 189, 199, 205, 208, 209, 210, 211, 215, 216, 217, 220, 225, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 259, 261, 263, 266, 269, 275, 279, 281, 282, 286, 287, 291, 292, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 312, 313, 319, 321, 322, 338, 339, 340, 344, 365, 366, 367, 368, 369, 370], "ressourc": 17, "constitu": [17, 141], "qbit_list": [17, 248], "referenc": 17, "predefin": 17, "head": 17, "my_cz": 17, "conj": 17, "tran": 17, "mea": [17, 73, 208, 210], "boolean": [17, 25, 40, 63, 72, 78, 147, 216, 218, 244, 247, 248, 249, 252, 262, 283, 325, 328], "logic": [17, 68, 91, 98, 99, 216, 218, 229, 244, 249, 258, 262, 263, 374], "stand": [17, 43, 186], "break": [17, 68, 72, 78, 79, 80, 229, 244, 259], "hadamard": [17, 101, 347], "vmatrix": 17, "pauli": [17, 19, 26, 91, 136, 143, 183, 208, 209, 212, 261, 263, 266, 279, 281, 301, 314, 317, 318, 319, 321, 329, 330, 332, 345, 347, 374], "ident": [17, 244, 304, 319, 321, 322, 330, 332, 374], "foral": [17, 24, 166, 184], "rm": 17, "r": [17, 65, 101, 120, 123, 146, 168, 173, 174, 176, 184, 185, 372], "rotat": [17, 97, 101, 175, 177, 179, 214, 244, 261, 263, 266, 279, 281, 301, 362], "co": [17, 120, 123, 134, 137, 295], "sin": [17, 120, 123, 134], "infil": 17, "outfil": 17, "wrote": 17, "my_lib": 17, "py": [17, 51, 100, 346, 347], "misc": [17, 213], "qb": [17, 31, 97, 259, 289], "inlin": [17, 97, 98, 138, 213, 225, 244, 285, 288, 346, 347], "l": [17, 176, 184, 190, 224, 372, 374], "my_aqasm": 17, "beneath": 18, "everi": [18, 173, 303, 356, 361, 369, 370, 372], "realiz": [18, 137, 279], "digit": [18, 261, 347, 362, 365, 374], "li": [18, 373], "magnet": [18, 23, 24, 260, 264, 265, 266, 267, 268, 279, 280, 284, 308, 347, 377], "experienc": 18, "vari": [18, 374], "devic": [18, 44, 45, 83, 84, 87, 100, 355, 364], "sort": [18, 95, 97, 101, 141, 171, 173, 184, 347], "varieti": [18, 34, 36], "would": [18, 23, 31, 33, 41, 48, 53, 56, 62, 97, 173, 186, 214, 251, 254, 260, 264, 265, 267, 268, 280, 284, 286, 347, 356, 360, 361, 369, 374], "rich": 18, "actual": [18, 28, 29, 68, 355, 365], "chemistri": [18, 164, 346, 372, 375], "scienc": [18, 224], "explor": [18, 41, 97, 269], "door": 18, "answer": [18, 355, 360], "struggl": 18, "evolut": [18, 36, 38, 141, 164, 183, 269, 308, 362], "defect": 18, "steer": 18, "decompos": [18, 39], "lambda_i": [18, 141], "h_i": [18, 101, 141, 308, 364], "hermitian": [18, 136, 141], "send": [18, 35, 40, 52, 54, 91, 120, 141, 347, 357, 358, 359, 360, 361], "simpli": [19, 21, 41, 146, 244, 247, 251, 263, 272, 273, 362, 377], "drive": [19, 20, 21, 141], "t_variabl": [19, 20, 21], "pauli_term": [19, 20, 21, 26, 30, 136, 374], "tmax": [19, 20, 21, 23, 141, 263, 266, 269, 271, 279, 281, 282, 357, 358, 359, 360, 361, 363], "23": [19, 26, 41, 150, 163, 347, 359, 366, 367, 373, 374], "lead": [19, 286, 347, 355, 363, 374], "especi": 19, "ten": 19, "hundr": 19, "straight": [19, 186], "respect": [19, 23, 24, 33, 137, 141, 186, 263, 266, 279, 281, 308, 321, 327, 332, 356, 374, 377], "speed": [19, 164, 372], "tuppl": 19, "scalar": [19, 20, 26, 32, 139, 209, 211, 251, 319], "tmax_expr": 19, "15": [19, 42, 148, 150, 153, 155, 156, 157, 161, 163, 165, 226, 229, 330, 344, 350, 356, 359, 366, 367], "145": 19, "tempor": 20, "composit": [20, 26, 97, 216], "pipe": [20, 40, 41, 60, 104, 198, 199, 293, 312, 347, 365], "schedule1": 20, "schedule2": 20, "heavisid": [20, 120, 347], "ponder": 20, "signal": [20, 137], "filter": [20, 29], "parallel": [20, 84], "rescal": [20, 301], "45": [20, 127, 149, 150, 163, 360], "past": 20, "futur": 20, "bar": [20, 92, 140], "One": [21, 70, 91, 97, 137, 141, 171, 184, 185, 186, 187, 190, 270, 347, 361, 363, 377], "psi_0": [21, 101, 141, 269, 272, 273], "vec": [21, 43, 165, 167, 292], "linalg": [21, 169, 300, 307, 347, 373, 374], "norm": [21, 28, 71, 287, 314, 320, 325, 326, 328], "real": [22, 23, 24, 57, 101, 120, 121, 122, 126, 127, 128, 135, 136, 224, 269, 327, 347, 356, 360, 364], "life": 22, "formul": [22, 23, 24, 25, 258, 260, 264, 265, 267, 279, 280, 282, 284, 355, 356, 372, 377], "maxim": [22, 28, 35, 98, 101, 260, 263, 265, 289, 302, 355], "At": [22, 34, 97, 249], "lowest": [22, 43, 186, 294, 355, 362], "intim": 22, "relat": [22, 28, 137, 241, 314, 338], "qubo": [22, 23, 25, 34, 260, 263, 264, 266, 267, 279, 284, 347, 356, 362, 377], "Ising": [22, 24, 25, 26, 33, 34, 136, 260, 263, 264, 265, 267, 268, 279, 280, 281, 284, 308, 347, 356, 362, 365, 377], "solut": [22, 31, 34, 173, 263, 264, 265, 267, 268, 269, 276, 284, 308, 356, 357, 358, 359, 360, 361, 362, 363, 365], "precis": [22, 41, 78, 89, 102, 186, 302, 306, 373], "unconstrain": [22, 34, 258, 281, 347], "h_": [23, 24, 34, 168, 169, 173, 174, 176, 183, 184, 186, 363, 372], "sigma_": [23, 26, 332], "j_": [23, 24, 34, 308, 340, 364], "ij": [23, 24, 34, 166, 171, 173, 176, 178, 184, 190, 292, 308, 342, 345, 364], "pmatrix": 23, "symmetr": [23, 24, 266, 279, 281, 364, 377], "zero": [23, 24, 29, 77, 97, 141, 169, 173, 186, 208, 266, 279, 285, 304, 347, 371, 372, 373, 374], "quantiz": [23, 174, 176], "s_": [23, 24, 34, 165, 269], "clariti": [23, 375], "offset": [23, 24, 97, 101, 102, 219, 253, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 308, 347, 377], "landscap": 23, "match": [23, 97, 244, 254, 262, 279, 283, 301, 344, 347], "convert": [23, 24, 28, 47, 48, 49, 53, 55, 56, 58, 59, 62, 65, 68, 69, 70, 73, 164, 168, 169, 170, 183, 184, 314, 318, 342, 343, 344, 345, 372, 373], "vice": [23, 349, 350, 351, 352], "versa": [23, 349, 350, 352], "typic": [23, 177, 186], "try": [23, 41, 79, 97, 141, 195, 261, 263, 266, 279, 281, 289, 291, 347, 348, 373], "reach": [23, 24, 39, 194, 304, 373], "adiabat": [23, 186, 258, 263, 266, 269, 270, 271, 272, 279, 281, 282, 355], "theorem": [23, 363], "al18": 23, "markov": [23, 34], "chain": [23, 34, 101, 136], "low": [23, 34, 41, 75, 139, 171, 173, 184, 188, 244, 280, 347, 360, 366, 367, 368, 369, 370, 373, 374], "ferromagnet": 23, "align": 23, "onto": [23, 68, 71, 310], "tend": [23, 43], "lower": [23, 28, 34, 35, 101, 128, 184, 185, 188, 196, 213, 226, 261, 263, 266, 279, 281, 293, 302, 306, 362, 373, 375], "closer": 23, "word": [23, 242, 244, 304, 356], "aim": [23, 34, 164, 260, 347, 371], "tackl": [23, 355, 356], "min_": [23, 24], "problem_s": [23, 24, 377], "100": [23, 24, 29, 30, 165, 302, 374], "1000": [23, 24, 30, 292], "seed": [23, 24, 137, 302, 306, 308, 347, 377], "248": [23, 24], "h_field": [23, 377], "rand": [23, 24, 184, 185, 377], "any_mat": [23, 24, 377], "j_mat": [23, 377], "transpos": [23, 24, 77, 169, 170, 189, 377], "18": [23, 42, 150, 153, 156, 157, 163, 359, 366, 367, 377], "problem_is": [23, 377], "offset_i": [23, 266, 279, 308, 377], "magnetic_field_h": [23, 266, 279], "j_coupling_matrix": [23, 266, 279], "problem_ising_job": 23, "job_typ": [23, 97, 141, 200, 201, 202, 203, 204, 206, 263, 266, 279, 281, 347, 365, 366, 367, 368, 369, 370, 374], "sqa": [23, 24, 33, 200, 201, 202, 203, 204, 206, 260, 263, 264, 265, 266, 267, 268, 279, 280, 281, 284, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "nan": 23, "readi": [23, 24, 258, 261, 263, 266, 279, 281, 347, 362], "problem_ising_ob": 23, "get_observ": [23, 24, 25, 261, 263, 266, 279, 281, 282], "ising": [23, 24, 25, 26, 136, 263, 266, 279, 281], "69198662": [23, 24], "48503501": 23, "02913885": 23, "56996588": 23, "84630373": 23, "99216786": 23, "72490608": 23, "36270136": 23, "21518767": 23, "43237698": 23, "53659164": 23, "43329047": 23, "63995666": 23, "75877295": 23, "67301865": 23, "74051823": 23, "84432295": 23, "68663996": 23, "76994591": 23, "78961076": 23, "38143552": 23, "traceback": [23, 51, 100, 309, 372], "recent": [23, 51, 100, 309, 372], "stdin": [23, 24, 51, 100, 309, 357, 358, 359, 360, 361, 372], "30": [23, 36, 37, 150, 163, 347, 356, 359, 360, 366, 367], "nameerror": [23, 51, 309], "to_qubo": [23, 25, 263, 266, 279], "combinatorialproblem": [23, 24, 25, 34, 258, 266, 275, 279, 281, 362, 377], "to_combinatorial_problem": [23, 24, 266, 279, 281], "further": [23, 24, 244], "confus": 23, "ones": [23, 26, 33, 186, 355, 356], "subtract": 23, "divis": [23, 347], "factor": [23, 167, 202, 203, 206, 229, 260, 265, 267, 284, 366], "treat": 23, "aforement": 23, "tameem": 23, "albash": 23, "daniel": 23, "lidar": 23, "review": 23, "modern": 23, "90": 23, "015002": 23, "2018": 23, "url": [23, 104, 226, 232, 236, 286, 307, 312], "journal": 23, "ap": [23, 226, 232], "rmp": 23, "1103": [23, 226, 232], "revmodphi": 23, "x_": [24, 372], "q_": 24, "quad": 24, "linear": [24, 145, 148, 159, 258, 260, 263, 266, 279, 281, 282, 291, 304, 305, 306, 307, 347, 362, 374], "seen": [24, 26, 41, 78, 263, 293, 364, 372, 373, 374], "2x_": 24, "q_mat": 24, "52": [24, 150, 163], "problem_qubo": 24, "offset_q": [24, 281], "q_matrix": [24, 281], "problem_qubo_job": 24, "na": [24, 349], "problem_qubo_ising_ob": 24, "73860143": 24, "23485743": 24, "65543516": 24, "74898502": 24, "19440743": 24, "55240091": 24, "42782353": 24, "46931252": 24, "9406734": 24, "5541593": 24, "73200663": 24, "65215284": 24, "63773675": 24, "28187286": 24, "22": [24, 97, 150, 163, 259, 359, 360, 366, 367, 373], "userwarn": [24, 357, 358, 359, 360, 361], "sqaqpu": [24, 263, 266, 279, 281, 357, 358, 359, 360, 361], "gamma_t": [24, 141, 263, 266, 279, 281, 357, 358, 359, 360, 361], "to_is": [24, 25, 263, 281], "var": [25, 34, 258, 262, 263], "claus": [25, 34, 213, 249, 258, 259, 263], "achiev": [25, 28], "famou": [25, 355], "sat": [25, 258], "comb_prob": 25, "five": 25, "x1": 25, "x2": 25, "x3": 25, "x4": 25, "weight": [25, 258, 263, 269, 279, 289, 297, 344, 347, 363], "add_claus": [25, 263], "75": [25, 373], "86": 25, "comb_prob_ob": 25, "1500000000000001": 25, "1875": 25, "zz": [25, 26, 97, 165, 191, 192, 193, 259, 263, 372], "zzz": [25, 259], "56": [25, 163], "215": 25, "per": [25, 74, 84, 289, 307, 357, 358, 359, 360, 361, 366, 368, 369], "exemplifi": 25, "my_observ": 26, "xz": [26, 30, 191, 193, 372], "zxzx": 26, "constant_coeff": [26, 136, 169, 170, 184, 185, 189, 373], "multipli": [26, 202, 203, 206, 239, 240, 260, 265, 267, 284, 374], "obs1": 26, "obs2": 26, "tensor": [26, 143, 174, 212, 224, 292, 301, 340, 345, 374], "__xor__": 26, "zzx": 26, "commut": [26, 287, 295, 372, 374], "__or__": 26, "2j": [26, 121, 122, 129, 131, 133], "yz": [26, 191, 193], "shorthand": 26, "notat": [26, 213], "obs3": 26, "previous": [26, 306, 373, 374], "get": [26, 28, 29, 35, 39, 41, 81, 82, 101, 120, 140, 164, 172, 208, 210, 305, 346, 347, 350, 373, 374, 375, 376], "complex": [26, 77, 101, 102, 120, 121, 122, 126, 127, 129, 130, 131, 133, 139, 140, 141, 147, 209, 211, 296, 306, 370], "zx": 26, "nbshot": [26, 28, 29, 30, 35, 79, 92, 97, 101, 141, 165, 186, 261, 263, 266, 279, 281, 306, 307, 347], "2048": 26, "retriev": [27, 42, 54, 60, 224, 289, 347], "showcas": 27, "batch": [27, 33, 35, 39, 40, 57, 60, 61, 63, 64, 84, 91, 97, 101, 104, 198, 199, 200, 201, 202, 203, 204, 205, 206, 225, 275, 276, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 312, 313, 365, 366, 367, 368, 369, 370], "view": [28, 306, 347], "memori": [28, 36, 37, 84, 87, 224, 225, 306, 333, 334, 372], "he": 28, "wavefunct": [28, 91, 168, 184], "commonli": [28, 314], "project": [28, 68, 70, 165, 306], "formal": [28, 34, 289, 364], "speak": 28, "axi": [28, 224, 373], "yield": [28, 29, 30, 31, 97, 199, 287, 306, 362], "rest": [28, 31, 34, 40, 41], "statist": [28, 97, 229, 347], "accur": [28, 186], "estim": [28, 29, 30, 64, 84, 92, 139, 140, 186, 213, 243, 346, 347, 350, 371, 374], "frequenc": [28, 29, 92, 97, 137, 140, 141, 279, 347], "01": [28, 141, 289, 302, 329, 347, 361, 377], "repetit": [28, 244], "decid": [28, 29], "subset": [28, 70, 73, 267, 269, 278, 295, 306, 346, 356, 360, 365, 366, 367, 370], "On": [28, 41, 311], "subresult": 28, "absenc": [28, 70], "observablesplitt": [28, 30, 285], "enhanc": [28, 347], "capac": 28, "aggreg": [28, 33, 35, 91, 92, 97, 141, 244, 286, 347], "threshold": [28, 29, 35, 92, 97, 101, 141, 165, 184, 185, 188, 197, 244, 287, 291, 306], "uncertainti": 28, "meant": [28, 95, 101, 186, 187, 262, 373], "request": [28, 64, 83, 104, 139, 199, 286, 307, 312], "metadata": [28, 32], "show": [28, 97, 186, 255, 356, 357, 360, 364, 373, 374], "1024": [28, 35, 97], "reconstruct": [28, 32], "load": [28, 32, 35, 60, 61, 91, 95, 96, 97, 100, 101, 102, 136, 139, 141, 144, 224, 266, 279, 347], "autom": [28, 43, 164], "conduct": 29, "amp_threshold": [29, 97, 101, 141, 306], "certain": [29, 43, 195, 197, 374], "finit": [29, 30, 140], "err": [29, 32, 139, 140, 165], "58": [29, 163], "04960449637488582": 29, "42": [29, 150, 163], "ideal": [29, 30, 36], "nois": [29, 30, 36, 43, 137, 207, 208, 209, 210, 211, 212, 285, 304, 314, 336, 337, 338, 346, 347, 371, 374], "n_": [29, 177, 178, 304, 343, 345, 374], "mathrm": [29, 167, 168, 174, 176, 177, 184, 186, 208, 210, 241, 292, 304, 319, 321, 322, 323, 324, 329, 338, 343, 345, 374], "took": 29, "x_0": 30, "otim": [30, 269, 330, 332, 335, 340, 343, 363], "z_1": 30, "devoid": 30, "10000": [30, 280], "040000000000000036": 30, "10042334631373566": 30, "058000000000000024": 30, "03158533890325753": 30, "00799999999999998": 30, "010000180016381505": 30, "grasp": 31, "understand": 31, "perfectli": [31, 147], "pars": [31, 51, 198, 199, 200, 201, 202, 203, 204, 206, 274, 275, 276, 277, 278, 365, 366, 367, 368, 369, 370], "flexibl": [31, 48, 53, 56, 62], "insert": [31, 43, 97, 304], "my_stack": [31, 39], "batchgener": [31, 104, 347], "post_process": [31, 32, 39, 199, 200, 205, 286], "spec": [31, 40, 42, 97, 100, 101, 199, 200, 201, 202, 203, 204, 205, 206, 286, 289, 290, 291, 294, 298, 299, 303, 304], "cat": 31, "abstractgener": [31, 104, 198, 205, 347], "catstategener": 31, "target": [31, 42, 78, 97, 101, 144, 186, 195, 258, 271, 282, 355, 362, 363], "2f": 31, "000": [31, 40, 356], "111": [31, 40], "advantag": 31, "dummi": [31, 43, 51, 199, 347], "prod": 31, "rx_i": 31, "alpha_i": 31, "best": [31, 41, 43, 97, 141, 260, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 307, 346, 355, 356, 365, 370, 374], "fix": [31, 120, 144, 269, 294, 363], "dummyenergyminim": 31, "practis": [31, 35, 289], "better": [31, 35, 186, 286, 347, 362, 373, 375], "enumer": [31, 40, 79, 80, 86, 91, 145, 259, 289, 316, 374], "best_angles_circ": 31, "z_i": 31, "\u03c3": 31, "isclos": 31, "atol": 31, "11111": 31, "nor": [31, 35], "batchresult": [31, 39, 40, 57, 61, 63, 64, 91, 199, 200, 205, 264, 265, 267, 268, 275, 284, 286, 293, 296, 306, 307, 312, 347], "catstateresult": 31, "__init__": [31, 35, 41], "invalid": [31, 35, 80, 347], "server": [31, 33, 35, 39, 40, 64, 79, 104, 105, 198, 199, 205, 285, 286, 299, 305, 307, 312, 313], "synchron": [31, 33, 39, 60, 61, 350], "asynchron": [31, 39, 59, 60, 61, 63, 350], "side": [31, 35, 39, 40, 97, 298], "serv": [31, 33, 39, 104, 199, 205, 286, 307, 312], "port": [31, 33, 39, 104, 105, 199, 205, 286, 299, 307, 312, 313, 351], "ip": [31, 33, 39, 105, 205, 299, 313, 351], "maxcutgener": [31, 198, 359, 365, 366], "1234": [31, 33, 39], "client": [31, 33, 35, 39, 40, 79, 105, 205, 293, 299, 313, 347], "distant": [31, 33, 39, 40], "listen": [31, 33, 39, 104, 199, 286, 307, 312, 351], "127": [31, 33, 39, 351], "remotebatchgener": [31, 198], "disconnect": [31, 33, 39], "lost": [31, 33, 39, 255], "encapsul": 32, "raw_data": [32, 40, 92, 139, 309, 357, 358, 359, 360, 361], "value_data": [32, 40, 139], "statevector": [32, 40, 139, 323, 347], "intermediate_measur": [32, 139, 140], "summar": 32, "trace": [32, 43, 314, 320, 322, 324, 326, 327, 340, 344], "meta": [33, 35, 41, 43, 95, 96, 100, 293, 347], "behavior": [33, 39, 71, 79, 97, 213, 289, 291, 298, 309], "remoteqpu": [33, 305, 347], "inherit": [33, 35, 40, 41, 115, 213, 258, 263, 266, 279, 281, 293, 296, 307, 347, 362, 372], "parent": [33, 35, 41, 213, 220, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284], "qpuhandl": [33, 35, 66, 97, 101, 115, 165, 305, 306, 307, 313], "circumv": 33, "pre": [33, 39, 40, 213, 306, 363], "albeit": 34, "solver": [34, 41, 260, 264, 265, 267, 268, 280, 284, 308, 356, 375], "resembl": 34, "simulatedann": [34, 118, 263, 266, 279, 281, 305, 347, 357, 358, 359, 360, 361, 365, 366, 367, 368, 369, 370], "benchmark": [34, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284], "98": [34, 356], "histor": 34, "heurist": [34, 261, 263, 266, 279, 281, 306, 362], "stochast": [34, 137, 140, 285, 302, 374], "temperatur": [34, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 308, 338, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "jump": [34, 209, 211], "barrier": 34, "escap": 34, "optima": 34, "hopefulli": 34, "global": [34, 314, 363, 374], "optimum": 34, "p_": [34, 92, 140], "min": [34, 41, 120, 265, 266, 269, 279, 281, 373, 374], "delta": [34, 186], "switch": 34, "wherea": [34, 91, 304], "pseudo": [34, 374], "hardwarespec": [35, 39, 40, 42, 91, 97, 101, 104, 144, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 201, 202, 203, 204, 205, 206, 286, 289, 290, 298, 303, 312, 347], "integr": [35, 164, 166, 168, 173, 184, 185, 187, 190, 338, 373], "rais": [35, 40, 68, 72, 79, 80, 81, 82, 93, 94, 97, 98, 106, 110, 111, 112, 114, 209, 211, 244, 263, 266, 279, 281, 311, 347], "qpuexcept": [35, 79, 94, 186, 347], "assert_qpu": [35, 91], "my_condit": [35, 40], "myqpu": 35, "super": [35, 41], "_paramet": 35, "dict": [35, 51, 57, 61, 64, 95, 96, 97, 98, 100, 101, 112, 123, 144, 187, 208, 209, 210, 211, 263, 266, 279, 281, 293, 296, 297, 300, 302, 306, 307, 312, 338, 347, 366, 367, 368, 369, 370], "str": [35, 51, 60, 61, 64, 77, 78, 81, 82, 84, 85, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 112, 113, 123, 134, 136, 139, 141, 143, 144, 146, 169, 170, 176, 183, 186, 187, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 225, 242, 244, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 279, 280, 281, 284, 286, 291, 292, 295, 296, 297, 299, 303, 304, 307, 312, 313, 329, 330, 338, 342, 343, 345, 347, 357, 358, 359, 360, 361, 374], "remov": [35, 97, 101, 209, 211, 225, 244, 259, 340, 347], "valid": [35, 81, 82, 91, 255, 356], "overrid": [35, 225, 298], "temporarli": 35, "dictionari": [35, 42, 51, 78, 97, 98, 101, 112, 123, 138, 144, 187, 208, 210, 242, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 296, 306, 338], "json": [35, 43], "_default_opt": 35, "_overrid": 35, "split": [35, 36, 295, 375], "correct": [35, 242, 252, 261, 263, 266, 271, 272, 279, 281, 356, 374], "exceut": 35, "add_sampl": [35, 139], "aggregate_data": [35, 91, 97, 101, 141], "card": 35, "underneath": [35, 251, 306], "skeleton": [35, 213], "wrapper": [35, 57, 59, 60, 61, 63, 91, 95, 96, 97, 100, 101, 139, 140, 144, 164, 217, 221, 251, 306, 347], "max_nb_shot": 35, "qpuskeleton": 35, "arg": [35, 53, 54, 66, 97, 104, 113, 199, 200, 205, 208, 209, 210, 211, 214, 221, 244, 255, 259, 263, 266, 276, 277, 278, 279, 281, 286, 290], "nb_shot": 35, "processingtyp": [35, 42, 88, 100, 101, 307], "integ": [35, 70, 71, 73, 77, 78, 97, 118, 119, 127, 142, 167, 245, 247, 248, 250, 252, 254, 255, 258, 260, 297, 356], "measured_qubit": 35, "todo": 35, "compress": [35, 164, 175, 373], "caster": [35, 347], "shorter": 35, "tupl": [35, 48, 53, 56, 62, 70, 71, 73, 74, 97, 137, 141, 165, 166, 168, 184, 186, 187, 188, 190, 208, 209, 210, 266, 276, 277, 278, 279, 281, 308, 347], "size": [35, 40, 78, 174, 184, 186, 194, 195, 196, 197, 203, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 244, 255, 260, 265, 267, 268, 276, 277, 278, 280, 291, 292, 297, 340, 344, 356, 357, 358, 360, 367, 368], "compris": [36, 186, 291], "propos": [36, 37, 164, 182], "pybind11": [36, 37], "remark": [36, 37], "exponenti": [36, 37, 120, 126, 229, 304, 374, 375], "around": [36, 37, 59, 60, 61, 63, 177, 186], "ram": [36, 37], "deliv": [36, 38], "unitari": [36, 38, 77, 97, 213, 215, 220, 223, 243, 319, 373, 374], "pylinalg": [37, 44, 45, 244, 289, 298, 305, 306, 311, 347, 350], "my": 39, "transpil": [39, 64], "incom": [39, 41, 97, 291], "aver": 39, "flow": [39, 97, 313], "plugin1": 39, "plugin2": 39, "my_qpu": [39, 40], "overal": [39, 97, 259, 261, 263, 266, 279, 281, 356, 374], "wide": [39, 41, 364, 372], "remap": [39, 77, 78, 97, 229], "remoteplugin": [39, 285, 347], "subtyp": 39, "junction": [39, 285, 296, 346, 347], "resubmit": [39, 40], "repair": [39, 40], "abstractplugin": [40, 97, 101, 116, 285, 313], "pluginexcept": [40, 79, 93], "assert_plugin": [40, 91], "get_spec": [40, 42, 312], "stage": [40, 41, 42, 186, 244, 249], "myplugin": 40, "hardware_spec": 40, "someth": [40, 347], "batch_result": [40, 205, 286], "do_post_process": [40, 286], "deloc": 40, "debug": [40, 51, 123, 225, 244, 309], "screen": 40, "ghz": 40, "all_result": 40, "need_flip": 40, "lsb_first": [40, 139], "has_statevector": [40, 139], "70710678": 40, "resdata": 40, "_serial": 40, "mem_ptr": 40, "data_typ": 40, "data_s": 40, "qreg": [40, 51, 97, 140, 142, 244, 347, 354], "qregist": [40, 97, 140, 141, 142, 213, 244, 255], "0x153e3362e5b0": 40, "msb": [40, 142], "_subtype_metadata": 40, "0x153e3362e760": 40, "0x153e3362e790": 40, "0x153e3362e7f0": 40, "_valu": [40, 242], "error_data": 40, "in_memori": 40, "_parameter_map": 40, "values_data": 40, "emb": [41, 176, 279, 347], "middl": 41, "simpler": [41, 269], "deal": [41, 186, 244], "eigensolv": [41, 346, 347, 371], "until": [41, 186, 194, 291], "satfisfi": 41, "cous": 41, "outsid": [41, 186], "workflow": 41, "architectur": [41, 148, 347], "With": [41, 364], "trivial": [41, 224, 247, 295, 363], "treatment": 41, "iterativeexplor": 41, "naiv": [41, 194, 197, 291, 295], "width": [41, 70, 73, 269], "ecount": 41, "initial_job": 41, "linspac": 41, "all_valu": 41, "val": [41, 247, 248, 252], "current_job": 41, "min_val": 41, "best_index": 41, "best_param": 41, "entri": [41, 78, 97, 269], "point": [41, 124, 137, 254, 294, 296, 304, 307, 347], "recept": [41, 293, 296], "acc": [41, 229], "transmit": [41, 79, 139, 143, 293], "down": [41, 174, 176, 293, 362, 374], "upper": [41, 128, 184, 185, 186, 188, 364], "variational_circ": 41, "beta": [41, 187, 224, 338, 362], "9979453927503363": 41, "077478517802246": 41, "bother": 41, "administr": [41, 244, 296], "burden": [41, 296], "extract": [41, 69, 77, 102, 120, 127, 139, 213, 226, 244, 258, 263, 275, 277, 278, 308, 357, 358, 359, 360, 361, 372], "slightli": [41, 347], "graph": [42, 100, 144, 145, 198, 201, 202, 203, 204, 206, 258, 259, 263, 264, 265, 266, 267, 268, 274, 276, 277, 278, 279, 281, 284, 295, 346, 347, 358, 359, 361, 363, 364, 365, 366, 368, 369, 377], "gateset": [42, 97, 100, 111, 114, 212, 225, 244, 298], "map": [42, 96, 97, 101, 106, 108, 109, 139, 144, 167, 169, 170, 183, 242, 296, 306, 314, 347, 364], "from_nx": [42, 144], "gate_set": [42, 45, 91, 97, 214, 225, 261, 263, 266, 279, 281, 298], "comm": [42, 44, 45, 68, 69, 74, 347], "ttype": [42, 68, 69, 74, 76, 79, 83, 88], "my_spec": 42, "processing_typ": [42, 100, 347], "calibr": [42, 302], "2024": [42, 347], "03": [42, 347], "exisit": 43, "150": [43, 347], "optimization_trac": 43, "2000592063254465": 43, "8736866601290536": 43, "21409999217346465": 43, "13081270961626978": 43, "5293460801395912": 43, "5757065521381819": 43, "36730179721755296": 43, "7312707007065997": 43, "8220265576995676": 43, "21338350870756784": 43, "06832659446671514": 43, "1782142076373261": 43, "33811912802364025": 43, "37121410982521885": 43, "3929963207118229": 43, "4066631605101918": 43, "4166537139565532": 43, "39839876438226923": 43, "4256223783463826": 43, "43633212215975814": 43, "44350405746577903": 43, "41283605991357664": 43, "45851880565752534": 43, "4596988074987722": 43, "4458774873368918": 43, "47002876747466377": 43, "4773211527875958": 43, "4829377628586": 43, "4895176961656054": 43, "4961181864808156": 43, "5027013837788248": 43, "5092526697624775": 43, "5157838030160409": 43, "522287261429106": 43, "5288211119711018": 43, "5353248940586799": 43, "5418528813418891": 43, "548373815489789": 43, "5548998222732893": 43, "5614238644973514": 43, "5679486140462473": 43, "5744728314548311": 43, "5809920486780695": 43, "5875168924371148": 43, "5940359896283883": 43, "6005556650548556": 43, "6070772065423606": 43, "6135914837134666": 43, "6198135688183236": 43, "6264192152654458": 43, "6327290092244864": 43, "639316333897108": 43, "6457783776317837": 43, "652313033277979": 43, "6588476107573272": 43, "6653717051877976": 43, "6718964991999674": 43, "6784175381416451": 43, "6849434009228662": 43, "6914683908733164": 43, "6979917295379144": 43, "7045147994672635": 43, "7110401191588294": 43, "7175652249152139": 43, "7240900211454153": 43, "7306123864804703": 43, "7371224434794891": 43, "7436486607906689": 43, "7501766188793244": 43, "7567026464443799": 43, "7632271993387932": 43, "7697521243909511": 43, "7762770413906415": 43, "7828019433692872": 43, "7893251396047976": 43, "7958508161263015": 43, "8023748664414168": 43, "8089000876771337": 43, "8154249868466442": 43, "8219496591318851": 43, "8284748062678705": 43, "8349998545263301": 43, "841519286041529": 43, "8480461598107009": 43, "8545659919117183": 43, "8610928414276535": 43, "8676132882239869": 43, "8741400423705575": 43, "8806607918178373": 43, "8871874606798504": 43, "8937085588370626": 43, "9002351259936989": 43, "9067563429109029": 43, "9132828716270667": 43, "9198041881459983": 43, "9263306925659276": 43, "9328518981520996": 43, "9393784493970103": 43, "9458994855982426": 43, "9524261051079295": 43, "9589467609490694": 43, "9654734960992188": 43, "971993678605007": 43, "9785205126416697": 43, "985040019914825": 43, "9915668774977208": 43, "9980856422619033": 43, "0046122829446036": 43, "0111302470484886": 43, "0176560966546575": 43, "0241735170087662": 43, "0306974187021978": 43, "0372149444888734": 43, "0437344232208368": 43, "0502537163370922": 43, "056763529885604": 43, "0632880986450168": 43, "0698123753291255": 43, "0763357999834922": 43, "0828544574204064": 43, "0892251278343834": 43, "0956545340959365": 43, "101919272138899": 43, "1059242321246967": 43, "1125983724617476": 43, "1140263029140638": 43, "122397995370293": 43, "121957573744851": 43, "123276924571865": 43, "1272533521782475": 43, "130149618655214": 43, "1333053788758738": 43, "1363588097141792": 43, "1387740010878091": 43, "1423168418371412": 43, "1447433779814937": 43, "1481167115134117": 43, "1511805834695759": 43, "1544973831157825": 43, "1577508010413053": 43, "1609954527698858": 43, "1642637511920393": 43, "167514105077566": 43, "1707799648470807": 43, "1740405027884215": 43, "1773028614072625": 43, "1805649065910269": 43, "1838257928853773": 43, "1870250007481122": 43, "1903060400883965": 43, "193529189412482": 43, "1968026436262218": 43, "choic": [43, 314], "optimizer_arg": 43, "151724098430986": 43, "11355858191239": 43, "8420164565476912": 43, "001252101172331831": 43, "1443184316918473": 43, "2688559360169498": 43, "134799917532343": 43, "272959587035004": 43, "625104296541137": 43, "5920911184352794": 43, "0523187238690377": 43, "30825705461817854": 43, "367175035773002": 43, "278399501175855": 43, "69357522306385": 43, "955565681559139": 43, "94837770603068": 43, "908797409734184": 43, "644289722469911": 43, "037224700950231": 43, "0580226220284485": 43, "965567644677823": 43, "131861418391074": 43, "201363250144913": 43, "269507225196229": 43, "335155903776551": 43, "404208558749214": 43, "470095177667101": 43, "538595279267485": 43, "606320844868666": 43, "674561156665348": 43, "742744157313366": 43, "810867499081864": 43, "879025914458738": 43, "947179184287205": 43, "015329785158056": 43, "083482173526049": 43, "151633894468276": 43, "219785471595445": 43, "287937559544107": 43, "356089571077419": 43, "4242415672243505": 43, "49239343431474": 43, "560545282446405": 43, "628697200123305": 43, "696848988684029": 43, "76499822691427": 43, "833150298316962": 43, "901299174470616": 43, "969449246358191": 43, "037598643793707": 43, "105737572060902": 43, "173873700803315": 43, "242011172359279": 43, "310107139796618": 43, "378142632873125": 43, "4462390242297305": 43, "5142567639521864": 43, "581070162914717": 43, "648863260557902": 43, "7151060387776065": 43, "761255702565105": 43, "833791260338619": 43, "87573556097089": 43, "950285238630805": 43, "9961367584763": 43, "071610728674977": 43, "123034574485567": 43, "197335870000289": 43, "255830009946857": 43, "327568551961207": 43, "39288337239339": 43, "461328306564166": 43, "530084029095023": 43, "598463447978873": 43, "666534749837226": 43, "734534706180888": 43, "802602636100309": 43, "870784575771456": 43, "93893766579685": 43, "007006536187294": 43, "072931185802597": 43, "14199701638236": 43, "208949685375055": 43, "277517404805725": 43, "344313456891813": 43, "412948388650008": 43, "480140006829146": 43, "548588743200039": 43, "61550170853465": 43, "684105244794942": 43, "75106012479252": 43, "819669085071174": 43, "886104720111616": 43, "954977926640263": 43, "02098751024972": 43, "090038260411466": 43, "15635618245659": 43, "225295651882568": 43, "290557936407293": 43, "359497320759782": 43, "423674982428278": 43, "491695813501922": 43, "55296902906124": 43, "612361697644417": 43, "672300548248716": 43, "707519181838931": 43, "784227915953398": 43, "767470857231856": 43, "787364161304533": 43, "812648990873917": 43, "84795879936986": 43, "87361645793989": 43, "908973747379466": 43, "93990735708434": 43, "974923765173504": 43, "008547422464266": 43, "042451910523475": 43, "076080651216225": 43, "106584342890514": 43, "141234320283047": 43, "171822593093218": 43, "206032829152601": 43, "238319392486101": 43, "27290781583499": 43, "306044204259411": 43, "340381131879122": 43, "37430509904156": 43, "408333434685984": 43, "442277207579389": 43, "475364260071393": 43, "50941867929938": 43, "542390074297389": 43, "575594901927088": 43, "608935475805499": 43, "640372459276541": 43, "672730674672225": 43, "703584760422219": 43, "718758779924618": 43, "759833160964957": 43, "78105436757227": 43, "81846953552781": 43, "85145290404378": 43, "885301796216496": 43, "918731978340649": 43, "949149074656363": 43, "973654750402739": 43, "004973565844686": 43, "034512478527908": 43, "053964656866496": 43, "096276411589397": 43, "113950443937412": 43, "seqoptim": [43, 165, 285, 374], "resili": 43, "gradient": [43, 101, 285, 287, 292, 346, 347, 371, 374], "sensit": [43, 374], "multiplelaunchesanalyz": [43, 285, 374], "fusion": [44, 45, 291, 306, 347], "quop": [44, 45, 208, 209, 347], "datamodel": [45, 68, 69, 75], "circuit_build": [45, 91, 208], "openqasm": [45, 46, 346, 349], "mixing_factori": [45, 258], "cirq_to_qlm": [47, 352], "qlm_to_cirq": [47, 352], "sep_measur": [48, 53, 56, 62], "kwarg": [48, 51, 53, 54, 56, 62, 66, 96, 97, 100, 101, 104, 139, 140, 141, 144, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 214, 242, 244, 247, 251, 254, 255, 260, 261, 263, 264, 265, 266, 267, 268, 276, 277, 278, 279, 280, 281, 282, 284, 286, 290, 291, 295, 297, 300, 302, 309], "googl": [48, 148, 150, 347, 352], "measureless": [48, 53, 56, 62], "resulting_circuit": [48, 53, 56, 62], "list_qubit": [48, 53, 56, 62], "regular": [48, 53, 56, 62, 148, 292], "qlm_circuit": [49, 58, 65, 350, 351], "oqasmpars": [50, 354], "parser": [50, 51, 354], "include_matric": [51, 79, 225, 244], "bool": [51, 64, 77, 89, 92, 93, 94, 97, 98, 99, 101, 105, 134, 136, 139, 141, 143, 144, 165, 169, 170, 175, 179, 181, 186, 187, 189, 205, 213, 225, 244, 247, 248, 252, 254, 256, 259, 261, 262, 263, 266, 269, 275, 276, 277, 278, 279, 281, 283, 286, 288, 289, 290, 292, 293, 294, 296, 299, 301, 302, 306, 313, 315, 320, 325, 326, 327, 328, 338, 343, 344, 345], "creg": [51, 354], "openqasm_cod": 51, "p": [51, 101, 173, 174, 176, 179, 184, 190, 208, 210, 241, 254, 301, 329, 330, 331, 336, 338, 345, 374], "my_custom_g": 51, "alia": [51, 98], "custom_g": 51, "oqasm_cod": 51, "els": [51, 259, 307, 372], "17": [51, 125, 150, 153, 156, 157, 163, 359, 360, 366, 367], "write_t": 51, "tabmodul": 51, "oqasm_tab": 51, "chunk": 51, "activ": [51, 164, 166, 171, 172, 173, 184, 185, 188, 347, 371, 373], "tab": [51, 99], "aqasmengin": [52, 54, 353], "aqasmprint": [52, 353], "projectq_to_qlm": [53, 353], "stream": 54, "pyquil_to_qlm": [55, 351], "pyquilqpu": [55, 351], "qlm_to_pyquil": [55, 351], "pyquil_prog": 56, "rigetti": [57, 148, 160, 161], "chip": [57, 60, 61, 148, 163, 347], "tell": [57, 312], "skip": [57, 64, 213, 220, 225, 244], "set_qpu": [57, 66], "embed": [57, 61, 64, 176, 279, 287, 292, 297, 300, 301, 302, 306, 307, 312, 347, 355, 364, 372], "submit_job": [57, 293, 307, 308, 312], "qlm_job": [57, 351], "program_pragma": 58, "asyncbackendtoqpu": [59, 61, 63, 350], "backend": [59, 60, 61, 64, 66, 101], "useabl": 59, "backendtoqpu": [59, 60, 350], "qiskit_to_qlm": [59, 350], "qiskitjob": [59, 60, 350], "qlm_to_qiskit": [59, 350], "qputobackend": [59, 350], "qiskitruntimeqpu": [59, 347, 350], "token": [60, 61, 120, 134, 350], "ibmq_backend": [60, 61, 350], "ibmq_qasm_simul": [60, 61, 64, 350], "ibm": [60, 61, 64, 148, 152, 153, 154, 155, 156, 157, 158, 347, 350], "aer_simul": [60, 61], "argment": [60, 61], "suppos": [60, 61, 66, 81, 82], "ibmq": [60, 61, 350], "login": [60, 61], "suppli": [60, 61, 338], "qiskit_token": [60, 61], "retrieve_job": [60, 63], "file_nam": [60, 63], "qlm_batch": [60, 63], "jobv1": 60, "optimization_level": 61, "despit": 61, "light": 61, "heavi": 61, "highest": [61, 356], "qiskit_circuit": [62, 350], "async_job": 63, "max_shot": 63, "cancel": 63, "job_id": 63, "id": [63, 77, 84], "skip_transpil": 64, "experi": [64, 186, 347], "sampler": [64, 350], "primit": [64, 350], "backend_nam": 64, "qiskitruntimeservic": [64, 350], "rxx": 65, "rzz": 65, "quantumcircuit": 65, "connector": 66, "plugabl": 66, "backendconfigur": 66, "gatetyp": [68, 78, 98], "classicctrl": [68, 78], "clasic": [68, 213], "mat2nparrai": 68, "raise_break": 68, "ndarrai": [69, 70, 71, 73, 74, 101, 113, 136, 141, 165, 166, 168, 169, 170, 173, 174, 176, 178, 184, 185, 187, 188, 189, 190, 224, 271, 273, 296, 297, 301, 306, 307, 317, 318, 332, 333, 334, 335, 340, 344], "shape": [69, 184, 185, 224, 251, 254, 307, 345, 362, 373], "state_vec": [70, 71, 73], "nb_sampl": 70, "thank": [70, 173], "ask": [70, 71, 307, 347, 348], "intprob_list": 70, "occur": [70, 71, 73, 74, 97, 306, 347, 374], "renorm": [70, 71], "afterward": [70, 244], "short": 70, "prob": [70, 73, 147, 330, 331, 336, 338, 339, 373], "intprob": 71, "But": 71, "undergo": 71, "intermediari": [71, 301], "ax": 71, "recomput": 71, "op_po": 72, "nd": 73, "tensordot": [74, 307], "intermediatemeasur": [74, 88, 139, 140], "descriptor": 74, "branch": 74, "gatedefinit": [76, 78], "gated": [77, 78, 97], "nrow": 77, "ncol": 77, "complexnumb": [77, 141], "im": 77, "is_ctrl": 77, "is_dag": 77, "is_tran": 77, "is_conj": 77, "subgat": [77, 97], "gsyntax": 77, "nbctrl": 77, "circuit_implement": 77, "column": 77, "row": 77, "deprec": [77, 345, 351, 371], "conjug": [77, 169, 170, 189, 244], "signifi": [77, 244], "strict": 77, "posit": [77, 89, 97, 120, 130, 133, 176, 202, 203, 206, 260, 265, 267, 284, 297, 314, 325], "_0": [77, 176, 269], "_2": [77, 97], "distinguish": [78, 212, 330], "uniqu": [78, 84, 85, 283], "identify": 78, "optyp": 78, "rpf": 78, "permut": [78, 306], "prefix": [78, 99, 213], "abort": [78, 80], "formula_ev": [78, 91], "cbit_valu": 78, "rewir": 78, "useful": 79, "cleanli": [79, 255], "catch": 79, "errortyp": [79, 81, 82], "pack": 79, "character": 79, "excp": 79, "encount": 79, "modulenam": [79, 81, 82], "pybindlinalg": 79, "incompat": 79, "abort_cod": 80, "invalid_arg": 80, "noneresult": 80, "illegal_g": 80, "nbcbit": [80, 97], "not_simulat": 80, "stop": [80, 244, 287, 290, 292, 302], "unknown": [80, 186], "compat": [80, 247, 291, 347, 365, 372], "simulat": [80, 347], "allocationmodel": [83, 312], "nodetyp": [83, 87], "resourcemodel": [83, 312], "sequential_round_count": 84, "round": [84, 373], "upcom": 84, "parallel_job_count": 84, "concurr": 84, "allocated_thread_count_per_job": 84, "thread": [84, 87, 104, 199, 286, 306, 307, 312, 344, 347], "allocated_total_memory_mb": 84, "mb": 84, "estimated_batch_completion_tim": 84, "reservation_id": 84, "devicetyp": 85, "manufactur": 85, "qaptivaqpu": 85, "node_typ": [86, 87], "commod": 86, "job_count": 87, "mem_necessary_biggest_job_mb": 87, "biggest": 87, "wished_thread_count": 87, "nb_node": 87, "gate_po": 89, "hat": [91, 165, 184, 190, 304, 343, 374], "boson": 91, "hilbert": [91, 136], "span": [91, 136], "topologytyp": [91, 144, 298], "quantiti": [91, 289, 362], "arithexpress": [91, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 146, 263, 266, 279, 281, 308, 347], "consol": [91, 97, 290], "ascii": [91, 98], "art": [91, 98], "printer": [91, 97], "plot_in_notebook": [91, 97, 98], "simutil": 91, "load_state_vector_from_bin": 91, "keep_intermea": 92, "report": [92, 347, 348], "discard": 92, "varepsilon_": [92, 140], "equiv": [92, 140, 168, 178, 184, 241, 319, 343, 345], "f_": [92, 140, 174, 176, 319, 321], "p_k": [92, 140], "math": [92, 120, 124, 125, 126, 130, 132], "f_k": [92, 140], "serializ": [95, 96, 97, 100, 139, 140, 144, 146], "fname": [95, 96, 97, 100, 101, 136, 139, 141, 144, 244, 266, 279], "classmethod": [95, 96, 97, 100, 101, 136, 139, 140, 141, 144, 263, 266, 279, 281], "from_byt": [95, 97, 101, 139, 140, 144], "byte": [95, 97, 101, 139, 140, 144], "raw": [95, 97, 101, 139, 140, 144, 274], "from_thrift": [95, 96, 97, 100, 101, 139, 140, 144, 266, 279], "tobject": [95, 96, 97, 100, 101, 139, 140, 144, 266, 279], "to_cpp": [95, 101], "transmiss": [95, 101], "to_thrift": [95, 101, 123, 146], "_gate_set": 97, "has_matric": 97, "var_dic": [97, 123], "ancilla_map": 97, "_serialized_gate_set": 97, "hand": [97, 104, 123, 216, 245, 247, 248, 249, 250, 252], "0x148a67e582e0": 97, "bind_vari": [97, 165, 242], "v_name": 97, "v_valu": 97, "fulli": [97, 149, 354, 362], "regener": 97, "portion": 97, "feel": 97, "deepcopi": [97, 169, 170, 189, 288], "beforehand": [97, 288], "freshli": 97, "v_dictionari": 97, "fill": 97, "shuffl": 97, "dagger_from_param": 97, "crawl": [97, 225], "clear": 97, "typeerror": 97, "valueerror": [97, 209, 211], "callabl": [97, 134, 289, 295], "linker": [97, 244], "_10": 97, "_8": 97, "asbtract": 97, "invert": [97, 229], "334": 97, "smarter": 97, "smart_dagg": 97, "gate_tim": [97, 208, 209, 210], "unspecifi": 97, "eval": [97, 101, 165], "fill_matric": 97, "submatrices_onli": [97, 225, 244, 347], "include_default_gate_set": 97, "insert_g": 97, "remove_lock": [97, 244], "lock": [97, 225, 244], "placehold": [97, 312], "shift_qbit": [97, 101], "094947017729282e": [97, 141], "largest": [97, 141], "constain": 97, "apparit": [97, 141], "doubl": [97, 102, 141, 170, 171, 173, 202, 203, 206, 260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 306, 308], "prune": [97, 141], "unlik": [97, 141], "40": [97, 141, 150, 163, 356, 360], "easili": [97, 215, 289, 307, 356, 372], "concaten": 97, "__add__": 97, "cat_circuit": 97, "tensori": 97, "__mult__": 97, "kron_circuit": 97, "among": [97, 212, 264, 265, 267, 268, 292, 329, 330, 347, 356, 371], "deseri": 97, "my_circuit": 97, "new_circuit": 97, "34": [97, 150, 163, 347, 357, 358, 360], "5707963267948966": [97, 122], "7853981633974483": 97, "39269908169872414": 97, "_4": 97, "_6": 97, "total": [97, 170, 184, 185, 189, 196, 255, 304, 347], "extens": [97, 364, 374], "max_depth": 98, "circuit_nam": 98, "renaming_dict": [98, 138], "wait": [98, 290, 350], "visual": [98, 276], "ipython": [98, 138, 347], "detect": 98, "formula_str": 99, "as_graph": 100, "nqbit": [100, 136, 141, 144, 147, 170, 171, 172, 177, 184, 185, 189, 318, 329, 330, 332, 345, 372, 373], "to_nx": [100, 144, 149], "rigetti_aspen": [100, 148], "nx_graph": [100, 144], "as_quameleon": 100, "quameleonplugin": [100, 285, 347], "easi": [100, 289, 376], "403": 100, "commonqpu": [100, 104, 115], "__str__": [100, 142], "attributeerror": [100, 372], "quameleon": [100, 298], "differenti": [101, 123, 134, 146, 346, 347], "vname": 101, "equat": [101, 202, 203, 206, 209, 211, 260, 265, 267, 284], "partial": [101, 292, 314, 340, 347], "w": [101, 123, 146, 166, 168, 184, 279, 347], "theta_j": [101, 292], "psi_i": 101, "induc": 101, "twice": 101, "possibli": [101, 126, 129, 131, 141, 142, 208, 209, 210], "unpack": [101, 139], "job_to_run": 101, "group": [101, 176, 194, 196, 197, 291, 295, 348, 364], "icreas": 101, "probail": 101, "remoteappl": 103, "host_ip": [104, 199, 286, 307, 312], "localhost": [104, 199, 286, 307, 312], "server_typ": [104, 199, 286, 307, 312], "ssl_cert": [104, 105, 199, 205, 286, 299, 307, 312, 313], "ssl_kei": [104, 105, 199, 205, 286, 299, 307, 312, 313], "ssl_ca": [104, 199, 286, 307, 312], "multi": [104, 164, 180, 181, 199, 286, 307, 312, 373], "pool": [104, 199, 255, 286, 287, 307, 312, 374], "fork": [104, 199, 286, 307, 312], "ssl": [104, 105, 199, 205, 286, 299, 307, 312, 313], "certif": [104, 105, 199, 205, 286, 299, 307, 312, 313], "check_server_cert": [105, 205, 299, 313], "address": [105, 205, 224, 299, 313, 347], "builder": [106, 270, 273], "variablenamenotavail": [106, 244], "redefin": [106, 110, 111, 112, 114], "matrix_util": [106, 208], "default_gate_set": [106, 244], "get_param_gener": [106, 208], "get_predef_gener": [106, 208], "hidden": 111, "behind": 111, "gatesignatur": [111, 112, 214, 221, 225], "gatesyntaxredefinit": [111, 112], "gatesyntax": [111, 114], "dictio": 112, "add_signatur": [112, 225], "signa": 112, "new_gate_set": 112, "arg_typ": 113, "func": [113, 137, 214, 217, 251], "get_circuit": 113, "get_matrix": [113, 169, 170, 189, 373, 374, 375], "gen": 113, "handler": [116, 313], "integer_to_spin": [117, 357, 358, 359, 360, 361], "decim": [117, 118, 119, 373], "spins_to_integ": 117, "n_spin": 118, "1d": [118, 119, 137, 260, 266, 279, 280, 308, 318], "solution_configur": [119, 357, 358, 359, 360, 361], "spins_arrai": 119, "symbol": [120, 123, 127], "label": [120, 123, 134, 178, 262], "ast": [120, 134], "abso": 120, "absolut": [120, 121], "plane": [120, 122], "atan2": 120, "cosinu": [120, 125], "get_item": 120, "imag": [120, 126], "imaginari": [120, 129], "logarithm": [120, 130], "sinu": [120, 132], "squar": [120, 133, 148, 162, 323, 333, 340], "vmax": 120, "numer": [120, 123, 134, 146, 165], "infix": [120, 134], "my_min": 120, "awar": [120, 314], "all_symbol": 120, "constraint": [120, 244, 260, 285, 357, 358, 361, 377], "uminu": 120, "max": [120, 186, 198, 204, 258, 266, 268, 279, 281, 346, 356, 365], "ab": [120, 165, 171, 173, 232, 319], "8284271247461903": 121, "radian": [122, 124, 125, 132], "141592653589793": [122, 124], "children": [123, 262], "arbitrari": [123, 224], "other_var": [123, 146], "from_str": 123, "thrift_str": 123, "rpn": [123, 146], "invers": [123, 264, 265, 267, 268, 275, 284, 338, 374], "pretty_print": 123, "pretti": [123, 134, 140], "arc": 124, "tangent": 124, "coordin": [124, 317, 352], "123233995736766e": 125, "minus_1": 126, "2246467991473532e": 126, "my_list": 127, "6j": 127, "idx_var": 127, "get_item_expr": 127, "lower_bound": 128, "upper_bound": 128, "my_num": [129, 131], "625": 133, "25": [133, 150, 163, 302, 347, 359, 366, 367], "pretty_token": 134, "omit": [134, 256], "wouldn": 134, "dx": 134, "behav": [134, 213, 214, 244, 252, 255, 313], "number_1": 135, "number_2": 135, "to_matrix": [136, 347], "spars": [136, 169, 170, 189, 306, 344, 347], "spmatrix": 136, "psd": [137, 343, 345], "sampling_frequ": 137, "alpha": [137, 187, 224, 263, 302], "spectral": [137, 336, 338], "densiti": [137, 187, 314, 318, 323, 324, 342, 344, 345], "tild": [137, 209, 211, 217, 241, 338], "t_f": 137, "fourier": [137, 236, 241, 346], "dot": [137, 241, 307, 330, 335], "denot": [137, 330, 332, 364], "cos_expr": 137, "psd_expr": 137, "plot": [137, 138, 139, 251], "versu": 137, "generate_nois": 137, "hardwaremodel": [137, 207], "dependend": 137, "tf": 137, "get_nois": 137, "durat": [137, 208, 209, 210, 263, 266, 269, 279, 281, 314, 336, 338], "fmt": 138, "filenam": 138, "hardware_model": 138, "cell": [138, 372], "shell": 138, "get_ipython": 138, "svg": 138, "timeplot": 138, "alias": 138, "thriftresult": 139, "signific": [139, 241, 252, 306], "deviat": [139, 186], "iff": [139, 144, 286], "dictionnari": 139, "histogram": 139, "wrap_sampl": 139, "qreg_list": 139, "set_qreg": 140, "tname": 141, "driven": 141, "halt": 141, "int_msb_valu": 142, "lsb_int": 142, "lsb": [142, 306], "reprensent": 142, "pauli_op": 143, "do_validity_check": 143, "coeffcient": 143, "xxy": 143, "front": [143, 291, 347], "concern": [143, 348, 356], "check_valid": 143, "coeff": [143, 301], "is_direct": 144, "thrifttopologi": 144, "undirect": [144, 357, 358, 359, 361, 366, 367, 368, 369, 370], "lnn": [144, 145, 148, 159, 298], "add_edg": [144, 145], "qb1": 144, "qb2": 144, "toplogi": 144, "vmap": 144, "init_non": 144, "getter": 144, "set_nbqbit": 144, "helper": [144, 164, 184, 185, 187, 356, 373], "all_to_al": 145, "consecut": [145, 263, 266, 279, 281, 302], "pm": [145, 304, 374], "init": 145, "var_typ": [146, 244], "ignor": [146, 244, 247, 254, 259, 291, 295, 303, 347], "forbidden": 146, "superconduct": 148, "google_sycamor": 148, "sycamor": [148, 150], "ibm_burlington": 148, "burlington": [148, 152], "ibm_johannesburg": 148, "johannesburg": [148, 153], "ibm_melbourn": 148, "melbourn": [148, 154], "ibm_rueschlikon": 148, "rueschlikon": [148, 155], "ibm_singapor": 148, "singapor": [148, 156], "ibm_tokyo": 148, "tokyo": [148, 157], "ibm_yorktown": 148, "yorktown": [148, 158], "rigetti_agav": 148, "agav": [148, 160], "aspen": [148, 161], "zuchongzhi": [148, 347], "__name__": 148, "alltoal": 148, "griddevic": 148, "grid": [148, 151, 162, 352], "linedevic": 148, "nearest": [148, 159, 177, 181], "neighbor": [148, 159], "squaregriddevic": 148, "35": [150, 163, 191, 192, 193, 360], "44": [150, 163, 347, 360], "31": [150, 163, 347, 360, 361], "49": [150, 163, 360], "27": [150, 163, 356, 359, 360, 366, 367], "36": [150, 163, 259], "24": [150, 163, 259, 289, 356, 359, 366, 367], "32": [150, 163, 229, 360], "41": [150, 163], "28": [150, 163, 347, 359, 360, 366, 367], "37": [150, 163, 360], "33": [150, 163, 245, 250], "51": [150, 163], "21": [150, 163, 356, 359, 366, 367], "29": [150, 163, 359, 366, 367], "38": [150, 163, 360], "47": [150, 163, 360, 363], "26": [150, 163, 359, 360, 366, 367], "39": [150, 163], "48": [150, 163, 360], "dimx": 151, "dimi": 151, "3x2": 151, "dimens": [151, 162, 174, 224, 254, 333, 334, 340], "dim": [162, 333, 334, 340], "3x3": 162, "53": 163, "54": [163, 226, 232], "55": 163, "57": 163, "61": 163, "62": 163, "63": 163, "65": 163, "electronicstructurehamiltonian": [164, 168, 170, 174, 176, 178, 183, 184, 186, 191, 192, 193, 303, 372, 373], "fermionhamiltonian": [164, 169, 171, 183, 191, 192, 193, 303, 372], "spinhamiltonian": [164, 165, 167, 169, 170, 183, 186, 191, 192, 193, 303, 372, 374], "make_anderson_model": [164, 372], "impur": [164, 174, 176, 372, 375], "anderson": [164, 174, 372], "make_embedded_model": [164, 372], "make_hubbard_model": [164, 372, 373], "hubbard": [164, 178, 346, 372, 373], "transform_to_bk_basi": [164, 303, 372], "bravyi": [164, 169, 170, 183, 186, 191, 303, 347, 371, 372], "kitaev": [164, 169, 170, 183, 186, 191, 303, 347, 371, 372], "transform_to_jw_basi": [164, 303, 372], "jordan": [164, 169, 170, 183, 186, 192, 303, 347, 371, 372], "wigner": [164, 169, 170, 183, 186, 192, 303, 347, 371, 372], "transform_to_parity_basi": [164, 303, 372], "pariti": [164, 169, 170, 183, 186, 193, 303, 347, 371, 372], "make_compressed_ldca_circ": [164, 373], "ldca": [164, 175, 179, 373], "make_general_hwe_circ": [164, 373], "make_ldca_circ": [164, 373], "make_mr_circ": [164, 373], "small": [164, 165, 180, 186, 187, 196, 269], "mr": [164, 180, 373], "make_mrep_circ": [164, 373], "excit": [164, 175, 179, 181, 373], "preserv": [164, 175, 179, 181, 269, 314, 326, 344, 373], "mrep": [164, 181, 373], "make_shallow_circ": [164, 373], "keen": [164, 182], "et": [164, 179, 180, 181, 182, 259, 287, 301, 374], "al": [164, 179, 180, 181, 182, 259, 287, 301, 374], "articl": [164, 179, 180, 181, 182, 374], "2019": [164, 179, 180, 181, 182], "aspect": 164, "molecularhamiltonian": [164, 185, 372], "moleculeinfo": 164, "compute_active_space_integr": 164, "construct_ucc_ansatz": [164, 375], "convert_to_h_integr": [164, 372], "get_cluster_op": [164, 375], "get_hf_ket": [164, 375], "hartre": [164, 167, 172, 173, 187, 374, 375], "fock": [164, 167, 172, 173, 187, 374, 375], "orbit": [164, 168, 171, 172, 173, 176, 178, 180, 184, 185, 187, 188, 285, 373], "guess_init_param": [164, 375], "m\u00f8ller": [164, 173, 373], "plesset": [164, 173, 187, 373, 375], "perturb": [164, 173, 187, 285, 302, 373, 375], "select_active_orbit": 164, "freez": [164, 184, 188], "occup": [164, 171, 173, 184, 185, 188, 373], "transform_integrals_to_new_basi": 164, "qse": 164, "apply_quantum_subspace_expans": [164, 373], "phase_estim": [164, 213, 373], "perform_phase_estim": [164, 373], "trotteris": [164, 373], "make_trotterisation_routin": [164, 373], "trotter": [164, 167, 183, 186, 260, 264, 265, 267, 268, 280, 284, 347, 371], "pyscf_tool": [164, 373], "perform_pyscf_comput": [164, 373], "calcul": [164, 187, 268, 374], "pyscf": [164, 187, 373], "state_prep_circ": 165, "expansion_oper": 165, "return_matric": 165, "subspac": [165, 340, 346, 363], "expans": [165, 346], "star": 165, "_i": [165, 176, 224, 292], "_j": 165, "eigenvalu": [165, 169, 327, 373, 375], "overlap": [165, 269, 362, 363], "o_i": 165, "matrix_h": 165, "matrix_": 165, "e_qs": 165, "xx": [165, 192], "yy": [165, 192], "ncycl": [165, 175, 179, 301], "e_min": 165, "e_vq": 165, "opt_circ": 165, "one_body_integr": [166, 168, 184, 185, 187, 190, 373], "two_body_integr": [166, 168, 173, 184, 185, 187, 190, 373], "active_indic": [166, 373], "occupied_indic": [166, 373], "uv": [166, 168, 184, 185, 279, 372], "i_": [166, 168, 173, 176, 184, 185, 190, 224, 307, 372], "uvwx": [166, 168, 173, 184, 185, 372], "2i_": 166, "ijji": [166, 184], "ijij": [166, 184], "2d": [166, 168, 169, 260, 265, 266, 279, 281, 308], "4d": [166, 168, 169, 173, 174, 176], "occupi": [166, 171, 184, 373], "cluster_op": 167, "ket_hf": 167, "n_step": [167, 308, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "cluster": [167, 171, 176, 373, 375], "vert": [167, 307], "hf": 167, "iT": 167, "uccsd": 167, "pq": [168, 169, 174, 176, 183, 184, 186, 190, 372], "pqr": [168, 169, 174, 176, 183, 184, 190, 372], "sigma": [168, 174, 178, 184, 372], "delta_": [168, 178, 184], "sigma_1": [168, 184], "sigma_2": [168, 184], "phi_": [168, 184], "ux": [168, 184], "vw": [168, 184, 279, 347], "iint": [168, 184], "r_": [168, 184, 345], "resp": [168, 171, 184], "phi_u": [168, 184], "molecular": [168, 173, 184, 187, 373], "hpq": [169, 373], "hpqr": [169, 373], "a_p": [169, 372], "a_q": [169, 372], "a_r": [169, 372], "a_": [169, 174, 241, 307, 340, 372], "mathbb": [169, 176, 184, 372], "h_pq": [169, 372], "h_pqr": [169, 372], "eigval": [169, 373], "eigvalsh": [169, 373, 374], "cc": [169, 170, 176, 191, 192, 193, 331, 336, 338, 372], "cccc": [169, 170, 191, 192, 193, 372], "too": [169, 170, 186, 189, 347, 372], "to_fermion": [169, 372], "to_spin": [169, 170, 372, 373], "normal_ord": 170, "wick": [170, 372], "to_electron": [170, 372], "n_electron": [171, 172, 173, 184, 185, 188, 373], "noon": [171, 173, 184, 185, 188, 373], "n_i": [171, 173, 184], "descend": [171, 173, 184, 188], "degeneraci": [171, 173], "t_": [171, 178, 338], "cup": [171, 173, 184], "it_": 171, "inoccupi": 171, "n_qbit": 171, "orbital_energi": [173, 185, 187, 373], "trial": 173, "mp2": 173, "theta_a": 173, "epsilon_i": [173, 174], "epsilon_j": 173, "epsilon_a": 173, "epsilon_b": 173, "theta_list": 173, "mu": [174, 176, 178, 373], "epsilon": 174, "canon": [174, 176, 314, 344], "csq": [174, 176], "f_p": [174, 176], "f_q": [174, 176], "f_r": [174, 176], "n_b": 174, "bath": [174, 176, 372], "siam": 174, "c_": [174, 176, 183, 184, 190, 263, 372], "uparrow": [174, 176, 178], "downarrow": [174, 176, 178], "v_i": 174, "coulomb": [174, 184], "repuls": [174, 176, 184, 185, 187, 373], "intens": [174, 338, 374], "chemic": [174, 176, 178, 183], "tunnel": 174, "2n_b": 174, "f_0": 174, "annihil": 174, "f_1": 174, "f_2": 174, "1st": 174, "f_3": 174, "nb_fermionic_mod": [175, 179], "eigstate_ind": [175, 179], "slater": [175, 179], "pattern": [175, 177], "synthoplin": 175, "cycl": [175, 177, 179, 181, 301], "eigenst": [175, 179, 186, 262], "lambda_c": 176, "t_loc": 176, "int_kernel": 176, "limits_": 176, "2m": 176, "ijkl": [176, 184, 190], "f_j": 176, "_k": 176, "f_l": 176, "loc": 176, "d_": [176, 224], "imp": 176, "onsit": 176, "site": [176, 178, 372], "hop": [176, 178], "correl": [176, 212, 372, 373], "uncorrel": 176, "conv": 176, "2i": [176, 241], "strategi": [176, 194, 213, 259, 261, 263, 266, 279, 281, 291, 362], "_1": [176, 269], "n_cycl": 177, "rotation_g": 177, "entangling_g": 177, "predefg": 177, "thinli": 177, "dress": 177, "entangl": [177, 259, 295, 314, 321], "surround": 177, "four": [177, 373], "neighbour": [177, 181], "odd": 177, "t_mat": [178, 373], "dagger_i": 178, "n_site": 178, "dallair": 179, "demer": 179, "matchgat": 179, "inspir": [180, 226, 236, 362], "sugisaki": [180, 181], "n_fsim_cycl": 181, "set_phi_to_0": 181, "fsim": 181, "phi": [181, 184, 373], "taken": [181, 208], "n_trotter_step": [183, 186, 373], "final_tim": [183, 373], "prod_": 183, "c_p": [183, 186], "c_q": 183, "c_r": 183, "dr": 184, "particl": [184, 285, 297], "chosen": [184, 230, 266, 279, 281, 287, 289, 292, 302], "kin": 184, "pot": 184, "randn": [184, 185], "mol_h": [184, 185, 373], "40529710202663116": 184, "get_electronic_hamiltonian": [184, 372, 373], "select_active_spac": [184, 185, 373], "threshold_1": [184, 185, 188, 373], "02": [184, 185, 188, 373], "threshold_2": [184, 185, 188, 373], "001": [184, 185, 188, 287, 292], "ca": [184, 188], "approach": [184, 187, 188, 213, 258, 295, 355], "inact": [184, 188], "latter": [184, 188, 304, 364, 374], "unchang": [184, 188, 347], "varepsilon_2": [184, 185, 188], "varepsilon_1": [184, 185, 188], "geq": [184, 265], "n_e": 184, "e_": [184, 186, 336, 338], "transform_basi": [184, 373], "transformation_matrix": 184, "u_": [184, 190, 241, 279, 347], "qi": [184, 190], "jq": [184, 190], "qj": [184, 190], "kr": [184, 190], "molecular_hamiltonian": 184, "studi": [185, 187, 347, 371, 373, 374], "molecul": [185, 187, 346, 347, 371, 373, 374], "4377078121418575": 185, "03404470717714158": 185, "1933279627912496": 185, "7777231017510766": 185, "0855804274644379": 185, "430723300449145": 185, "12744613145427042": 185, "2584289094615601": 185, "714253558353574": 185, "4347987660206374": 185, "7606620601001274": 185, "0697802591138303": 185, "011551797138093902": 185, "9569640273369528": 185, "7990488090609773": 185, "3776373118878191": 185, "013940198073092375": 185, "9334376506433537": 185, "555491727748383": 185, "48017487100662576": 185, "8455685215809507": 185, "restrict_active_spac": 185, "h_el": 186, "n_phase_bit": 186, "init_vec": 186, "n_adiab_step": 186, "e_target": [186, 373], "size_interv": [186, 373], "basis_transform": 186, "n_shot": 186, "verbos": [186, 294, 301, 320], "qpe": 186, "apriori": 186, "challeng": 186, "preliminari": 186, "collaps": [186, 244], "linearli": [186, 266, 279, 281], "guarante": 186, "lie": 186, "adjust": 186, "suggest": 186, "interv": 186, "unbias": 186, "eigenenergi": [186, 373], "narrow": 186, "mislead": 186, "anymor": 186, "thumb": 186, "consider": [186, 374], "larger": [186, 255, 291, 347, 356, 362], "01101": 186, "fast": 186, "idea": [186, 364, 374], "Will": 186, "nb_adiab_step": 186, "perfect": [186, 207, 208, 209, 210, 212, 269, 306, 347], "_interv": 186, "geometri": [187, 373], "run_fci": 187, "kickstart": 187, "nuclear": [187, 373], "groundstat": 187, "2nd": [187, 375], "m\u00f6ller": 187, "ci": 187, "fci": 187, "expens": 187, "big": [187, 333, 334, 372], "atom1": 187, "atom2": 187, "atomn": 187, "guess": [187, 373, 375], "neutral": 187, "rdm1": [187, 373], "nuclear_repuls": [187, 373], "nel": 187, "active_so": 188, "spatial": 188, "inactive_occupied_so": 188, "zy": [189, 372], "4j": 189, "u_mat": 190, "h_hat_ij": 190, "h_hat_ijkl": 190, "fermion_hamiltonian": [191, 192, 193], "bk": 191, "spin_hamiltonian": [191, 192, 193], "075j": [191, 192, 193], "075": [191, 192, 193], "jw": 192, "yx": 192, "xy": 192, "util": [194, 229, 363, 375], "fusionplugin": [194, 285, 306, 347], "adjacentstrategi": [194, 291], "adjac": [194, 195, 197, 291, 364], "eagerstrategi": [194, 291], "eagerli": [194, 196], "naivestrategi": [194, 291], "nbqbits_target": 195, "qbit_limit": [195, 196, 197], "localis": 195, "prioriti": 196, "adding_cost": 196, "maintain": [196, 209, 211, 291], "capit": 196, "small_group": 196, "smaller": [196, 252, 356], "candid": 196, "fuse": 196, "combinatorialoptimizergener": [198, 201, 202, 203, 204, 206, 274], "graphcolouringgener": [198, 370], "colour": [198, 201, 258, 264, 356, 361, 365, 369], "graphpartitioninggener": [198, 357, 367], "partit": [198, 202, 258, 264, 265, 267, 268, 274, 276, 277, 278, 280, 346, 356, 359, 365, 366], "kcliquegener": [198, 277, 358, 368], "kcliqu": [198, 203, 258, 277, 368], "cut": [198, 204, 258, 265, 268, 346, 356, 365], "vertexcovergener": [198, 278, 361, 369], "cover": [198, 206, 258, 274, 278, 284, 346, 356, 365], "abctract": 199, "met": 199, "hostnam": 199, "wrapper_post_process": 199, "abstractgenetor": 199, "parsedpostprocessedresult": 199, "aqo": [200, 201, 202, 203, 204, 206, 263, 266, 269, 271, 272, 273, 279, 281, 282, 355, 365, 366, 367, 368, 369, 370], "ryd": [200, 263, 266, 279, 281, 347, 355, 364, 365], "combinatorialresult": [200, 274], "number_of_colour": [201, 264, 361], "graphpartitioningresult": [201, 202, 204, 264, 265, 267, 268, 274], "h_a": [202, 203, 206, 260, 265, 267, 284], "h_b": [202, 203, 206, 260, 265, 267, 284], "kcliqueresult": [203, 274], "cliqu": [203, 258, 267, 269, 274, 277, 346, 356, 365], "vertexcoverresult": [206, 274], "imperfect": 207, "readout": [207, 212], "channel": [207, 208, 209, 210, 212, 316, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 341, 342, 343, 344, 345, 350, 374], "defaultgatesspecif": 207, "gatesspecif": [207, 208, 209, 211, 337], "defaulthardwaremodel": [207, 212], "make_depolarizing_hardware_model": 207, "depolar": [207, 212, 314, 329, 330, 374], "state_prep": [208, 210, 215, 223], "predef_gener": 208, "param_gener": 208, "channel_repr": [208, 209, 336, 338], "channelrepresent": [208, 209, 314, 336, 338], "krau": [208, 209, 314, 316, 319, 320, 321, 322, 325, 327, 330, 331, 336, 338, 342, 343, 344, 345], "wise": [208, 209, 210], "oppos": 208, "quantum_channel": [208, 210, 325, 326, 327, 328], "quantumchannel": [208, 209, 210, 211, 314, 319, 320, 321, 322, 325, 326, 327, 328], "rho_0": [208, 210], "povm": [208, 210], "lbrace": [208, 210, 330, 344], "rbrace": [208, 210], "tr": [208, 210, 304, 323, 324, 340, 345], "rho": [208, 210, 319, 330, 342, 343, 344], "get_gate_tim": [208, 210], "gate_typ": [208, 210, 337], "get_quantum_channel": [208, 210], "gate_d": [208, 210], "quantumchannelkrau": [208, 210, 314, 329, 330, 331, 342, 343, 345], "gate_nois": [209, 211], "idle_nois": [209, 211], "idl": [209, 211, 212], "instantan": 209, "parametricquantumchannel": [209, 211, 314, 337], "gates_specif": [209, 211, 337], "params_specif": [209, 211], "jump_oper": [209, 211], "lindblad": [209, 211, 336], "cleanup_jump_oper": [209, 211], "shift_jump_oper": [209, 211], "l_k": [209, 211], "alpha_k": [209, 211], "eps1": 212, "eps2": 212, "correl_typ": 212, "single_qubit": 212, "depol_typ": [212, 329, 330], "rate": [212, 329, 374], "multi_qubit": 212, "multiqubit": [212, 346, 347, 371, 374], "make_depolarizing_channel": [212, 314, 329], "paramg": [213, 214], "qclaus": [213, 247, 248, 252], "quantul": 213, "qarithexp": [213, 252], "qcompexp": [213, 252], "boolformula": [213, 218, 244], "cregist": [213, 244], "generate_gate_set": 213, "abtract": 213, "diagram": [213, 276, 277, 278, 364], "arrow": 213, "green": 213, "rippl": [213, 232], "indep": 213, "agnost": [213, 226], "indepent": 213, "distinct": 213, "matter": 213, "kptree": [213, 347], "kerinidi": [213, 224], "prakash": [213, 224], "amplification_step": 213, "amplif": [213, 215, 346], "grover": [213, 215, 222, 346], "quantum_count": 213, "grover_diffus": 213, "diffus": [213, 215, 222], "household": [213, 215, 222], "uniform_distribut": 213, "famili": 214, "admiss": 214, "r_z": 214, "my_rz": [214, 242], "matrix_gen": 214, "set_dag": 214, "recip": [214, 362], "assumpt": [214, 374], "nbit": [215, 222, 243, 256, 257, 269], "reg1": 215, "reg2": 215, "neg": [216, 249, 262, 366], "my_gat": 217, "slice": [219, 253, 259], "littl": 220, "mother": [220, 242], "never": [220, 255], "safe": 221, "gather": [221, 347], "kp": 224, "multiplexor": 224, "kerenidi": [224, 347], "kp17": 224, "qram": 224, "k_1": [224, 330], "k_n": 224, "k_i": [224, 330], "pad": 224, "log_2": 224, "understood": [224, 251], "i_1": [224, 332, 340], "i_k": 224, "alpha_": 224, "adress": 224, "i_l": 224, "beta_": 224, "get_routin": 224, "flatten": 224, "rout_0": 224, "rout_1": 224, "rout_2": 224, "proport": 224, "routine_state_prep": 224, "routine_1": 224, "6342729230030804": 224, "4704648815911838": 224, "6844812255244013": 224, "487191873183133": 224, "47896889032922707": 224, "3656138415645163": 224, "2594991247020926": 224, "addresses_count": 224, "mutliplexor": 224, "iordani": 224, "anupam": 224, "8th": 224, "innov": 224, "theoret": [224, 268], "confer": 224, "itc": 224, "2017": [224, 236], "schloss": 224, "dagstuhl": 224, "leibniz": 224, "zentrum": 224, "fuer": 224, "informatik": 224, "include_lock": [225, 244], "cz": 225, "my_cnot_implement": 225, "submatric": [225, 244], "footprint": 225, "gate_signatur": 225, "clear_gate_set": 225, "default_g": 225, "_spec": [225, 288, 291, 295], "happen": [225, 244, 247, 248, 252], "link_gat": 225, "link_matric": 225, "set_gate_set": 225, "avbe96": 226, "reg_siz": [226, 227, 228, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241], "modulo": [226, 228, 229, 233, 235, 237, 238, 239, 240], "add_const_mod": [226, 231], "crash": [226, 347], "modular": 226, "add_mod": 226, "modular_exp": 226, "exponanti": 226, "mult_const_mod": [226, 229], "mult_const": [226, 236], "vlatko": [226, 232], "vedral": [226, 232], "adriano": [226, 232], "barenco": [226, 232], "artur": [226, 232], "ekert": [226, 232], "elementari": [226, 232], "phy": [226, 232, 319, 321, 322], "rev": [226, 232, 319, 321, 322], "147": [226, 232], "153": [226, 232], "jul": [226, 232], "1996": [226, 232], "doi": [226, 232, 236], "physreva": [226, 232], "modulu": [227, 228, 229, 231], "textrm": [227, 229, 231], "mod": [227, 228, 229, 231], "add_const": [227, 228, 230, 232, 236], "reg_control_s": 229, "acc_siz": [229, 230, 231], "shor": 229, "phase_reg": 229, "3720": 229, "8988": 229, "1472": 229, "128": 229, "384": 229, "gate_s": 229, "14853": 229, "expon": 229, "accumul": [229, 230, 231, 291], "euclid": 229, "coprim": 229, "cvbe96": [232, 234], "cttk09": [232, 233], "ccdkm04": [232, 235], "cuccaro_add": [232, 233], "cuccaro": 232, "steven": 232, "thoma": 232, "draper": 232, "samuel": 232, "kutin": 232, "david": 232, "petri": 232, "moulton": 232, "arxiv": [232, 269, 301, 319, 362], "quant": [232, 269, 319], "0410184": 232, "48550": 232, "yasuhiro": 232, "takahashi": 232, "seiichiro": 232, "tani": 232, "noboru": 232, "kunihiro": 232, "unbound": 232, "fan": 232, "2009": 232, "0910": 232, "2530": 232, "reg_size_2": [233, 235, 237, 239, 240], "7n": 233, "2n": [233, 235], "5n": 233, "6n": 235, "4n": 235, "rpge17": 236, "const": 236, "lidia": 236, "ruiz": 236, "perez": 236, "juan": 236, "carlo": [236, 260, 264, 265, 267, 268, 280, 284], "garcia": 236, "escartin": 236, "april": [236, 347], "1007": 236, "s11128": 236, "017": 236, "1603": 236, "res_reg_s": 239, "psi_": 241, "xk": 241, "abstract_g": 242, "member": 242, "ctrlbit": 244, "gate1": 244, "gate2": 244, "get_free_ancilla": [244, 255], "class_nam": [244, 255], "destroi": 244, "usabl": 244, "var_nam": [244, 296], "class_typ": 244, "qblist": 244, "cblist": 244, "do_link": 244, "comparison_ep": 244, "box_routin": 244, "untouch": 244, "demand": 244, "indentif": 244, "correspondig": 244, "systemat": [244, 279], "infer": [244, 304, 347, 374], "operand": [245, 249], "reverse_bit_ord": [245, 252], "substract": [245, 347], "qbool_arrai": [247, 248], "cl": 247, "qbits_list": [247, 248, 249, 250, 252, 253], "implicitli": [249, 336], "toward": 249, "and_formula": 249, "got": 249, "similarili": 251, "love": 251, "my_funct": [251, 289], "some_random_point": 251, "qlm_obj": 251, "5990926273701844": 251, "02829250004598799": 251, "uniti": 252, "xore": 252, "everytim": 254, "bell_stat": 254, "h_rz": 254, "\u03c0": 254, "rx_rz": 254, "angles_0": 254, "angles_1": 254, "avoir": 254, "yet": 254, "notion": 255, "routop_l": 255, "max_wir": 255, "inbound": 255, "repeatedli": 255, "bl": 255, "unus": 255, "freed_ancilla": 255, "additin": 255, "tag": 255, "contruct": 255, "boolexpr": 258, "themselv": 258, "mwi": [258, 263, 266, 281, 347], "bilp": 258, "graphcolour": [258, 281, 370], "graphpartit": [258, 357, 367], "maxcut": [258, 266, 279, 347, 359, 363, 366], "numberpartit": [258, 266, 279, 360], "vertexcov": [258, 278, 281, 361, 369, 377], "mixingfactori": [258, 363], "mix": [258, 263, 266, 269, 270, 271, 279, 281, 282, 304, 352, 363], "circuitgener": [258, 263, 266, 281, 362, 365], "schedule_gener": 258, "schedulegener": 258, "vsolv": [258, 261, 263, 266, 279, 281], "ansatzfactori": [258, 362], "regroup": [259, 314], "qaoa_circuit": 259, "to_circ_arg": [259, 261, 263, 266, 279, 281], "line_ob": 259, "add_term": 259, "ansatz_with_cnot": 259, "ansatz_with_rzz": 259, "121": 259, "67": 259, "synthesi": [259, 362], "influenc": [259, 306, 374], "insert_in": 259, "slic": 259, "elif": 259, "ansatz_default": 259, "ansatz_color": 259, "color": [259, 261, 263, 266, 279, 281, 295], "gray_synth": 259, "cnot_count": 259, "ansatz_gray_synth": 259, "grai": 259, "synth": 259, "techniqu": [259, 301, 355, 364, 374], "ami": 259, "graysynth": 259, "synthes": [259, 261, 263, 266, 279, 281], "onlt": 259, "maximis": 260, "obei": [260, 356], "produce_q_and_offset": [260, 264, 267, 284], "gg": [260, 304, 374], "luca": [260, 264, 265, 267, 280, 284], "2014": [260, 264, 265, 267, 280, 284, 362], "bilp_problem": 260, "get_best_paramet": [260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 357, 358, 359, 360, 361], "n_monte_carlo_upd": [260, 264, 265, 267, 268, 280, 284], "mont": [260, 264, 265, 267, 268, 280, 284], "n_trotter": [260, 264, 265, 267, 268, 280, 284], "replica": [260, 264, 265, 267, 268, 280, 284], "gamma_max": [260, 264, 265, 267, 268, 280, 284], "gamma_min": [260, 264, 265, 267, 268, 280, 284], "temp_max": [260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "temp_min": [260, 264, 265, 266, 267, 268, 279, 280, 281, 284, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "binary_linear_integer_program": 260, "obs_typ": [261, 263, 266, 279, 281, 282], "qaoa_job": [261, 263, 266, 279, 281, 365], "miss": [261, 263, 266, 279, 281, 291, 347], "get_qaoa_gate_set": [261, 263, 266, 279, 281], "my_plugin": [261, 263, 266, 279, 281], "greedi": [261, 263, 266, 279, 281, 295], "and_claus": 262, "or_claus": 262, "xor_claus": 262, "neg_claus": 262, "subclaus": 262, "get_terms_ob": [262, 283], "induct": 262, "wedg": 262, "vee": 262, "oplu": 262, "negat": 262, "myproblem": 263, "var1": 263, "var2": 263, "125": 263, "aqo_job": [263, 266, 271, 272, 273, 279, 281, 282, 363], "interpol": [263, 266, 279, 281, 282], "decode_rydberg": [263, 266, 279, 281, 364], "lattic": [263, 266, 279, 281, 355], "decode_rydberg_meta_data": [263, 266, 279, 281], "w_": [263, 364], "nbvar": 263, "ryd_job": [263, 266, 279, 281, 364], "time_budget_sec": [263, 266, 279, 281], "overhead": [263, 266, 279, 281], "budget": [263, 266, 279, 281], "sqa_job": [263, 266, 279, 281], "aneal": [263, 281], "gamma": [263, 266, 279, 281, 302, 338, 362], "to_bqm": [263, 266, 279, 281, 377], "dwave": [263, 266, 279, 281, 377], "dimod": [263, 266, 279, 281, 377], "binaryquadraticmodel": [263, 266, 279, 281], "rydberg": [263, 266, 279, 281, 355, 364, 365], "add_nodes_from": [264, 265, 267, 284, 357, 358, 361, 364, 368, 370, 377], "arang": [264, 265, 267, 284, 357, 358, 361, 368, 370, 377], "add_edges_from": [264, 265, 267, 284, 357, 358, 361, 364, 368, 370, 377], "graph_colouring_problem": 264, "parse_result": [264, 265, 267, 268, 284], "thatrepres": 264, "graph_colour": 264, "produce_j_h_and_offset": [265, 268, 280], "graph_partitioning_problem": [265, 357], "balanc": 265, "graph_partit": 265, "e_i": [266, 308], "child": [266, 269, 279, 281], "get_j_h_and_offset": [266, 279], "k_clique_problem": 267, "k_cliqu": 267, "bigger": [267, 284, 291], "wikipedia": [268, 302], "full_rary_tre": [268, 359, 365, 366, 367, 369], "256": 268, "max_cut": 268, "initialstatebuild": [269, 270, 271], "bit_flip": 269, "restrict_to": 269, "h_0": [269, 362, 363], "simpleinitialst": [269, 270], "bit_mov": [269, 363], "hamming_weight": 269, "tmax_psi_0": 269, "move": [269, 363], "ham": [269, 289, 363], "equi": 269, "argu": 269, "cfgg00": 269, "gap": 269, "entail": [269, 291], "polynomi": 269, "scalabl": 269, "inexact": 269, "70": 269, "independentaqo": [269, 270], "andrew": 269, "edward": [269, 362], "farhi": [269, 362], "jeffrei": [269, 362], "goldston": [269, 362], "sam": [269, 362], "gutmann": [269, 362], "preprint": 269, "0012104": 269, "2000": 269, "prepend": [270, 271, 272], "start_ham": 271, "end_ham": 271, "true_psi_0": 271, "inject_initial_st": [271, 272, 273], "inject": 272, "setup": 272, "score": 275, "truthi": 275, "falsi": 275, "with_figur": [276, 277, 278], "figsiz": [276, 277, 278], "node_s": [276, 277, 278], "300": [276, 277, 278, 287, 300], "font_siz": [276, 277, 278], "draw_networkx": [276, 277, 278], "matplotlib": [276, 277, 278], "pyplot": [276, 277, 278], "font": [276, 277, 278], "disk": 279, "sum_v": [279, 347], "omega_v": [279, 347], "sigma_v": [279, 347], "delta_v": [279, 347], "n_v": [279, 347], "n_w": [279, 347], "rabi": [279, 347], "detun": [279, 347], "n_u": 279, "vertic": [279, 356, 361, 369, 370], "why": 279, "array_of_numb": 280, "array_of_numbers_s": 280, "randint": [280, 360], "number_partitioning_problem": [280, 360], "4524": 280, "numbers_arrai": 280, "number_partit": 280, "e_q": 281, "get_q_and_offset": 281, "singleton": 283, "vertex_cover_problem": [284, 361, 377], "vertex_cov": 284, "circuitinlin": 285, "costfunctionplugin": 285, "psominimizeplugin": 285, "swarm": [285, 297], "pso": [285, 297], "spsaminimizeplugin": 285, "simultan": [285, 302], "spsa": [285, 302], "adaptvqeplugin": [285, 347, 374], "gradientdescentoptim": [285, 374], "descent": [285, 292, 374], "transformobserv": 285, "zeronoiseextrapol": [285, 374], "extrapol": [285, 304, 347, 371, 374], "edit": [286, 306], "prost": 286, "operator_pool": 287, "n_iter": [287, 374], "tol_vanishing_grad": 287, "tau_k": 287, "theta_k": 287, "grimslei": 287, "antihermitian": 287, "inplac": 288, "qat_circ": 288, "fly": 288, "worst": 288, "perfom": 288, "weigth": 289, "cost_funct": 289, "job_fixed_angl": 289, "result_fixed_angl": 289, "8e": 289, "9e": 289, "3e": 289, "is_result_argu": 289, "7e": 289, "use_result": 289, "next": 290, "press": 290, "algebra": [291, 305, 306, 307, 347, 372], "supremaci": 291, "dens": [291, 344, 347], "degrad": 291, "qbits_compilation_threshold": [291, 347], "strat_arg": 291, "eager": [291, 347], "predecessor": 291, "random_circuit": 291, "stack_default": 291, "stack_improv": 291, "80": 291, "perf_count": 291, "9564929828047752": 291, "9164222390390933": 291, "lambda_step": 292, "natural_gradi": [292, 374], "stop_crit": 292, "grad_norm": 292, "user_custom_g": 292, "eta": [292, 374], "nabla": [292, 374], "metric": [292, 374], "g_": 292, "bigg": 292, "criterion": 292, "energy_dist": 292, "toler": [292, 315, 325, 326, 327, 328], "randomli": [292, 302], "saemlessli": 293, "qlm_object": 293, "initial_object": 293, "n_run": 294, "duplic": 294, "upstream": 294, "splitting_method": 295, "x_basis_chang": 295, "y_basis_chang": 295, "clifford": 295, "todai": 295, "coincid": 295, "binding_kwarg": 296, "particul": 296, "variablenam": 296, "fetch": 296, "hood": 296, "triplet": 296, "binding_arg": [297, 300, 302], "choose_inertia_funct": 297, "inertia": 297, "linearly_decreas": 297, "chaotic_random": 297, "name_method_us": 297, "clpso": 297, "fdr_pso": 297, "lip": 297, "hpso_tvac": 297, "max_it": 297, "swarm_numb": 297, "size_initial_vector_spac": 297, "hypercub": 297, "inertia_kwarg": 297, "inertia_funct": 297, "inertia_weight": 297, "univers": [298, 346], "compliant": 298, "lnn_topologi": 298, "initil": 300, "set_opt": 300, "my_job": [300, 347], "rotosolv": 301, "nakanishi": [301, 374], "1903": 301, "12166": 301, "2020": [301, 374], "ostaszewski": [301, 374], "1905": 301, "09692": 301, "leverag": [301, 374], "belong": [301, 356], "converg": [301, 362], "602": 302, "101": 302, "stop_condit": 302, "evalut": 302, "a_calibr": 302, "n_calibr": 302, "en": 302, "wiki": 302, "simultaneous_perturbation_stochastic_approxim": 302, "cf": [303, 307], "n_in": 304, "extrap_g": 304, "extrap_method": 304, "decomposit": 304, "occurr": [304, 347], "rho_": [304, 321, 322], "strength": 304, "propto": 304, "ins": 304, "an_": [304, 374], "shown": [304, 356, 366, 367, 368, 369, 370], "Be": [304, 314], "correctli": [304, 347], "classicalqpu": 305, "get_current_qpu": 305, "use_nbthreads_heurist": 306, "light_circuit": 306, "tqdm": 306, "readonly_statevector": 306, "omp_num_thread": 306, "progress": 306, "sens": 306, "throught": [306, 351, 352], "resiz": 306, "intuit": 306, "i_0i_1i_2i_3": 306, "i_3i_2i_1i_0": 306, "statevectorcpudoubl": 306, "apply_1qbit_ctrl_g": 306, "ctrl_qubit": 306, "apply_1qbit_g": 306, "apply_2qbit_ctrl_g": 306, "qubit1": 306, "qubit2": 306, "apply_2qbit_g": 306, "apply_ccnot": 306, "qubit3": 306, "apply_cnot": 306, "apply_csign": 306, "apply_h": 306, "qbits_c": 306, "apply_iswap": 306, "apply_ph": 306, "apply_rx": 306, "apply_ri": 306, "apply_rz": 306, "apply_": 306, "apply_sqrtswap": 306, "apply_swap": 306, "apply_t": 306, "apply_x": 306, "apply_i": 306, "apply_z": 306, "apply_nqbit_ctrl_g": 306, "apply_nqbit_g": 306, "rightmost": 306, "array_readonli": 306, "readonli": 306, "expectation_valu": 306, "wobserv": 306, "wobservabledoubl": 306, "get_distribut": 306, "float64": 306, "margin": 306, "valuabl": 306, "get_mapped_distribut": 306, "mapintdoubl": 306, "get_mapped_statevector": 306, "get_permuted_statevector": 306, "complex128": 306, "project_then_reset": 306, "mapintint": 306, "sample_subset": 306, "set_num_thread": 306, "nbthread": 306, "simulate_circuit": 306, "wcircuit": 306, "pblinalg": 306, "pybindlinalgwcircuit": 306, "lightweight": 306, "protocol": [307, 312], "imbric": 307, "temp_t": [308, 357, 358, 359, 360, 361, 366, 367, 368, 369, 370], "temp": 308, "simulated_ann": [308, 357, 358, 359, 360, 361], "extract_j_and_h_from_ob": 308, "s_i": [308, 364], "s_j": [308, 364], "1111111111": 309, "push": 310, "muqlm": 311, "mininm": 312, "apply_resource_consumption_limit": 312, "allocation_model": 312, "subclass": 312, "estimate_resources_for_batch": 312, "adjunct": 313, "goe": [313, 343, 345], "forward": 313, "extern": 314, "parametricgatenois": 314, "quantumchannelchi": [314, 344], "chi": [314, 316, 342, 343, 344, 345], "quantumchannelchoi": [314, 344, 345], "choi": [314, 316, 319, 320, 321, 322, 343, 344, 345], "jamiolkowski": [314, 322, 343], "quantumchannelptm": [314, 326, 343, 344], "ptm": [314, 316, 319, 320, 321, 322, 343, 344, 345], "to_chi": [314, 344], "exposit": 314, "is_completely_posit": 314, "is_trace_preserv": 314, "is_trace_reduc": 314, "is_unit": 314, "make_avg_fid_equiv_depol_channel": 314, "make_generalized_amplitude_damp": 314, "damp": [314, 331, 336], "parametricamplitudedamp": 314, "parametricpuredephas": 314, "dephas": [314, 338], "distanc": [314, 322, 324, 374], "fidel": [314, 319, 321, 323, 329], "get_average_process_fidel": 314, "get_diamond_norm": 314, "diamond": [314, 320], "get_entanglement_process_fidel": 314, "get_process_dist": 314, "get_state_fidel": [314, 319, 321], "get_trace_dist": [314, 322], "math_util": 314, "convert_density_mat_to_pauli_vec": 314, "convert_pauli_vec_to_density_mat": 314, "make_pauli_matrix_basi": 314, "make_standard_matrix_basi": 314, "make_standard_vector_basi": 314, "are_equal_up_to_phas": 314, "multikron": 314, "kroneck": [314, 335, 344], "partial_trac": 314, "07": [315, 347], "stinespr": 316, "pauli_vec": 318, "chan1": [319, 321, 322, 344], "chan2": [319, 321, 322, 344], "use_formula": 319, "av": [319, 329], "71": [319, 321, 322], "062310": [319, 321, 322], "gilchrist": 319, "0408063": 319, "vfidel": 319, "hilebrt": 319, "schmidt": 319, "qchan": 320, "ep": 320, "06": 320, "aka": 320, "accuraci": 320, "cp": 320, "use_choi": 321, "ent": 321, "rho_i": 321, "pro": [321, 322], "rho1": [323, 324], "rho2": [323, 324], "eqnarrai": 323, "rho_1": [323, 324], "rho_2": [323, 324], "cdot": 324, "08": [326, 327, 328], "quantumchannekrau": 326, "e_k": [327, 344], "sum_k": 327, "rb_ep": 329, "method_2q": [329, 330], "tensor_1q_channel": [329, 330], "epsilon_": 329, "rb": 329, "depol": [329, 330], "015": 329, "99247166": 329, "07071068": 329, "07071068j": 329, "k_0": 330, "k_2": 330, "k_3": 330, "k_j": 330, "rbrace_": [330, 344], "equal_prob": 330, "p_i": 330, "17320508": 330, "17320508j": 330, "03333333": 330, "03333333j": 330, "lamb": 331, "i_2": 332, "ldot": [332, 340], "i_n": 332, "huge": [333, 334], "mat_list": 335, "a_1": [335, 340], "a_n": [335, 340], "t_1": 336, "langle0": 336, "langle1": 336, "relax": 336, "white": [336, 338, 364], "tau": [336, 338], "amplitudedamp": 336, "81873075": 336, "57417763": 336, "noise_channel": 337, "t_phi": 338, "spectral_funct": 338, "variant": 338, "int_": 338, "infti": 338, "omega": 338, "cotanh": 338, "analyt": 338, "varphi": 338, "w_c": 338, "w_ir": 338, "noise_spectrum": 338, "ohmic": 338, "pd": 338, "9138709": 338, "4060049": 338, "ptild": 338, "schema": [339, 341], "axis1": 340, "axis2": 340, "traced_out_subspac": 340, "a_2": 340, "a_i": 340, "d_i": 340, "i_m": 340, "tr_": 340, "j_1": 340, "d_1": 340, "d_n": 340, "apply_to": [341, 342, 344, 345], "kraus_rank": [341, 344], "matrix_basi": [342, 344], "boldsymbol": [342, 343, 345], "chi_": 342, "to_krau": [342, 343, 345], "to_ptm": [343, 344], "kraus_oper": 344, "check_trace_preserv": 344, "check_trace_reduc": 344, "p1": 344, "p2": 344, "ey": 344, "chan3": 344, "82462113": 344, "34641016": 344, "41231056": 344, "density_matrix": [344, 345], "old_method": 344, "n_thread": 344, "repr": 344, "apply_to_vector": 344, "full_kroneck": 344, "rank": 344, "to_choi": [344, 345], "clone": 346, "github": [346, 347, 348, 371], "repositori": 346, "mybind": 346, "web": 346, "browser": 346, "binder": [346, 347, 350, 351, 352, 353], "beginn": 346, "h2": 346, "ucc": [346, 347, 371, 372, 373, 375], "lih": [346, 373], "multiplelaunchesplugin": 346, "avala": 346, "assembli": 346, "quick": 346, "splitter": 346, "epr": 346, "analyz": 346, "octob": 347, "dist": 347, "sepemb": 347, "dll": 347, "typo": 347, "juli": 347, "contrib": 347, "anapli": 347, "qlmaa": 347, "disc": 347, "rydber": 347, "circular_ladder_graph": 347, "pbm": [347, 364], "disabl": 347, "longer": 347, "brq": 347, "1654": 347, "startegi": 347, "thant": 347, "1571": 347, "februari": 347, "major": [347, 376], "os": 347, "glibc": 347, "rhel": 347, "focus": [347, 364], "older": 347, "decemb": 347, "2023": 347, "novemb": 347, "colab": 347, "dill": 347, "touch": 347, "septemb": 347, "bug": [347, 348], "august": 347, "docstr": 347, "restructur": 347, "highlight": 347, "ticket": [347, 348], "1487": 347, "redesign": 347, "much": [347, 372], "1482": 347, "html": 347, "1485": 347, "1490": 347, "1492": 347, "symengin": 347, "ration": 347, "mainten": [347, 375], "unexpect": 347, "behaviour": [347, 374], "greater": [347, 362], "modulenotfounderror": 347, "jaxlib": 347, "deprecationwarn": 347, "layout_bas": 347, "pillow": 347, "layout": 347, "getsiz": 347, "getbbox": 347, "getlength": 347, "suppress": 347, "nowarn": 347, "directori": 347, "mayb": 347, "ipython_dir": 347, "home": 347, "profile_default": 347, "startup": 347, "simplefilt": 347, "action": 347, "futurewarn": 347, "restart": 347, "chines": 347, "qiksit": 347, "throw": 347, "cleaner": 347, "u2": 347, "u3": 347, "june": 347, "nnizer": 347, "remote_stack": 347, "async_result": [347, 350], "join": [347, 348], "stdout": 347, "multivari": 347, "prakashqram": 347, "sigsegv": 347, "question": 348, "slack": 348, "ye": 349, "your_qiskit_circuit": 350, "your_qlm_circuit": [350, 351], "credenti": 350, "save_account": 350, "qiskit_ibm_runtim": 350, "my_ibm_token": 350, "ibm_quantum": 350, "ibmq_armonk": 350, "async_qpu": 350, "sleep": 350, "qiskit_result": 350, "warn": 351, "vers": 351, "your_pyquil_circuit": 351, "pyquil_circuit": 351, "qvm": 351, "15011": 351, "get_qc": 351, "qcs_settings_applications_pyquil_qvm_url": 351, "9q": 351, "qlm_circ": 352, "your_google_circ": 352, "google_circ": 352, "your_qlm_circ": 352, "linequbit": 352, "gridqubit": 352, "cengin": 353, "mainengin": 353, "aq": 353, "eng": 353, "engine_list": 353, "allocate_qureg": 353, "recov": 353, "script": 354, "qasm": 354, "bash": 354, "oqasm2circ": 354, "bell_data": 354, "cx": 354, "flawlessli": 354, "haven": 354, "hint": [355, 356], "seamless": [355, 376], "criteria": 356, "orient": [356, 376], "record": 356, "although": 356, "planar": 356, "gset": 356, "dataset": 356, "sec": 356, "leighton": 356, "dimac": 356, "88": 356, "95": 356, "99": 356, "subgraph": [356, 357, 358, 359, 366, 367, 368, 369], "bhoslib": 356, "450": 356, "4000": 356, "oei": 356, "instantli": 356, "impos": [357, 358, 361, 377], "problem_parameters_dict": [357, 358, 359, 360, 361], "sa_qpu": [357, 358, 359, 360, 361], "problem_job": [357, 358, 359, 360, 361], "problem_result": [357, 358, 359, 360, 361], "indices_spin_1": [357, 358, 359, 360, 361], "indices_spin_minus_1": [357, 359, 360], "kclique_problem": 358, "max_cut_problem": 359, "numbers_set": 360, "spin_1_subset": 360, "spin_minus_1_subset": 360, "smallest": [361, 369], "ramp": 362, "h_c": [362, 363], "propag": 362, "r_x": 362, "slow": 362, "fgg14": 362, "1411": 362, "4028": 362, "slowli": 363, "erdos_renyi_graph": 363, "hamitonian": 363, "weightiest": 364, "ancillari": 364, "triangular": 364, "draw": 364, "with_label": 364, "gadget": 364, "mi": 364, "decod": 364, "tqx": 364, "exploit": 364, "w_i": 364, "mimimum": 364, "combintori": 365, "max_cut_appl": [365, 366], "combinatorial_result": [365, 366, 367, 368, 369, 370], "scipy_arg": [366, 367, 368, 369, 370], "sqa_best_paramet": [366, 367, 368, 369, 370], "sqa_best_parameters_dict": [366, 367, 368, 369, 370], "5000": [366, 367, 368, 369, 370], "max_cut_gener": 366, "aqo_batch": [366, 367, 368, 369, 370], "graph_partitioning_appl": 367, "graph_partitioning_gener": 367, "kclique_appl": 368, "kclique_gener": 368, "vertex_cover_appl": 369, "vertex_cover_gener": 369, "nn": 370, "graph_colouring_appl": 370, "graph_colouring_gener": 370, "revamp": 371, "dq": 371, "changelog": 371, "spind": 371, "migrat": 371, "z_": 372, "y_": 372, "h_elec": 372, "htype": 372, "bare": 372, "5j": 372, "h_fermion": 372, "h_spin": 372, "825": 372, "175": 372, "h_fermion1": 372, "h_fermion2": 372, "h_spin1": 372, "h_spin2": 372, "fermion_comutator_matrix": 372, "spin_comutator_matrix": 372, "is_equal_sign": 372, "toi": 372, "strong": 372, "flagship": 373, "hamiltonian_sp": 373, "exact_energi": 373, "eigh": 373, "nenergi": 373, "ntheta": 373, "9999999974320526": 373, "1416940034276815": 373, "2147911128415545": 373, "chemist": 373, "h_2": 373, "thorough": 373, "whatev": 373, "sake": [373, 374], "31g": 373, "9071609330057144": 373, "basis_chang": 373, "mol_h_new_basi": 373, "proce": 373, "mol_h_act": 373, "002": 373, "bring": 373, "eight": 373, "eigenvector": 373, "nqbits_phas": 373, "guess_energi": 373, "1403": 373, "002343750000000089": 373, "earlier": [373, 374], "said": 374, "slower": 374, "cluster_oper": 374, "harre": 374, "hf_init": 374, "char": 374, "adaptvqe_plugin": 374, "theta_init": 374, "1372701679264894": 374, "1372701679265027": 374, "sgd": 374, "adam": 374, "euclidean": 374, "baseless": 374, "fisher": 374, "steepest": 374, "fubini": 374, "devis": 374, "theta_0": 374, "theta_1": 374, "theta_2": 374, "theta_3": 374, "theta_4": 374, "natgrad_opt": 374, "learning_paramet": 374, "8660254037652464": 374, "ic": 374, "outperform": 374, "whch": 374, "regim": 374, "artifici": 374, "2n_": 374, "faulti": 374, "boil": 374, "fold": 374, "endo": 374, "rangle_": 374, "richardson": 374, "giurgica": 374, "tiron": 374, "unclear": 374, "varianc": 374, "qchem": 375, "renam": 375, "fermionic_util": 375, "exact_eigen_energi": 375, "fermionic_hamiltonian_exponenti": 375, "reloc": 375, "ansatz_circuit": 375, "build_ucc_ansatz": 375, "ucc_deprec": 375, "get_initial_params_and_cluster_op": 375, "mollet": 375, "select_excitation_oper": 375, "get_active_space_hamiltonian": 375, "versatil": 376, "demo": 376, "achiv": 377, "316": 377, "bqm_problem": 377}, "objects": {"": [[45, 0, 0, "-", "qat"]], "qat.clinalg.wrapper": [[306, 1, 1, "", "StateVectorCPUDouble"]], "qat.clinalg.wrapper.StateVectorCPUDouble": [[306, 2, 1, "", "apply_1qbit_ctrl_gate"], [306, 2, 1, "", "apply_1qbit_gate"], [306, 2, 1, "", "apply_2qbit_ctrl_gate"], [306, 2, 1, "", "apply_2qbit_gate"], [306, 2, 1, "", "apply_CCNOT"], [306, 2, 1, "", "apply_CNOT"], [306, 2, 1, "", "apply_CSIGN"], [306, 2, 1, "", "apply_H"], [306, 2, 1, "", "apply_ISWAP"], [306, 2, 1, "", "apply_PH"], [306, 2, 1, "", "apply_RX"], [306, 2, 1, "", "apply_RY"], [306, 2, 1, "", "apply_RZ"], [306, 2, 1, "", "apply_S"], [306, 2, 1, "", "apply_SQRTSWAP"], [306, 2, 1, "", "apply_SWAP"], [306, 2, 1, "", "apply_T"], [306, 2, 1, "", "apply_X"], [306, 2, 1, "", "apply_Y"], [306, 2, 1, "", "apply_Z"], [306, 2, 1, "", "apply_nqbit_ctrl_gate"], [306, 2, 1, "", "apply_nqbit_gate"], [306, 3, 1, "", "array"], [306, 3, 1, "", "array_readonly"], [306, 2, 1, "", "expectation_value"], [306, 2, 1, "", "get_distribution"], [306, 2, 1, "", "get_mapped_distribution"], [306, 2, 1, "", "get_mapped_statevector"], [306, 2, 1, "", "get_permuted_statevector"], [306, 2, 1, "", "measure"], [306, 2, 1, "", "print"], [306, 2, 1, "", "probability"], [306, 2, 1, "", "project"], [306, 2, 1, "", "project_then_reset"], [306, 2, 1, "", "sample"], [306, 2, 1, "", "sample_subset"], [306, 2, 1, "", "set_num_threads"], [306, 2, 1, "", "simulate_circuit"]], "qat": [[75, 0, 0, "-", "comm"], [91, 0, 0, "-", "core"], [148, 0, 0, "-", "devices"], [164, 0, 0, "-", "fermion"], [194, 0, 0, "-", "fusion"], [198, 0, 0, "-", "generators"], [207, 0, 0, "-", "hardware"], [46, 0, 0, "-", "interop"], [213, 0, 0, "-", "lang"], [258, 0, 0, "-", "opt"], [285, 0, 0, "-", "plugins"], [67, 0, 0, "-", "pylinalg"], [305, 0, 0, "-", "qpus"], [314, 0, 0, "-", "quops"]], "qat.comm": [[76, 0, 0, "-", "datamodel"], [79, 0, 0, "-", "exceptions"], [83, 0, 0, "-", "resource"], [88, 0, 0, "-", "shared"]], "qat.comm.datamodel.ttypes": [[77, 1, 1, "", "GateDefinition"], [78, 1, 1, "", "Op"]], "qat.comm.exceptions.ttypes": [[80, 1, 1, "", "ErrorType"], [81, 1, 1, "", "PluginException"], [82, 1, 1, "", "QPUException"]], "qat.comm.resource.ttypes": [[84, 1, 1, "", "AllocationModel"], [85, 1, 1, "", "Device"], [86, 1, 1, "", "NodeType"], [87, 1, 1, "", "ResourceModel"]], "qat.comm.shared.ttypes": [[89, 1, 1, "", "IntermediateMeasurement"], [90, 1, 1, "", "ProcessingType"]], "qat.core": [[95, 1, 1, "", "Batch"], [96, 1, 1, "", "BatchResult"], [97, 1, 1, "", "Circuit"], [100, 1, 1, "", "HardwareSpecs"], [101, 1, 1, "", "Job"], [136, 1, 1, "", "Observable"], [137, 1, 1, "", "Parameter"], [139, 1, 1, "", "Result"], [140, 1, 1, "", "Sample"], [141, 1, 1, "", "Schedule"], [143, 1, 1, "", "Term"], [144, 1, 1, "", "Topology"], [145, 1, 1, "", "TopologyType"], [146, 1, 1, "", "Variable"], [103, 0, 0, "-", "application"], [106, 0, 0, "-", "circuit_builder"], [111, 0, 0, "-", "gate_set"], [115, 0, 0, "-", "qpu"], [117, 0, 0, "-", "spins"], [120, 0, 0, "-", "variables"]], "qat.core.Batch": [[95, 2, 1, "", "dump"], [95, 2, 1, "", "from_bytes"], [95, 2, 1, "", "from_thrift"], [95, 2, 1, "", "get_variables"], [95, 2, 1, "", "load"], [95, 2, 1, "", "to_cpp"], [95, 2, 1, "", "to_thrift"]], "qat.core.BatchResult": [[96, 2, 1, "", "append"], [96, 2, 1, "", "dump"], [96, 2, 1, "", "extend"], [96, 2, 1, "", "from_thrift"], [96, 2, 1, "", "load"]], "qat.core.Circuit": [[97, 2, 1, "", "bind_variable"], [97, 2, 1, "", "bind_variables"], [97, 2, 1, "", "compile"], [97, 2, 1, "", "count"], [97, 2, 1, "", "dag"], [97, 2, 1, "", "depth"], [97, 2, 1, "", "display"], [97, 2, 1, "", "dump"], [97, 2, 1, "", "empty"], [97, 2, 1, "", "eval"], [97, 2, 1, "", "fill_matrices"], [97, 2, 1, "", "from_bytes"], [97, 2, 1, "", "from_thrift"], [97, 3, 1, "", "gate_set"], [97, 2, 1, "", "get_variables"], [97, 2, 1, "", "insert_gate"], [97, 2, 1, "", "iterate_simple"], [97, 2, 1, "", "load"], [97, 2, 1, "", "remove_locks"], [97, 2, 1, "", "run"], [97, 2, 1, "", "shift_qbits"], [97, 2, 1, "", "statistics"], [97, 2, 1, "", "to_job"]], "qat.core.HardwareSpecs": [[100, 2, 1, "", "as_graph"], [100, 2, 1, "", "as_quameleon"], [100, 2, 1, "", "dump"], [100, 2, 1, "", "from_thrift"], [100, 2, 1, "", "load"], [100, 3, 1, "", "nbqbits"]], "qat.core.Job": [[101, 2, 1, "", "compile"], [101, 2, 1, "", "differentiate"], [101, 2, 1, "", "dump"], [101, 2, 1, "", "eval"], [101, 2, 1, "", "from_bytes"], [101, 2, 1, "", "from_thrift"], [101, 2, 1, "", "get_variables"], [101, 2, 1, "", "gradient"], [101, 2, 1, "", "load"], [101, 3, 1, "", "parameter_map"], [101, 3, 1, "", "psi_0"], [101, 2, 1, "", "run"], [101, 2, 1, "", "shift_qbits"], [101, 3, 1, "", "threshold"], [101, 2, 1, "", "to_cpp"], [101, 2, 1, "", "to_thrift"]], "qat.core.Observable": [[136, 4, 1, "", "constant_coeff"], [136, 2, 1, "", "dump"], [136, 4, 1, "", "ising"], [136, 2, 1, "", "load"], [136, 4, 1, "", "nbqbits"], [136, 4, 1, "", "terms"], [136, 2, 1, "", "to_matrix"]], "qat.core.Parameter": [[137, 3, 1, "", "func"], [137, 2, 1, "", "generate_noise"], [137, 2, 1, "", "get_noise"], [137, 3, 1, "", "psd"]], "qat.core.Result": [[139, 2, 1, "", "add_sample"], [139, 2, 1, "", "display"], [139, 2, 1, "", "dump"], [139, 2, 1, "", "from_bytes"], [139, 2, 1, "", "from_thrift"], [139, 2, 1, "", "load"], [139, 3, 1, "", "parameter_map"], [139, 2, 1, "", "plot"], [139, 2, 1, "", "unpack"], [139, 3, 1, "", "value"], [139, 3, 1, "", "values"], [139, 2, 1, "", "wrap_samples"]], "qat.core.Sample": [[140, 3, 1, "", "amplitude"], [140, 2, 1, "", "from_bytes"], [140, 2, 1, "", "from_thrift"], [140, 2, 1, "", "set_qreg"], [140, 3, 1, "", "state"]], "qat.core.Schedule": [[141, 2, 1, "", "dump"], [141, 2, 1, "", "get_variables"], [141, 2, 1, "", "load"], [141, 2, 1, "", "to_job"]], "qat.core.Term": [[143, 4, 1, "", "coeff"], [143, 4, 1, "", "op"], [143, 4, 1, "", "qbits"]], "qat.core.Topology": [[144, 2, 1, "", "add_edge"], [144, 2, 1, "", "dump"], [144, 2, 1, "", "from_bytes"], [144, 2, 1, "", "from_nx"], [144, 2, 1, "", "from_thrift"], [144, 2, 1, "", "load"], [144, 3, 1, "", "nbqbits"], [144, 2, 1, "", "set_nbqbits"], [144, 2, 1, "", "to_nx"]], "qat.core.Variable": [[146, 2, 1, "", "differentiate"], [146, 2, 1, "", "get_variables"], [146, 2, 1, "", "to_thrift"]], "qat.core.application": [[104, 1, 1, "", "Application"], [105, 1, 1, "", "RemoteApplication"]], "qat.core.application.Application": [[104, 2, 1, "", "execute"], [104, 2, 1, "", "serve"]], "qat.core.assertion": [[93, 5, 1, "", "assert_plugin"], [94, 5, 1, "", "assert_qpu"]], "qat.core.circuit_builder.builder": [[110, 1, 1, "", "VariableNameNotAvailable"]], "qat.core.circuit_builder.matrix_util": [[107, 5, 1, "", "default_gate_set"], [108, 5, 1, "", "get_param_generator"], [109, 5, 1, "", "get_predef_generator"]], "qat.core.console": [[98, 5, 1, "", "display"]], "qat.core.formula_eval": [[99, 5, 1, "", "evaluate"]], "qat.core.gate_set": [[112, 1, 1, "", "GateSet"], [113, 1, 1, "", "GateSignature"], [114, 1, 1, "", "GateSyntaxRedefinition"]], "qat.core.gate_set.GateSet": [[112, 2, 1, "", "add_signature"], [112, 2, 1, "", "union"]], "qat.core.gate_set.GateSignature": [[113, 2, 1, "", "get_circuit"], [113, 2, 1, "", "get_matrix"], [113, 2, 1, "", "set_circuit_generator"], [113, 2, 1, "", "set_matrix_generator"]], "qat.core.printer": [[138, 5, 1, "", "plot_in_notebook"]], "qat.core.qpu": [[116, 1, 1, "", "CommonQPU"]], "qat.core.simutil": [[147, 5, 1, "", "wavefunction"]], "qat.core.spins": [[118, 5, 1, "", "integer_to_spins"], [119, 5, 1, "", "spins_to_integer"]], "qat.core.util": [[102, 5, 1, "", "load_state_vector_from_bin"]], "qat.core.variables": [[123, 1, 1, "", "ArithExpression"], [134, 1, 1, "", "Symbol"], [121, 5, 1, "", "abso"], [122, 5, 1, "", "angle"], [124, 5, 1, "", "atan2"], [125, 5, 1, "", "cos"], [126, 5, 1, "", "exp"], [127, 5, 1, "", "get_item"], [128, 5, 1, "", "heaviside"], [129, 5, 1, "", "imag"], [130, 5, 1, "", "ln"], [131, 5, 1, "", "real"], [132, 5, 1, "", "sin"], [133, 5, 1, "", "sqrt"], [135, 5, 1, "", "vmax"]], "qat.core.variables.ArithExpression": [[123, 2, 1, "", "differentiate"], [123, 2, 1, "", "from_string"], [123, 2, 1, "", "get_variables"], [123, 2, 1, "", "pretty_print"], [123, 2, 1, "", "to_thrift"]], "qat.core.wrappers.result": [[142, 1, 1, "", "State"], [92, 5, 1, "", "aggregate_data"]], "qat.core.wrappers.result.State": [[142, 3, 1, "", "bitstring"], [142, 3, 1, "", "int"], [142, 3, 1, "", "lsb_int"], [142, 3, 1, "", "value"]], "qat.devices": [[149, 1, 1, "", "AllToAll"], [150, 6, 1, "", "GOOGLE_SYCAMORE"], [151, 1, 1, "", "GridDevice"], [152, 6, 1, "", "IBM_BURLINGTON"], [153, 6, 1, "", "IBM_JOHANNESBURG"], [154, 6, 1, "", "IBM_MELBOURNE"], [155, 6, 1, "", "IBM_RUESCHLIKON"], [156, 6, 1, "", "IBM_SINGAPORE"], [157, 6, 1, "", "IBM_TOKYO"], [158, 6, 1, "", "IBM_YORKTOWN"], [159, 1, 1, "", "LineDevice"], [160, 6, 1, "", "RIGETTI_AGAVE"], [161, 6, 1, "", "RIGETTI_ASPEN"], [162, 1, 1, "", "SquareGridDevice"], [163, 6, 1, "", "ZUCHONGZHI"]], "qat.fermion": [[164, 0, 0, "-", "chemistry"], [164, 0, 0, "-", "circuits"], [164, 0, 0, "-", "hamiltonians"], [164, 0, 0, "-", "phase_estimation"], [164, 0, 0, "-", "transforms"]], "qat.fermion.chemistry.pyscf_tools": [[187, 5, 1, "", "perform_pyscf_computation"]], "qat.fermion.chemistry": [[164, 0, 0, "-", "qse"], [164, 0, 0, "-", "ucc"]], "qat.fermion.chemistry.qse": [[165, 5, 1, "", "apply_quantum_subspace_expansion"]], "qat.fermion.chemistry.ucc": [[166, 5, 1, "", "compute_active_space_integrals"], [167, 5, 1, "", "construct_ucc_ansatz"], [168, 5, 1, "", "convert_to_h_integrals"], [171, 5, 1, "", "get_cluster_ops"], [172, 5, 1, "", "get_hf_ket"], [173, 5, 1, "", "guess_init_params"], [188, 5, 1, "", "select_active_orbitals"], [190, 5, 1, "", "transform_integrals_to_new_basis"]], "qat.fermion.chemistry.wrapper": [[184, 1, 1, "", "MolecularHamiltonian"], [185, 1, 1, "", "MoleculeInfo"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[184, 4, 1, "", "constant_coeff"], [184, 2, 1, "", "get_electronic_hamiltonian"], [184, 4, 1, "", "nqbits"], [184, 4, 1, "", "one_body_integrals"], [184, 2, 1, "", "select_active_space"], [184, 2, 1, "", "transform_basis"], [184, 4, 1, "", "two_body_integrals"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[185, 4, 1, "", "constant_coeff"], [185, 4, 1, "", "hamiltonian"], [185, 4, 1, "", "n_electrons"], [185, 4, 1, "", "noons"], [185, 4, 1, "", "nqbits"], [185, 4, 1, "", "one_body_integrals"], [185, 4, 1, "", "orbital_energies"], [185, 2, 1, "", "restrict_active_space"], [185, 4, 1, "", "two_body_integrals"]], "qat.fermion.circuits": [[175, 5, 1, "", "make_compressed_ldca_circ"], [177, 5, 1, "", "make_general_hwe_circ"], [179, 5, 1, "", "make_ldca_circ"], [180, 5, 1, "", "make_mr_circ"], [181, 5, 1, "", "make_mrep_circ"], [182, 5, 1, "", "make_shallow_circ"]], "qat.fermion.hamiltonians": [[169, 1, 1, "", "ElectronicStructureHamiltonian"], [170, 1, 1, "", "FermionHamiltonian"], [189, 1, 1, "", "SpinHamiltonian"], [174, 5, 1, "", "make_anderson_model"], [176, 5, 1, "", "make_embedded_model"], [178, 5, 1, "", "make_hubbard_model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[169, 4, 1, "", "constant_coeff"], [169, 2, 1, "", "copy"], [169, 2, 1, "", "dag"], [169, 2, 1, "", "get_matrix"], [169, 4, 1, "", "hpq"], [169, 4, 1, "", "hpqrs"], [169, 2, 1, "", "to_fermion"], [169, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[170, 4, 1, "", "constant_coeff"], [170, 2, 1, "", "copy"], [170, 2, 1, "", "dag"], [170, 2, 1, "", "get_matrix"], [170, 4, 1, "", "matrix"], [170, 4, 1, "", "nbqbits"], [170, 4, 1, "", "normal_order"], [170, 4, 1, "", "terms"], [170, 2, 1, "", "to_electronic"], [170, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[189, 4, 1, "", "constant_coeff"], [189, 2, 1, "", "copy"], [189, 2, 1, "", "dag"], [189, 2, 1, "", "get_matrix"], [189, 4, 1, "", "matrix"], [189, 4, 1, "", "nbqbits"], [189, 4, 1, "", "terms"]], "qat.fermion.phase_estimation": [[186, 1, 1, "", "perform_phase_estimation"]], "qat.fermion.transforms": [[191, 5, 1, "", "transform_to_bk_basis"], [192, 5, 1, "", "transform_to_jw_basis"], [193, 5, 1, "", "transform_to_parity_basis"]], "qat.fermion.trotterisation": [[183, 5, 1, "", "make_trotterisation_routine"]], "qat.fusion.strategies": [[195, 1, 1, "", "AdjacentStrategy"], [196, 1, 1, "", "EagerStrategy"], [197, 1, 1, "", "NaiveStrategy"]], "qat.generators": [[199, 1, 1, "", "AbstractGenerator"], [200, 1, 1, "", "CombinatorialOptimizerGenerator"], [201, 1, 1, "", "GraphColouringGenerator"], [202, 1, 1, "", "GraphPartitioningGenerator"], [203, 1, 1, "", "KCliqueGenerator"], [204, 1, 1, "", "MaxCutGenerator"], [205, 1, 1, "", "RemoteBatchGenerator"], [206, 1, 1, "", "VertexCoverGenerator"]], "qat.generators.AbstractGenerator": [[199, 2, 1, "", "generate"], [199, 2, 1, "", "serve"], [199, 2, 1, "", "wrapper_post_process"]], "qat.generators.CombinatorialOptimizerGenerator": [[200, 2, 1, "", "generate"], [200, 2, 1, "", "post_process"]], "qat.generators.GraphColouringGenerator": [[201, 2, 1, "", "generate"]], "qat.generators.GraphPartitioningGenerator": [[202, 2, 1, "", "generate"]], "qat.generators.KCliqueGenerator": [[203, 2, 1, "", "generate"]], "qat.generators.MaxCutGenerator": [[204, 2, 1, "", "generate"]], "qat.generators.RemoteBatchGenerator": [[205, 2, 1, "", "generate"], [205, 2, 1, "", "post_process"]], "qat.generators.VertexCoverGenerator": [[206, 2, 1, "", "generate"]], "qat.hardware": [[208, 1, 1, "", "DefaultGatesSpecification"], [209, 1, 1, "", "DefaultHardwareModel"], [210, 1, 1, "", "GatesSpecification"], [211, 1, 1, "", "HardwareModel"], [212, 5, 1, "", "make_depolarizing_hardware_model"]], "qat.hardware.DefaultGatesSpecification": [[208, 4, 1, "", "gate_times"], [208, 2, 1, "", "get_gate_time"], [208, 2, 1, "", "get_quantum_channel"], [208, 4, 1, "", "meas"], [208, 4, 1, "", "quantum_channels"], [208, 4, 1, "", "state_prep"]], "qat.hardware.DefaultHardwareModel": [[209, 2, 1, "", "cleanup_jump_operators"], [209, 4, 1, "", "gate_noise"], [209, 4, 1, "", "gates_specification"], [209, 4, 1, "", "idle_noise"], [209, 4, 1, "", "jump_operators"], [209, 4, 1, "", "params_specification"], [209, 2, 1, "", "shift_jump_operators"]], "qat.hardware.GatesSpecification": [[210, 4, 1, "", "gate_times"], [210, 2, 1, "", "get_gate_time"], [210, 2, 1, "", "get_quantum_channel"], [210, 4, 1, "", "meas"], [210, 4, 1, "", "quantum_channels"], [210, 4, 1, "", "state_prep"]], "qat.hardware.HardwareModel": [[211, 2, 1, "", "cleanup_jump_operators"], [211, 4, 1, "", "gate_noise"], [211, 4, 1, "", "gates_specification"], [211, 4, 1, "", "idle_noise"], [211, 4, 1, "", "jump_operators"], [211, 4, 1, "", "params_specification"], [211, 2, 1, "", "shift_jump_operators"]], "qat.interop": [[47, 0, 0, "-", "cirq"], [50, 0, 0, "-", "openqasm"], [52, 0, 0, "-", "projectq"], [55, 0, 0, "-", "pyquil"], [59, 0, 0, "-", "qiskit"]], "qat.interop.cirq": [[48, 5, 1, "", "cirq_to_qlm"], [49, 5, 1, "", "qlm_to_cirq"]], "qat.interop.openqasm": [[51, 1, 1, "", "OqasmParser"]], "qat.interop.openqasm.OqasmParser": [[51, 2, 1, "", "compile"]], "qat.interop.projectq": [[53, 1, 1, "", "AqasmEngine"], [54, 1, 1, "", "AqasmPrinter"]], "qat.interop.projectq.AqasmEngine": [[53, 2, 1, "", "projectq_to_qlm"]], "qat.interop.pyquil": [[57, 1, 1, "", "PyquilQPU"], [56, 5, 1, "", "pyquil_to_qlm"], [58, 5, 1, "", "qlm_to_pyquil"]], "qat.interop.pyquil.PyquilQPU": [[57, 2, 1, "", "set_qpu"], [57, 2, 1, "", "submit"], [57, 2, 1, "", "submit_job"]], "qat.interop.qiskit": [[60, 1, 1, "", "AsyncBackendToQPU"], [61, 1, 1, "", "BackendToQPU"], [66, 1, 1, "", "QPUToBackend"], [63, 1, 1, "", "QiskitJob"], [62, 5, 1, "", "qiskit_to_qlm"], [65, 5, 1, "", "qlm_to_qiskit"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, 2, 1, "", "retrieve_job"], [60, 2, 1, "", "submit"]], "qat.interop.qiskit.BackendToQPU": [[61, 2, 1, "", "submit"]], "qat.interop.qiskit.QPUToBackend": [[66, 2, 1, "", "set_qpu"]], "qat.interop.qiskit.QiskitJob": [[63, 2, 1, "", "cancel"], [63, 2, 1, "", "dump"], [63, 2, 1, "", "job_id"], [63, 2, 1, "", "result"], [63, 2, 1, "", "status"]], "qat.interop.qiskit.runtime": [[64, 1, 1, "", "QiskitRuntimeQPU"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, 2, 1, "", "submit"]], "qat.lang.AQASM": [[226, 0, 0, "-", "arithmetic"], [232, 0, 0, "-", "classarith"], [236, 0, 0, "-", "qftarith"]], "qat.lang.AQASM.arithmetic": [[227, 5, 1, "", "add_const_mod"], [228, 5, 1, "", "add_mod"], [229, 5, 1, "", "modular_exp"], [230, 5, 1, "", "mult_const"], [231, 5, 1, "", "mult_const_mod"]], "qat.lang.AQASM.bits": [[216, 1, 1, "", "BoolFormula"], [219, 1, 1, "", "CRegister"], [218, 1, 1, "", "Cbit"], [253, 1, 1, "", "QRegister"], [246, 1, 1, "", "Qbit"]], "qat.lang.AQASM.classarith": [[233, 5, 1, "", "add"], [234, 5, 1, "", "add_const"], [235, 5, 1, "", "cuccaro_add"]], "qat.lang.AQASM.gates": [[220, 1, 1, "", "Gate"], [242, 1, 1, "", "ParamGate"]], "qat.lang.AQASM.gates.ParamGate": [[242, 2, 1, "", "bind_variables"], [242, 2, 1, "", "dag"], [242, 2, 1, "", "display"], [242, 2, 1, "", "get_variables"]], "qat.lang.AQASM.misc": [[221, 5, 1, "", "generate_gate_set"]], "qat.lang.AQASM.qbool": [[247, 1, 1, "", "QBool"], [248, 1, 1, "", "QBoolArray"], [249, 1, 1, "", "QClause"]], "qat.lang.AQASM.qbool.QBool": [[247, 2, 1, "", "cast"], [247, 2, 1, "", "cast_to"], [247, 2, 1, "", "evaluate"], [247, 2, 1, "", "phase"], [247, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QBoolArray": [[248, 2, 1, "", "cast"], [248, 2, 1, "", "evaluate"], [248, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QClause": [[249, 2, 1, "", "evaluate"], [249, 2, 1, "", "phase"], [249, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qftarith": [[241, 5, 1, "", "QFT"], [237, 5, 1, "", "add"], [238, 5, 1, "", "add_const"], [239, 5, 1, "", "mult"], [240, 5, 1, "", "mult_const"]], "qat.lang.AQASM.qint": [[245, 1, 1, "", "QArithExp"], [250, 1, 1, "", "QCompExp"], [252, 1, 1, "", "QInt"]], "qat.lang.AQASM.qint.QArithExp": [[245, 2, 1, "", "evaluate"]], "qat.lang.AQASM.qint.QCompExp": [[250, 2, 1, "", "evaluate"], [250, 2, 1, "", "phase"], [250, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qint.QInt": [[252, 2, 1, "", "cast"], [252, 2, 1, "", "evaluate"], [252, 2, 1, "", "qbits_list"], [252, 2, 1, "", "set_value"]], "qat.lang": [[214, 1, 1, "", "AbstractGate"], [244, 1, 1, "", "Program"], [255, 1, 1, "", "QRoutine"], [213, 0, 0, "-", "algorithms"], [217, 5, 1, "", "build_gate"], [251, 5, 1, "", "qfunc"], [254, 5, 1, "", "qrout"]], "qat.lang.AbstractGate": [[214, 2, 1, "", "set_dag"]], "qat.lang.Program": [[244, 2, 1, "", "apply"], [244, 2, 1, "", "calloc"], [244, 2, 1, "", "cbreak"], [244, 2, 1, "", "cc_apply"], [244, 2, 1, "", "comment"], [244, 2, 1, "", "conjugate"], [244, 2, 1, "", "display"], [244, 2, 1, "", "export"], [244, 2, 1, "", "free_ancillae"], [244, 2, 1, "", "get_free_ancillae"], [244, 2, 1, "", "logic"], [244, 2, 1, "", "measure"], [244, 2, 1, "", "new_var"], [244, 2, 1, "", "qalloc"], [244, 2, 1, "", "reset"], [244, 2, 1, "", "run"], [244, 2, 1, "", "to_circ"]], "qat.lang.QRoutine": [[255, 2, 1, "", "apply"], [255, 2, 1, "", "compute"], [255, 2, 1, "", "free_ancillae"], [255, 2, 1, "", "get_free_ancillae"], [255, 2, 1, "", "new_wires"], [255, 2, 1, "", "set_ancillae"], [255, 2, 1, "", "uncompute"]], "qat.lang.algorithms.amplification": [[222, 5, 1, "", "grover_diffusion"], [223, 5, 1, "", "householder"], [257, 5, 1, "", "uniform_distribution"]], "qat.lang.algorithms": [[215, 5, 1, "", "amplification_step"], [243, 5, 1, "", "phase_estimation"], [256, 5, 1, "", "quantum_counting"]], "qat.lang.linking": [[225, 1, 1, "", "Linker"]], "qat.lang.linking.Linker": [[225, 2, 1, "", "add_signature"], [225, 2, 1, "", "clear_gate_set"], [225, 2, 1, "", "compile"], [225, 2, 1, "", "link"], [225, 2, 1, "", "link_gates"], [225, 2, 1, "", "link_matrices"], [225, 2, 1, "", "set_gate_set"]], "qat.lang.models": [[224, 1, 1, "", "KPTree"]], "qat.lang.models.KPTree": [[224, 2, 1, "", "get_routine"]], "qat.opt": [[260, 1, 1, "", "BILP"], [263, 1, 1, "", "CombinatorialProblem"], [264, 1, 1, "", "GraphColouring"], [265, 1, 1, "", "GraphPartitioning"], [266, 1, 1, "", "Ising"], [267, 1, 1, "", "KClique"], [279, 1, 1, "", "MWIS"], [268, 1, 1, "", "MaxCut"], [269, 1, 1, "", "MixingFactory"], [280, 1, 1, "", "NumberPartitioning"], [281, 1, 1, "", "QUBO"], [284, 1, 1, "", "VertexCover"], [270, 0, 0, "-", "mixing_factory"], [274, 0, 0, "-", "results"]], "qat.opt.BILP": [[260, 2, 1, "", "get_best_parameters"]], "qat.opt.CombinatorialProblem": [[263, 2, 1, "", "add_clause"], [263, 2, 1, "", "aqo_job"], [263, 2, 1, "", "decode_rydberg"], [263, 2, 1, "", "decode_rydberg_meta_data"], [263, 2, 1, "", "get_observable"], [263, 2, 1, "", "new_var"], [263, 2, 1, "", "new_vars"], [263, 2, 1, "", "qaoa_job"], [263, 2, 1, "", "ryd_job"], [263, 2, 1, "", "sqa_job"], [263, 2, 1, "", "to_bqm"], [263, 2, 1, "", "to_ising"], [263, 2, 1, "", "to_job"], [263, 2, 1, "", "to_qubo"]], "qat.opt.GraphColouring": [[264, 2, 1, "", "get_best_parameters"], [264, 2, 1, "", "parse_result"]], "qat.opt.GraphPartitioning": [[265, 2, 1, "", "get_best_parameters"], [265, 2, 1, "", "parse_result"]], "qat.opt.Ising": [[266, 2, 1, "", "aqo_job"], [266, 2, 1, "", "decode_rydberg"], [266, 2, 1, "", "decode_rydberg_meta_data"], [266, 2, 1, "", "dump"], [266, 2, 1, "", "from_thrift"], [266, 2, 1, "", "get_best_parameters"], [266, 2, 1, "", "get_j_h_and_offset"], [266, 2, 1, "", "get_observable"], [266, 3, 1, "", "j_coupling_matrix"], [266, 2, 1, "", "load"], [266, 3, 1, "", "magnetic_field_h"], [266, 2, 1, "", "qaoa_job"], [266, 2, 1, "", "ryd_job"], [266, 2, 1, "", "sqa_job"], [266, 2, 1, "", "to_bqm"], [266, 2, 1, "", "to_combinatorial_problem"], [266, 2, 1, "", "to_job"], [266, 2, 1, "", "to_qubo"]], "qat.opt.KClique": [[267, 2, 1, "", "get_best_parameters"], [267, 2, 1, "", "parse_result"]], "qat.opt.MWIS": [[279, 2, 1, "", "aqo_job"], [279, 2, 1, "", "decode_rydberg"], [279, 2, 1, "", "decode_rydberg_meta_data"], [279, 2, 1, "", "dump"], [279, 2, 1, "", "from_thrift"], [279, 2, 1, "", "get_best_parameters"], [279, 2, 1, "", "get_j_h_and_offset"], [279, 2, 1, "", "get_observable"], [279, 4, 1, "", "graph"], [279, 3, 1, "", "j_coupling_matrix"], [279, 2, 1, "", "load"], [279, 3, 1, "", "magnetic_field_h"], [279, 2, 1, "", "qaoa_job"], [279, 2, 1, "", "ryd_job"], [279, 2, 1, "", "sqa_job"], [279, 2, 1, "", "to_bqm"], [279, 2, 1, "", "to_combinatorial_problem"], [279, 2, 1, "", "to_job"], [279, 2, 1, "", "to_qubo"]], "qat.opt.MaxCut": [[268, 2, 1, "", "get_best_parameters"], [268, 2, 1, "", "parse_result"]], "qat.opt.MixingFactory": [[269, 2, 1, "", "bit_flip"], [269, 2, 1, "", "bit_move"]], "qat.opt.NumberPartitioning": [[280, 2, 1, "", "get_best_parameters"]], "qat.opt.QUBO": [[281, 2, 1, "", "aqo_job"], [281, 2, 1, "", "decode_rydberg"], [281, 2, 1, "", "decode_rydberg_meta_data"], [281, 2, 1, "", "get_best_parameters"], [281, 2, 1, "", "get_observable"], [281, 2, 1, "", "get_q_and_offset"], [281, 3, 1, "", "q_matrix"], [281, 2, 1, "", "qaoa_job"], [281, 2, 1, "", "ryd_job"], [281, 2, 1, "", "sqa_job"], [281, 2, 1, "", "to_bqm"], [281, 2, 1, "", "to_combinatorial_problem"], [281, 2, 1, "", "to_ising"], [281, 2, 1, "", "to_job"]], "qat.opt.VertexCover": [[284, 2, 1, "", "get_best_parameters"], [284, 2, 1, "", "parse_result"]], "qat.opt.binary_linear_integer_programming": [[260, 5, 1, "", "produce_q_and_offset"]], "qat.opt.boolexpr": [[262, 1, 1, "", "Clause"], [283, 1, 1, "", "Var"]], "qat.opt.boolexpr.Clause": [[262, 2, 1, "", "and_clause"], [262, 2, 1, "", "evaluate"], [262, 2, 1, "", "get_terms_obs"], [262, 2, 1, "", "get_variables"], [262, 2, 1, "", "neg_clause"], [262, 2, 1, "", "or_clause"], [262, 2, 1, "", "xor_clause"]], "qat.opt.boolexpr.Var": [[283, 2, 1, "", "evaluate"], [283, 2, 1, "", "get_terms_obs"], [283, 2, 1, "", "get_variables"], [283, 4, 1, "", "index"]], "qat.opt.circuit_generator": [[261, 1, 1, "", "CircuitGenerator"]], "qat.opt.circuit_generator.CircuitGenerator": [[261, 2, 1, "", "get_observable"], [261, 2, 1, "", "qaoa_job"]], "qat.opt.graph_colouring": [[264, 5, 1, "", "produce_q_and_offset"]], "qat.opt.graph_partitioning": [[265, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.k_clique": [[267, 5, 1, "", "produce_q_and_offset"]], "qat.opt.max_cut": [[268, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.mixing_factory": [[271, 1, 1, "", "IndependentAQO"], [272, 1, 1, "", "InitialStateBuilder"], [273, 1, 1, "", "SimpleInitialState"]], "qat.opt.mixing_factory.IndependentAQO": [[271, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.InitialStateBuilder": [[272, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.SimpleInitialState": [[273, 2, 1, "", "inject_initial_state"]], "qat.opt.number_partitioning": [[280, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.results": [[275, 1, 1, "", "CombinatorialResult"], [276, 1, 1, "", "GraphPartitioningResult"], [277, 1, 1, "", "KCliqueResult"], [278, 1, 1, "", "VertexCoverResult"]], "qat.opt.results.GraphPartitioningResult": [[276, 2, 1, "", "display"]], "qat.opt.results.KCliqueResult": [[277, 3, 1, "", "clique"], [277, 2, 1, "", "display"]], "qat.opt.results.VertexCoverResult": [[278, 3, 1, "", "cover"], [278, 2, 1, "", "display"]], "qat.opt.schedule_generator": [[282, 1, 1, "", "ScheduleGenerator"]], "qat.opt.schedule_generator.ScheduleGenerator": [[282, 2, 1, "", "aqo_job"], [282, 2, 1, "", "get_observable"]], "qat.opt.vertex_cover": [[284, 5, 1, "", "produce_q_and_offset"]], "qat.plugins": [[286, 1, 1, "", "AbstractPlugin"], [287, 1, 1, "", "AdaptVQEPlugin"], [288, 1, 1, "", "CircuitInliner"], [289, 1, 1, "", "CostFunctionPlugin"], [290, 1, 1, "", "Display"], [291, 1, 1, "", "FusionPlugin"], [292, 1, 1, "", "GradientDescentOptimizer"], [293, 1, 1, "", "Junction"], [294, 1, 1, "", "MultipleLaunchesAnalyzer"], [295, 1, 1, "", "ObservableSplitter"], [296, 1, 1, "", "Optimizer"], [297, 1, 1, "", "PSOMinimizePlugin"], [298, 1, 1, "", "QuameleonPlugin"], [299, 1, 1, "", "RemotePlugin"], [302, 1, 1, "", "SPSAMinimizePlugin"], [300, 1, 1, "", "ScipyMinimizePlugin"], [301, 1, 1, "", "SeqOptim"], [303, 1, 1, "", "TransformObservable"], [304, 1, 1, "", "ZeroNoiseExtrapolator"]], "qat.plugins.AbstractPlugin": [[286, 2, 1, "", "compile"], [286, 2, 1, "", "do_post_processing"], [286, 2, 1, "", "post_process"], [286, 2, 1, "", "serve"]], "qat.plugins.AdaptVQEPlugin": [[287, 2, 1, "", "compile"]], "qat.plugins.CircuitInliner": [[288, 2, 1, "", "compile"]], "qat.plugins.CostFunctionPlugin": [[289, 2, 1, "", "compile"]], "qat.plugins.Display": [[290, 2, 1, "", "compile"]], "qat.plugins.FusionPlugin": [[291, 2, 1, "", "compile"]], "qat.plugins.GradientDescentOptimizer": [[292, 2, 1, "", "compile"]], "qat.plugins.Junction": [[293, 2, 1, "", "execute"], [293, 2, 1, "", "run"]], "qat.plugins.MultipleLaunchesAnalyzer": [[294, 2, 1, "", "compile"]], "qat.plugins.ObservableSplitter": [[295, 2, 1, "", "compile"]], "qat.plugins.Optimizer": [[296, 2, 1, "", "evaluate"], [296, 2, 1, "", "optimize"]], "qat.plugins.PSOMinimizePlugin": [[297, 2, 1, "", "compile"]], "qat.plugins.QuameleonPlugin": [[298, 2, 1, "", "compile"]], "qat.plugins.RemotePlugin": [[299, 2, 1, "", "compile"]], "qat.plugins.SPSAMinimizePlugin": [[302, 2, 1, "", "compile"]], "qat.plugins.ScipyMinimizePlugin": [[300, 2, 1, "", "compile"], [300, 2, 1, "", "set_options"]], "qat.plugins.SeqOptim": [[301, 2, 1, "", "compile"]], "qat.plugins.TransformObservable": [[303, 2, 1, "", "compile"]], "qat.plugins.ZeroNoiseExtrapolator": [[304, 2, 1, "", "compile"]], "qat.pylinalg": [[68, 0, 0, "-", "simulator"]], "qat.pylinalg.simulator": [[69, 5, 1, "", "mat2nparray"], [70, 5, 1, "", "measure"], [71, 5, 1, "", "project"], [72, 5, 1, "", "raise_break"], [73, 5, 1, "", "reset"], [74, 5, 1, "", "simulate"]], "qat.qpus": [[306, 1, 1, "", "CLinalg"], [309, 1, 1, "", "ClassicalQPU"], [307, 1, 1, "", "PyLinalg"], [312, 1, 1, "", "QPUHandler"], [313, 1, 1, "", "RemoteQPU"], [308, 1, 1, "", "SimulatedAnnealing"], [310, 5, 1, "", "get_current_qpu"], [311, 5, 1, "", "get_default_qpu"]], "qat.qpus.CLinalg": [[306, 2, 1, "", "submit"]], "qat.qpus.PyLinalg": [[307, 2, 1, "", "serve"], [307, 2, 1, "", "submit"], [307, 2, 1, "", "submit_job"]], "qat.qpus.QPUHandler": [[312, 2, 1, "", "apply_resource_consumption_limits"], [312, 2, 1, "", "estimate_resources_for_batch"], [312, 2, 1, "", "get_specs"], [312, 2, 1, "", "serve"], [312, 2, 1, "", "submit"], [312, 2, 1, "", "submit_job"]], "qat.qpus.SimulatedAnnealing": [[308, 2, 1, "", "submit_job"]], "qat.quops": [[316, 1, 1, "", "ChannelRepresentations"], [336, 1, 1, "", "ParametricAmplitudeDamping"], [337, 1, 1, "", "ParametricGateNoise"], [338, 1, 1, "", "ParametricPureDephasing"], [339, 1, 1, "", "ParametricQuantumChannel"], [341, 1, 1, "", "QuantumChannel"], [342, 1, 1, "", "QuantumChannelChi"], [343, 1, 1, "", "QuantumChannelChoi"], [344, 1, 1, "", "QuantumChannelKraus"], [345, 1, 1, "", "QuantumChannelPTM"], [325, 5, 1, "", "is_completely_positive"], [326, 5, 1, "", "is_trace_preserving"], [327, 5, 1, "", "is_trace_reducing"], [328, 5, 1, "", "is_unital"], [329, 5, 1, "", "make_avg_fid_equiv_depol_channel"], [330, 5, 1, "", "make_depolarizing_channel"], [331, 5, 1, "", "make_generalized_amplitude_damping"], [314, 0, 0, "-", "metrics"]], "qat.quops.ParametricAmplitudeDamping": [[336, 4, 1, "", "T_1"], [336, 4, 1, "", "name"], [336, 2, 1, "", "prob"]], "qat.quops.ParametricPureDephasing": [[338, 4, 1, "", "T_phi"], [338, 4, 1, "", "name"], [338, 2, 1, "", "prob"], [338, 2, 1, "", "ptilde"]], "qat.quops.QuantumChannelChi": [[342, 2, 1, "", "apply_to"], [342, 4, 1, "", "arity"], [342, 4, 1, "", "matrix"], [342, 4, 1, "", "matrix_basis"], [342, 4, 1, "", "name"], [342, 2, 1, "", "to_kraus"]], "qat.quops.QuantumChannelChoi": [[343, 4, 1, "", "arity"], [343, 4, 1, "", "matrix"], [343, 4, 1, "", "name"], [343, 2, 1, "", "to_kraus"], [343, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelKraus": [[344, 2, 1, "", "apply_to"], [344, 2, 1, "", "apply_to_vector"], [344, 4, 1, "", "kraus_operators"], [344, 2, 1, "", "kraus_rank"], [344, 4, 1, "", "name"], [344, 2, 1, "", "to_chi"], [344, 2, 1, "", "to_choi"], [344, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelPTM": [[345, 2, 1, "", "apply_to"], [345, 4, 1, "", "arity"], [345, 3, 1, "", "matrix"], [345, 4, 1, "", "name"], [345, 3, 1, "", "ptm"], [345, 3, 1, "", "tensor"], [345, 2, 1, "", "to_choi"], [345, 2, 1, "", "to_kraus"]], "qat.quops.math_util": [[315, 5, 1, "", "are_equal_up_to_phase"], [317, 5, 1, "", "convert_density_mat_to_pauli_vec"], [318, 5, 1, "", "convert_pauli_vec_to_density_mat"], [332, 5, 1, "", "make_pauli_matrix_basis"], [333, 5, 1, "", "make_standard_matrix_basis"], [334, 5, 1, "", "make_standard_vector_basis"], [335, 5, 1, "", "multikron"], [340, 5, 1, "", "partial_trace"]], "qat.quops.metrics": [[319, 5, 1, "", "get_average_process_fidelity"], [320, 5, 1, "", "get_diamond_norm"], [321, 5, 1, "", "get_entanglement_process_fidelity"], [322, 5, 1, "", "get_process_distance"], [323, 5, 1, "", "get_state_fidelity"], [324, 5, 1, "", "get_trace_distance"]], "qat.simulated_annealing.service": [[308, 5, 1, "", "extract_j_and_h_from_obs"]], "qat.vsolve.ansatz": [[259, 1, 1, "", "AnsatzFactory"]], "qat.vsolve.ansatz.AnsatzFactory": [[259, 2, 1, "", "qaoa_circuit"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"get": [0, 42], "start": 0, "write": [1, 8, 91], "quantum": [1, 2, 8, 10, 12, 13, 14, 16, 17, 27, 32, 33, 164, 213, 270, 306, 307, 314, 346, 347, 350, 351, 352, 353, 354, 356, 362, 363, 373, 376], "program": [1, 2, 8, 9, 12, 18, 22, 27, 32, 213, 244, 346], "exampl": [1, 16, 40, 41, 291, 372], "grover": [1, 16], "algorithm": [1, 3, 43, 213, 215, 222, 223, 243, 256, 257, 346, 362], "The": [1, 17, 164, 372], "diffus": 1, "oracl": [1, 13, 16], "execut": [2, 27], "variat": [3, 11, 43, 285, 346, 373], "qaptiva": [3, 7], "instal": [4, 6], "myqlm": [4, 5, 6, 347, 348, 376], "prerequisit": 4, "compat": 4, "matrix": [4, 10], "packag": [4, 347, 376], "interoper": [4, 346, 349, 350, 351, 352, 353, 377], "licens": 5, "proprietari": 5, "part": 5, "open": 5, "sourc": 5, "maco": 6, "user": [7, 10], "guid": 7, "librari": [7, 375], "built": 7, "upon": 7, "gate": [9, 10, 12, 14, 17, 36, 207, 213, 220, 242, 305, 349], "base": [9, 36, 37, 38, 305, 349, 375], "creat": [10, 11, 18, 26, 42, 270, 372], "ad": [10, 346], "circuit": [10, 11, 12, 14, 97, 164, 175, 177, 179, 180, 181, 182, 213, 285, 346, 347, 350, 351, 352, 353, 354, 373], "nativ": 10, "control": 10, "dagger": 10, "defin": [10, 347, 372], "parametr": 10, "abstractg": [10, 214], "definit": 10, "subcircuit": 10, "ariti": 10, "gener": [10, 12, 25, 31, 148, 198, 199, 200, 201, 202, 203, 204, 205, 206, 258, 274, 347, 365, 366, 367, 368, 369, 370], "deprec": [10, 347, 375], "custom": [10, 42, 270], "job": [11, 18, 21, 28, 29, 30, 43, 91, 101, 258, 270, 347], "bind": 11, "variabl": [11, 19, 91, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146], "alloc": [12, 16], "qubit": [12, 97], "classic": [12, 16], "regist": [12, 213], "appli": 12, "advanc": 12, "oper": [12, 26, 314, 372], "export": 12, "routin": [13, 14, 213], "name": 14, "lift": 14, "python": [14, 36, 38, 44, 347, 376], "function": [14, 164, 347], "link": [14, 17, 225], "extract": 14, "ancilla": 15, "manag": [15, 213], "comput": [15, 34, 36, 346, 347], "scope": 15, "autom": [15, 31], "uncomput": 15, "type": [16, 213], "boolean": [16, 213], "condit": 16, "logic": 16, "express": [16, 213], "evalu": [16, 99], "statement": 16, "build": [16, 19], "phase": [16, 164, 373], "integ": [16, 213], "set": [16, 213, 364], "valu": 16, "arithmet": [16, 213, 226, 227, 228, 229, 230, 231], "graph": [16, 356, 357, 367, 370], "color": 16, "ato": 17, "assembl": 17, "aqasm": [17, 216, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253], "text": 17, "format": 17, "header": 17, "instruct": 17, "list": [17, 19], "compil": [17, 40, 354], "file": 17, "time": 17, "analog": [18, 21], "background": 18, "schedul": [19, 20, 141], "hamiltonian": [19, 23, 164, 169, 170, 174, 176, 178, 189, 372], "coeffici": 19, "observ": [19, 23, 26, 30, 91, 136], "us": [19, 26, 28, 39, 97, 347, 372], "abstract": [19, 305], "one": [19, 28, 372], "manipul": [20, 213, 372], "anneal": [22, 270, 305, 356, 377], "Ising": [23, 258, 266], "bibliographi": [23, 362], "quadrat": [24, 258, 364], "unconstrain": [24, 356, 364], "binari": [24, 364], "optim": [24, 198, 258, 274, 285, 296, 346, 355, 362, 363, 364], "qubo": [24, 258, 281, 364], "combinatori": [25, 198, 258, 274, 346, 347, 355], "problem": [25, 258, 346, 347, 356, 365], "singl": 26, "term": [26, 143], "an": 26, "simul": [27, 36, 37, 38, 68, 69, 70, 71, 72, 73, 74, 305, 346, 347, 356], "construct": 28, "multipl": 28, "batch": [28, 31, 95, 347], "sampl": [29, 140], "result": [32, 91, 92, 139, 142, 274, 275, 276, 277, 278], "process": [33, 306, 307], "unit": [33, 306, 307], "qpu": [33, 35, 36, 39, 42, 43, 115, 116, 305, 306, 307, 308, 309, 310, 311, 312, 313, 347, 350, 351], "sqa": 34, "inner": 34, "work": 34, "make": [35, 40, 41], "your": [35, 40, 346], "own": [35, 40, 41], "method": [35, 40, 97, 372], "submit_job": 35, "get_spec": 35, "emul": 36, "clinalg": [36, 37, 306], "c": [36, 37, 306], "linear": [36, 37, 38], "algebra": [36, 37, 38], "pylinalg": [36, 38, 67, 68, 69, 70, 71, 72, 73, 74, 307], "extend": [39, 43], "plugin": [39, 40, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 346, 374], "post_process": 40, "A": [40, 41, 347], "concret": [40, 41], "you": 41, "junction": [41, 293], "inform": 42, "from": 42, "specif": [42, 91, 207], "run": [43, 346], "support": [43, 258], "differenti": 43, "test": 43, "sever": 43, "initi": 43, "paramet": [43, 91, 137], "api": 44, "refer": [44, 224, 226, 232, 236, 269], "modul": 44, "qat": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 375], "interop": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "cirq": [47, 48, 49, 352], "cirq_to_qlm": 48, "qlm_to_cirq": 49, "openqasm": [50, 51, 354], "oqasmpars": 51, "projectq": [52, 53, 54, 353], "aqasmengin": 53, "aqasmprint": 54, "pyquil": [55, 56, 57, 58, 351], "pyquil_to_qlm": 56, "pyquilqpu": 57, "qlm_to_pyquil": 58, "qiskit": [59, 60, 61, 62, 63, 64, 65, 66, 350], "asyncbackendtoqpu": 60, "backendtoqpu": 61, "qiskit_to_qlm": 62, "qiskitjob": 63, "runtim": 64, "qiskitruntimeqpu": 64, "qlm_to_qiskit": 65, "qputobackend": 66, "mat2nparrai": 69, "measur": 70, "project": 71, "raise_break": 72, "reset": 73, "comm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "datamodel": [76, 77, 78], "ttype": [77, 78, 80, 81, 82, 84, 85, 86, 87, 89, 90], "gatedefinit": 77, "op": 78, "except": [79, 80, 81, 82], "errortyp": 80, "pluginexcept": 81, "qpuexcept": 82, "resourc": [83, 84, 85, 86, 87], "allocationmodel": 84, "devic": [85, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 347], "nodetyp": 86, "resourcemodel": 87, "share": [88, 89, 90], "intermediatemeasur": 89, "processingtyp": 90, "core": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "object": 91, "pars": 91, "relat": 91, "hardwar": [91, 207, 208, 209, 210, 211, 212], "misc": [91, 221], "util": [91, 102, 164, 198, 285, 305, 314], "wrapper": [92, 142, 184, 185], "aggregate_data": 92, "assert": [93, 94], "assert_plugin": 93, "assert_qpu": 94, "batchresult": 96, "most": 97, "iter": 97, "cbit": [97, 218], "consol": 98, "displai": [98, 290], "formula_ev": 99, "hardwarespec": 100, "load_state_vector_from_bin": 102, "applic": [103, 104, 105, 373], "remoteappl": 105, "circuit_build": [106, 107, 108, 109, 110], "matrix_util": [107, 108, 109], "default_gate_set": 107, "get_param_gener": 108, "get_predef_gener": 109, "builder": 110, "variablenamenotavail": 110, "gate_set": [111, 112, 113, 114], "gateset": 112, "gatesignatur": 113, "gatesyntaxredefinit": 114, "commonqpu": 116, "spin": [117, 118, 119, 164, 346, 371, 372], "integer_to_spin": 118, "spins_to_integ": 119, "abso": 121, "angl": 122, "arithexpress": 123, "atan2": 124, "co": 125, "exp": 126, "get_item": 127, "heavisid": 128, "imag": 129, "ln": 130, "real": 131, "sin": 132, "sqrt": 133, "symbol": 134, "vmax": 135, "printer": 138, "plot_in_notebook": 138, "state": [142, 213, 373], "topologi": 144, "topologytyp": 145, "simutil": 147, "wavefunct": 147, "predefin": [148, 207, 314], "alltoal": 149, "google_sycamor": 150, "griddevic": 151, "ibm_burlington": 152, "ibm_johannesburg": 153, "ibm_melbourn": 154, "ibm_rueschlikon": 155, "ibm_singapor": 156, "ibm_tokyo": 157, "ibm_yorktown": 158, "linedevic": 159, "rigetti_agav": 160, "rigetti_aspen": 161, "squaregriddevic": 162, "zuchongzhi": 163, "fermion": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 285, 346, 347, 371, 372, 373], "constructor": [164, 372], "common": 164, "mani": 164, "bodi": 164, "transform": [164, 191, 192, 193], "ansatz": [164, 259, 373], "atom": [164, 347], "molecular": 164, "studi": 164, "unitari": 164, "coupl": 164, "cluster": 164, "ucc": [164, 166, 167, 168, 171, 172, 173, 188, 190], "subspac": [164, 373], "expans": [164, 373], "estim": [164, 373], "chemistri": [165, 166, 167, 168, 171, 172, 173, 184, 185, 187, 188, 190, 373], "qse": 165, "apply_quantum_subspace_expans": 165, "compute_active_space_integr": 166, "construct_ucc_ansatz": 167, "convert_to_h_integr": 168, "electronicstructurehamiltonian": 169, "fermionhamiltonian": 170, "get_cluster_op": 171, "get_hf_ket": 172, "guess_init_param": 173, "make_anderson_model": 174, "make_compressed_ldca_circ": 175, "make_embedded_model": 176, "make_general_hwe_circ": 177, "make_hubbard_model": 178, "make_ldca_circ": 179, "make_mr_circ": 180, "make_mrep_circ": 181, "make_shallow_circ": 182, "trotteris": 183, "make_trotterisation_routin": 183, "molecularhamiltonian": [184, 373], "moleculeinfo": [185, 373], "phase_estim": [186, 243], "perform_phase_estim": 186, "pyscf_tool": 187, "perform_pyscf_comput": 187, "select_active_orbit": 188, "spinhamiltonian": 189, "transform_integrals_to_new_basi": 190, "transform_to_bk_basi": 191, "transform_to_jw_basi": 192, "transform_to_parity_basi": 193, "fusion": [194, 195, 196, 197], "strategi": [195, 196, 197], "adjacentstrategi": 195, "eagerstrategi": 196, "naivestrategi": 197, "abstractgener": 199, "combinatorialoptimizergener": 200, "graphcolouringgener": 201, "graphpartitioninggener": 202, "kcliquegener": 203, "maxcutgener": 204, "remotebatchgener": 205, "vertexcovergener": 206, "model": [207, 224], "defaultgatesspecif": 208, "defaulthardwaremodel": 209, "gatesspecif": 210, "hardwaremodel": 211, "make_depolarizing_hardware_model": 212, "lang": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 346], "tool": [213, 347, 373], "structur": 213, "linker": [213, 225], "low": [213, 306], "level": [213, 306], "labrari": 213, "basic": [213, 346], "preparat": 213, "qram": 213, "amplification_step": 215, "bit": [216, 218, 219, 246, 253], "boolformula": 216, "build_gat": 217, "cregist": 219, "generate_gate_set": 221, "amplif": [222, 223, 257], "grover_diffus": 222, "household": 223, "kptree": 224, "add_const_mod": 227, "add_mod": 228, "modular_exp": 229, "mult_const": [230, 240], "mult_const_mod": 231, "classarith": [232, 233, 234, 235], "add": [233, 237], "add_const": [234, 238], "cuccaro_add": 235, "qftarith": [236, 237, 238, 239, 240, 241], "mult": 239, "qft": 241, "paramg": 242, "qint": [245, 250, 252], "qarithexp": 245, "qbit": 246, "qbool": [247, 248, 249], "qboolarrai": 248, "qclaus": 249, "qcompexp": 250, "qfunc": 251, "qregist": 253, "qrout": 254, "qroutin": 255, "quantum_count": 256, "uniform_distribut": 257, "opt": [258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], "class": [258, 305], "np": [258, 356, 365], "hard": [258, 356, 365], "qaoa": [258, 362], "ans\u00e4tz": [258, 373], "qa": 258, "vsolv": 259, "ansatzfactori": 259, "bilp": 260, "circuit_gener": 261, "circuitgener": 261, "boolexpr": [262, 283], "claus": 262, "combinatorialproblem": 263, "graphcolour": 264, "graphpartit": 265, "kcliqu": [267, 358], "maxcut": 268, "mixingfactori": 269, "mixing_factori": [270, 271, 272, 273], "independentaqo": 271, "initialstatebuild": 272, "simpleinitialst": 273, "combinatorialresult": 275, "graphpartitioningresult": 276, "kcliqueresult": 277, "vertexcoverresult": 278, "mwi": [279, 364], "numberpartit": 280, "schedule_gener": 282, "schedulegener": 282, "var": 283, "vertexcov": 284, "rewrit": 285, "system": [285, 346, 371], "abstractplugin": 286, "adaptvqeplugin": 287, "circuitinlin": 288, "costfunctionplugin": 289, "fusionplugin": 291, "gradientdescentoptim": 292, "multiplelaunchesanalyz": 294, "observablesplitt": 295, "psominimizeplugin": 297, "quameleonplugin": 298, "remoteplugin": 299, "scipyminimizeplugin": 300, "seqoptim": 301, "spsaminimizeplugin": 302, "transformobserv": 303, "zeronoiseextrapol": 304, "high": 306, "statevector": 306, "pybind": 306, "interfac": 306, "simulatedann": 308, "classicalqpu": 309, "get_current_qpu": 310, "get_default_qpu": 311, "qpuhandl": 312, "remoteqpu": 313, "quop": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "channel": 314, "metric": [314, 319, 320, 321, 322, 323, 324], "basi": 314, "mathemat": 314, "math_util": [315, 317, 318, 332, 333, 334, 335, 340], "are_equal_up_to_phas": 315, "channelrepresent": 316, "convert_density_mat_to_pauli_vec": 317, "convert_pauli_vec_to_density_mat": 318, "get_average_process_fidel": 319, "get_diamond_norm": 320, "get_entanglement_process_fidel": 321, "get_process_dist": 322, "get_state_fidel": 323, "get_trace_dist": 324, "is_completely_posit": 325, "is_trace_preserv": 326, "is_trace_reduc": 327, "is_unit": 328, "make_avg_fid_equiv_depol_channel": 329, "make_depolarizing_channel": 330, "make_generalized_amplitude_damp": 331, "make_pauli_matrix_basi": 332, "make_standard_matrix_basi": 333, "make_standard_vector_basi": 334, "multikron": 335, "parametricamplitudedamp": 336, "parametricgatenois": 337, "parametricpuredephas": 338, "parametricquantumchannel": 339, "partial_trac": 340, "quantumchannel": 341, "quantumchannelchi": 342, "quantumchannelchoi": 343, "quantumchannelkrau": 344, "quantumchannelptm": 345, "demo": [346, 371], "tutori": 346, "digit": 346, "stack": 346, "design": 346, "qlm": 346, "first": 346, "step": 346, "introduct": 346, "releas": 347, "note": 347, "what": 347, "": 347, "new": 347, "1": 347, "10": 347, "5": 347, "main": 347, "updat": 347, "depend": 347, "other": [347, 356], "fix": 347, "4": 347, "3": 347, "solv": 347, "rydberg": 347, "featur": 347, "9": 347, "6": 347, "2": 347, "7": 347, "warn": 347, "0": 347, "power": 347, "access": 347, "known": 347, "contribut": 348, "framework": [349, 377], "avail": 349, "binder": 349, "translat": [350, 351, 352, 353, 354], "connect": [350, 351], "backend": 350, "constrain": 356, "benchmark": 356, "perform": 356, "partit": [357, 360, 367], "max": [359, 366], "cut": [359, 366], "number": 360, "vertex": [361, 369], "cover": [361, 369], "approxim": 362, "adiabat": 363, "aqo": 363, "cross": 364, "lattic": 364, "maximum": 364, "weight": 364, "independ": 364, "k": 368, "cliqu": 368, "colour": 370, "tabl": [372, 373], "content": [372, 373], "two": 372, "electron": 372, "integr": 372, "get_matrix": 372, "represent": 372, "some": 372, "includ": 373, "prepar": 373, "eigensolv": 373, "vqe": 373, "trotter": 373, "migrat": 375, "code": 375, "dq": 375}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"qat.core.variables.abso": [[121, "qat-core-variables-abso"]], "qat.core.spins.spins_to_integer": [[119, "qat-core-spins-spins-to-integer"]], "qat.core.gate_set": [[111, "qat-core-gate-set"]], "qat.core.gate_set.GateSet": [[112, "qat-core-gate-set-gateset"]], "qat.core.application.RemoteApplication": [[105, "qat-core-application-remoteapplication"]], "qat.core.variables.ArithExpression": [[123, "qat-core-variables-arithexpression"]], "qat.core.variables": [[120, "qat-core-variables"]], "qat.core.spins": [[117, "qat-core-spins"]], "qat.core.spins.integer_to_spins": [[118, "qat-core-spins-integer-to-spins"]], "qat.core.variables.atan2": [[124, "qat-core-variables-atan2"]], "qat.core.circuit_builder": [[106, "qat-core-circuit-builder"]], "qat.core.circuit_builder.matrix_util.get_param_generator": [[108, "qat-core-circuit-builder-matrix-util-get-param-generator"]], "qat.core.variables.angle": [[122, "qat-core-variables-angle"]], "qat.core.circuit_builder.matrix_util.get_predef_generator": [[109, "qat-core-circuit-builder-matrix-util-get-predef-generator"]], "qat.core.circuit_builder.builder.VariableNameNotAvailable": [[110, "qat-core-circuit-builder-builder-variablenamenotavailable"]], "qat.core.qpu": [[115, "qat-core-qpu"]], "qat.core.gate_set.GateSyntaxRedefinition": [[114, "qat-core-gate-set-gatesyntaxredefinition"]], "qat.core.gate_set.GateSignature": [[113, "qat-core-gate-set-gatesignature"]], "qat.core.variables.cos": [[125, "qat-core-variables-cos"]], "qat.core.circuit_builder.matrix_util.default_gate_set": [[107, "qat-core-circuit-builder-matrix-util-default-gate-set"]], "qat.core.qpu.CommonQPU": [[116, "qat-core-qpu-commonqpu"]], "qat.core.formula_eval.evaluate": [[99, "qat-core-formula-eval-evaluate"]], "qat.comm.shared.ttypes.ProcessingType": [[90, "qat-comm-shared-ttypes-processingtype"]], "qat.comm.shared": [[88, "qat-comm-shared"]], "qat.core.Circuit": [[97, "qat-core-circuit"]], "Most useful Circuit methods": [[97, "most-useful-circuit-methods"]], "Iterating of a Circuit": [[97, "iterating-of-a-circuit"]], "Qubits and cbits": [[97, "qubits-and-cbits"]], "qat.core": [[91, "qat-core"]], "Objects for writing a job": [[91, "objects-for-writing-a-job"]], "Objects for parsing a job result": [[91, "objects-for-parsing-a-job-result"]], "Observable-related objects": [[91, "observable-related-objects"]], "Hardware specifications": [[91, "hardware-specifications"]], "Variables and Parameters": [[91, "variables-and-parameters"]], "Misc. utilities": [[91, "misc-utilities"]], "qat.core.Batch": [[95, "qat-core-batch"]], "qat.core.util.load_state_vector_from_bin": [[102, "qat-core-util-load-state-vector-from-bin"]], "qat.comm.resource.ttypes.Device": [[85, "qat-comm-resource-ttypes-device"]], "qat.comm.resource.ttypes.NodeType": [[86, "qat-comm-resource-ttypes-nodetype"]], "qat.comm.shared.ttypes.IntermediateMeasurement": [[89, "qat-comm-shared-ttypes-intermediatemeasurement"]], "qat.core.wrappers.result.aggregate_data": [[92, "qat-core-wrappers-result-aggregate-data"]], "qat.comm.resource.ttypes.ResourceModel": [[87, "qat-comm-resource-ttypes-resourcemodel"]], "qat.core.BatchResult": [[96, "qat-core-batchresult"]], "qat.core.application": [[103, "qat-core-application"]], "qat.core.console.display": [[98, "qat-core-console-display"]], "qat.comm.resource.ttypes.AllocationModel": [[84, "qat-comm-resource-ttypes-allocationmodel"]], "qat.core.HardwareSpecs": [[100, "qat-core-hardwarespecs"]], "qat.core.assertion.assert_plugin": [[93, "qat-core-assertion-assert-plugin"]], "qat.core.Job": [[101, "qat-core-job"]], "qat.core.application.Application": [[104, "qat-core-application-application"]], "qat.core.assertion.assert_qpu": [[94, "qat-core-assertion-assert-qpu"]], "qat.pylinalg.simulator.project": [[71, "qat-pylinalg-simulator-project"]], "qat.pylinalg.simulator.simulate": [[74, "qat-pylinalg-simulator-simulate"]], "qat.interop.qiskit.qlm_to_qiskit": [[65, "qat-interop-qiskit-qlm-to-qiskit"]], "qat.comm.resource": [[83, "qat-comm-resource"]], "qat.comm.exceptions.ttypes.QPUException": [[82, "qat-comm-exceptions-ttypes-qpuexception"]], "qat.pylinalg": [[67, "qat-pylinalg"]], "qat.comm.datamodel.ttypes.Op": [[78, "qat-comm-datamodel-ttypes-op"]], "qat.pylinalg.simulator.raise_break": [[72, "qat-pylinalg-simulator-raise-break"]], "qat.pylinalg.simulator.measure": [[70, "qat-pylinalg-simulator-measure"]], "qat.comm.exceptions.ttypes.PluginException": [[81, "qat-comm-exceptions-ttypes-pluginexception"]], "qat.pylinalg.simulator": [[68, "qat-pylinalg-simulator"]], "qat.comm.datamodel.ttypes.GateDefinition": [[77, "qat-comm-datamodel-ttypes-gatedefinition"]], "qat.comm.exceptions": [[79, "qat-comm-exceptions"]], "qat.pylinalg.simulator.mat2nparray": [[69, "qat-pylinalg-simulator-mat2nparray"]], "qat.comm.datamodel": [[76, "qat-comm-datamodel"]], "qat.interop.qiskit.QiskitJob": [[63, "qat-interop-qiskit-qiskitjob"]], "qat.pylinalg.simulator.reset": [[73, "qat-pylinalg-simulator-reset"]], "qat.interop.qiskit.QPUToBackend": [[66, "qat-interop-qiskit-qputobackend"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, "qat-interop-qiskit-runtime-qiskitruntimeqpu"]], "qat.comm.exceptions.ttypes.ErrorType": [[80, "qat-comm-exceptions-ttypes-errortype"]], "qat.comm": [[75, "qat-comm"]], "qat.core.printer.plot_in_notebook": [[138, "qat-core-printer-plot-in-notebook"]], "qat.core.variables.vmax": [[135, "qat-core-variables-vmax"]], "qat.core.variables.get_item": [[127, "qat-core-variables-get-item"]], "qat.core.Parameter": [[137, "qat-core-parameter"]], "qat.core.Result": [[139, "qat-core-result"]], "qat.core.Sample": [[140, "qat-core-sample"]], "qat.core.wrappers.result.State": [[142, "qat-core-wrappers-result-state"]], "qat.core.variables.heaviside": [[128, "qat-core-variables-heaviside"]], "qat.core.Observable": [[136, "qat-core-observable"]], "qat.core.Topology": [[144, "qat-core-topology"]], "qat.core.TopologyType": [[145, "qat-core-topologytype"]], "qat.core.variables.sqrt": [[133, "qat-core-variables-sqrt"]], "qat.core.variables.imag": [[129, "qat-core-variables-imag"]], "qat.core.variables.sin": [[132, "qat-core-variables-sin"]], "qat.core.variables.Symbol": [[134, "qat-core-variables-symbol"]], "qat.core.variables.exp": [[126, "qat-core-variables-exp"]], "qat.core.Term": [[143, "qat-core-term"]], "qat.core.variables.ln": [[130, "qat-core-variables-ln"]], "qat.core.Schedule": [[141, "qat-core-schedule"]], "qat.core.Variable": [[146, "qat-core-variable"]], "qat.core.variables.real": [[131, "qat-core-variables-real"]], "qat.quops.make_generalized_amplitude_damping": [[331, "qat-quops-make-generalized-amplitude-damping"]], "qat.quops.is_trace_reducing": [[327, "qat-quops-is-trace-reducing"]], "qat.quops.math_util.multikron": [[335, "qat-quops-math-util-multikron"]], "qat.quops.metrics.get_average_process_fidelity": [[319, "qat-quops-metrics-get-average-process-fidelity"]], "qat.quops.make_depolarizing_channel": [[330, "qat-quops-make-depolarizing-channel"]], "qat.quops.metrics.get_state_fidelity": [[323, "qat-quops-metrics-get-state-fidelity"]], "qat.quops.make_avg_fid_equiv_depol_channel": [[329, "qat-quops-make-avg-fid-equiv-depol-channel"]], "qat.quops.is_completely_positive": [[325, "qat-quops-is-completely-positive"]], "qat.quops.math_util.convert_density_mat_to_pauli_vec": [[317, "qat-quops-math-util-convert-density-mat-to-pauli-vec"]], "qat.quops.ChannelRepresentations": [[316, "qat-quops-channelrepresentations"]], "qat.quops.math_util.make_standard_vector_basis": [[334, "qat-quops-math-util-make-standard-vector-basis"]], "qat.quops.math_util.are_equal_up_to_phase": [[315, "qat-quops-math-util-are-equal-up-to-phase"]], "qat.quops.metrics.get_trace_distance": [[324, "qat-quops-metrics-get-trace-distance"]], "qat.quops.math_util.make_standard_matrix_basis": [[333, "qat-quops-math-util-make-standard-matrix-basis"]], "qat.quops.is_unital": [[328, "qat-quops-is-unital"]], "qat.quops.metrics.get_entanglement_process_fidelity": [[321, "qat-quops-metrics-get-entanglement-process-fidelity"]], "qat.quops.metrics.get_diamond_norm": [[320, "qat-quops-metrics-get-diamond-norm"]], "qat.quops.is_trace_preserving": [[326, "qat-quops-is-trace-preserving"]], "qat.quops.math_util.convert_pauli_vec_to_density_mat": [[318, "qat-quops-math-util-convert-pauli-vec-to-density-mat"]], "qat.quops.metrics.get_process_distance": [[322, "qat-quops-metrics-get-process-distance"]], "qat.quops.math_util.make_pauli_matrix_basis": [[332, "qat-quops-math-util-make-pauli-matrix-basis"]], "qat.plugins.ScipyMinimizePlugin": [[300, "qat-plugins-scipyminimizeplugin"]], "qat.qpus.get_default_qpu": [[311, "qat-qpus-get-default-qpu"]], "qat.qpus.SimulatedAnnealing": [[308, "qat-qpus-simulatedannealing"]], "qat.plugins.MultipleLaunchesAnalyzer": [[294, "qat-plugins-multiplelaunchesanalyzer"]], "qat.qpus.PyLinalg": [[307, "qat-qpus-pylinalg"]], "Quantum Processing Unit": [[307, "quantum-processing-unit"]], "qat.plugins.QuameleonPlugin": [[298, "qat-plugins-quameleonplugin"]], "qat.plugins.ObservableSplitter": [[295, "qat-plugins-observablesplitter"]], "qat.plugins.SPSAMinimizePlugin": [[302, "qat-plugins-spsaminimizeplugin"]], "qat.quops": [[314, "qat-quops"]], "Quantum Channels": [[314, "quantum-channels"]], "Predefined quantum channels": [[314, "predefined-quantum-channels"]], "Metrics": [[314, "module-qat.quops.metrics"]], "Operator basis": [[314, "operator-basis"]], "Mathematical utilities": [[314, "mathematical-utilities"]], "qat.qpus.get_current_qpu": [[310, "qat-qpus-get-current-qpu"]], "qat.plugins.SeqOptim": [[301, "qat-plugins-seqoptim"]], "qat.plugins.Optimizer": [[296, "qat-plugins-optimizer"]], "qat.qpus.RemoteQPU": [[313, "qat-qpus-remoteqpu"]], "qat.qpus.CLinalg": [[306, "qat-qpus-clinalg"]], "High-level Quantum Processing Unit": [[306, "high-level-quantum-processing-unit"]], "C++ Low-level Statevector": [[306, "c-low-level-statevector"]], "Pybind interface": [[306, "pybind-interface"]], "qat.plugins.PSOMinimizePlugin": [[297, "qat-plugins-psominimizeplugin"]], "qat.plugins.TransformObservable": [[303, "qat-plugins-transformobservable"]], "qat.plugins.ZeroNoiseExtrapolator": [[304, "qat-plugins-zeronoiseextrapolator"]], "qat.qpus.QPUHandler": [[312, "qat-qpus-qpuhandler"]], "qat.plugins.RemotePlugin": [[299, "qat-plugins-remoteplugin"]], "qat.qpus.ClassicalQPU": [[309, "qat-qpus-classicalqpu"]], "qat.qpus": [[305, "qat-qpus"]], "Gate-based QPUs": [[305, "gate-based-qpus"]], "Simulated Annealing": [[305, "simulated-annealing"]], "Abstract and utility QPU classes": [[305, "abstract-and-utility-qpu-classes"]], "Running variational algorithms": [[43, "running-variational-algorithms"]], "Extending a QPU to support variational jobs": [[43, "extending-a-qpu-to-support-variational-jobs"]], "Differentiating jobs": [[43, "differentiating-jobs"]], "Testing for several initializations of the parameters": [[43, "testing-for-several-initializations-of-the-parameters"]], "qat.interop.projectq": [[52, "qat-interop-projectq"]], "qat.interop.projectq.AqasmPrinter": [[54, "qat-interop-projectq-aqasmprinter"]], "qat.interop.pyquil.pyquil_to_qlm": [[56, "qat-interop-pyquil-pyquil-to-qlm"]], "qat.interop.pyquil.qlm_to_pyquil": [[58, "qat-interop-pyquil-qlm-to-pyquil"]], "qat.interop": [[46, "qat-interop"]], "qat.interop.qiskit": [[59, "qat-interop-qiskit"]], "qat.interop.cirq.qlm_to_cirq": [[49, "qat-interop-cirq-qlm-to-cirq"]], "qat.interop.pyquil.PyquilQPU": [[57, "qat-interop-pyquil-pyquilqpu"]], "qat.interop.qiskit.qiskit_to_qlm": [[62, "qat-interop-qiskit-qiskit-to-qlm"]], "qat.interop.qiskit.BackendToQPU": [[61, "qat-interop-qiskit-backendtoqpu"]], "qat.interop.projectq.AqasmEngine": [[53, "qat-interop-projectq-aqasmengine"]], "qat.interop.openqasm": [[50, "qat-interop-openqasm"]], "qat.interop.openqasm.OqasmParser": [[51, "qat-interop-openqasm-oqasmparser"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, "qat-interop-qiskit-asyncbackendtoqpu"]], "Getting information from the QPU": [[42, "getting-information-from-the-qpu"]], "Creating custom specifications": [[42, "creating-custom-specifications"]], "qat": [[45, "qat"]], "qat.interop.pyquil": [[55, "qat-interop-pyquil"]], "API reference": [[44, "api-reference"]], "Python modules": [[44, "python-modules"]], "qat.interop.cirq": [[47, "qat-interop-cirq"]], "qat.interop.cirq.cirq_to_qlm": [[48, "qat-interop-cirq-cirq-to-qlm"]], "qat.devices.IBM_SINGAPORE": [[156, "qat-devices-ibm-singapore"]], "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion": [[165, "qat-fermion-chemistry-qse-apply-quantum-subspace-expansion"]], "qat.devices.IBM_JOHANNESBURG": [[153, "qat-devices-ibm-johannesburg"]], "qat.fermion": [[164, "qat-fermion"]], "Hamiltonians constructors": [[164, "hamiltonians-constructors"]], "Common many-body Hamiltonians": [[164, "common-many-body-hamiltonians"]], "The spin-fermion transforms": [[164, "module-qat.fermion.transforms"]], "Fermionic ansatz circuits": [[164, "module-qat.fermion.circuits"], [373, "fermionic-ansatz-circuits"]], "Atomic and molecular studies": [[164, "atomic-and-molecular-studies"]], "Unitary Coupled-Cluster (UCC)": [[164, "unitary-coupled-cluster-ucc"]], "Quantum subspace expansion": [[164, "module-qat.fermion.chemistry.qse"], [373, "quantum-subspace-expansion"]], "Quantum phase estimation": [[164, "module-qat.fermion.phase_estimation"], [373, "quantum-phase-estimation"]], "Utility functions": [[164, "utility-functions"]], "qat.devices.SquareGridDevice": [[162, "qat-devices-squaregriddevice"]], "qat.devices": [[148, "qat-devices"]], "Predefined devices": [[148, "predefined-devices"]], "Device generators": [[148, "device-generators"]], "qat.devices.IBM_BURLINGTON": [[152, "qat-devices-ibm-burlington"]], "qat.devices.IBM_MELBOURNE": [[154, "qat-devices-ibm-melbourne"]], "qat.fermion.chemistry.ucc.construct_ucc_ansatz": [[167, "qat-fermion-chemistry-ucc-construct-ucc-ansatz"]], "qat.devices.RIGETTI_AGAVE": [[160, "qat-devices-rigetti-agave"]], "qat.core.simutil.wavefunction": [[147, "qat-core-simutil-wavefunction"]], "qat.devices.IBM_YORKTOWN": [[158, "qat-devices-ibm-yorktown"]], "qat.devices.LineDevice": [[159, "qat-devices-linedevice"]], "qat.devices.GOOGLE_SYCAMORE": [[150, "qat-devices-google-sycamore"]], "qat.devices.ZUCHONGZHI": [[163, "qat-devices-zuchongzhi"]], "qat.devices.IBM_RUESCHLIKON": [[155, "qat-devices-ibm-rueschlikon"]], "qat.devices.AllToAll": [[149, "qat-devices-alltoall"]], "qat.devices.GridDevice": [[151, "qat-devices-griddevice"]], "qat.fermion.chemistry.ucc.compute_active_space_integrals": [[166, "qat-fermion-chemistry-ucc-compute-active-space-integrals"]], "qat.devices.IBM_TOKYO": [[157, "qat-devices-ibm-tokyo"]], "qat.devices.RIGETTI_ASPEN": [[161, "qat-devices-rigetti-aspen"]], "qat.quops.ParametricPureDephasing": [[338, "qat-quops-parametricpuredephasing"]], "Release notes": [[347, "release-notes"]], "What\u2019s new in myQLM 1.10.5": [[347, "what-s-new-in-myqlm-1-10-5"]], "Main Package": [[347, "main-package"], [347, "id1"], [347, "id5"], [347, "id7"], [347, "id9"], [347, "id11"], [347, "id13"], [347, "id15"], [347, "id18"], [347, "id21"]], "Updated Dependant Packages": [[347, "updated-dependant-packages"], [347, "id2"]], "Other Updated Packages": [[347, "other-updated-packages"], [347, "id3"]], "Fixes": [[347, "fixes"], [347, "id4"], [347, "id6"], [347, "id25"], [347, "id32"], [347, "id37"], [347, "id40"]], "What\u2019s new in myQLM 1.10.4": [[347, "what-s-new-in-myqlm-1-10-4"]], "What\u2019s new in myQLM 1.10.3": [[347, "what-s-new-in-myqlm-1-10-3"]], "Dependant Packages": [[347, "dependant-packages"], [347, "id8"], [347, "id10"], [347, "id12"], [347, "id14"], [347, "id16"], [347, "id19"], [347, "id22"], [347, "id26"], [347, "id29"], [347, "id33"]], "Other Packages": [[347, "other-packages"], [347, "id17"], [347, "id20"], [347, "id23"], [347, "id27"], [347, "id30"], [347, "id34"]], "Solving combinatorial problem on Rydberg atom quantum devices": [[347, "solving-combinatorial-problem-on-rydberg-atom-quantum-devices"]], "Updated features": [[347, "updated-features"], [347, "id24"], [347, "id31"], [347, "id36"], [347, "id39"]], "What\u2019s new in myQLM 1.9.9": [[347, "what-s-new-in-myqlm-1-9-9"]], "What\u2019s new in myQLM 1.9.6": [[347, "what-s-new-in-myqlm-1-9-6"]], "What\u2019s new in myQLM 1.9.5": [[347, "what-s-new-in-myqlm-1-9-5"]], "What\u2019s new in myQLM 1.9.4": [[347, "what-s-new-in-myqlm-1-9-4"]], "What\u2019s new in myQLM 1.9.3": [[347, "what-s-new-in-myqlm-1-9-3"]], "What\u2019s new in myQLM 1.9.2": [[347, "what-s-new-in-myqlm-1-9-2"]], "What\u2019s new in myQLM 1.9.1": [[347, "what-s-new-in-myqlm-1-9-1"]], "Defining quantum circuits / jobs using a Python function": [[347, "defining-quantum-circuits-jobs-using-a-python-function"]], "What\u2019s new in myQLM 1.7.3": [[347, "what-s-new-in-myqlm-1-7-3"]], "Main Fixes": [[347, "main-fixes"], [347, "id28"]], "What\u2019s new in myQLM 1.7.2": [[347, "what-s-new-in-myqlm-1-7-2"]], "Deprecation warnings": [[347, "deprecation-warnings"]], "What\u2019s new in myQLM 1.7.1": [[347, "what-s-new-in-myqlm-1-7-1"]], "A new simulated QPU in myQLM": [[347, "a-new-simulated-qpu-in-myqlm"]], "Tools for fermionic computations (myQLM-fermion)": [[347, "tools-for-fermionic-computations-myqlm-fermion"]], "Batch generators in myQLM": [[347, "batch-generators-in-myqlm"]], "New features": [[347, "new-features"], [347, "id35"], [347, "id38"], [347, "id41"]], "What\u2019s new in myQLM 1.6.1": [[347, "what-s-new-in-myqlm-1-6-1"]], "What\u2019s new in myQLM 1.5.1": [[347, "what-s-new-in-myqlm-1-5-1"]], "What\u2019s new in myQLM 1.4.0": [[347, "what-s-new-in-myqlm-1-4-0"]], "myQLM Power Access": [[347, "myqlm-power-access"]], "Known problems": [[347, "known-problems"]], "ProjectQ interoperability": [[353, "projectq-interoperability"]], "Translating quantum circuits": [[353, "translating-quantum-circuits"], [350, "translating-quantum-circuits"], [354, "translating-quantum-circuits"], [351, "translating-quantum-circuits"], [352, "translating-quantum-circuits"]], "qat.quops.QuantumChannelKraus": [[344, "qat-quops-quantumchannelkraus"]], "qat.quops.ParametricAmplitudeDamping": [[336, "qat-quops-parametricamplitudedamping"]], "Qiskit interoperability": [[350, "qiskit-interoperability"]], "Connecting to a QPU/Backend": [[350, "connecting-to-a-qpu-backend"]], "qat.quops.math_util.partial_trace": [[340, "qat-quops-math-util-partial-trace"]], "qat.quops.ParametricQuantumChannel": [[339, "qat-quops-parametricquantumchannel"]], "Contributing to myQLM": [[348, "contributing-to-myqlm"]], "Combinatorial optimization": [[355, "combinatorial-optimization"]], "NP-hard problems": [[356, "np-hard-problems"]], "Unconstrained Graph Problems": [[356, "unconstrained-graph-problems"]], "Constrained Graph Problems": [[356, "constrained-graph-problems"]], "Other problems": [[356, "other-problems"]], "Simulated Quantum Annealing Benchmarking and Performance": [[356, "simulated-quantum-annealing-benchmarking-and-performance"]], "Demos": [[346, "demos"], [371, "demos"]], "Tutorials": [[346, "tutorials"]], "Running digital quantum simulations for spin and fermionic systems": [[346, "running-digital-quantum-simulations-for-spin-and-fermionic-systems"]], "Programming with qat.lang": [[346, "programming-with-qat-lang"]], "Basic quantum algorithms": [[346, "basic-quantum-algorithms"]], "Adding plugins to your computation stack": [[346, "adding-plugins-to-your-computation-stack"]], "Designing and running variational algorithms in the QLM": [[346, "designing-and-running-variational-algorithms-in-the-qlm"]], "First steps with the QLM": [[346, "first-steps-with-the-qlm"]], "Combinatorial Optimization Problems": [[346, "combinatorial-optimization-problems"]], "interoperability": [[346, "interoperability"]], "Simulation of quantum circuits on the QLM: introduction": [[346, "simulation-of-quantum-circuits-on-the-qlm-introduction"]], "qat.quops.ParametricGateNoise": [[337, "qat-quops-parametricgatenoise"]], "OpenQASM Compiler": [[354, "openqasm-compiler"]], "Interoperability with gate-based framework": [[349, "interoperability-with-gate-based-framework"]], "Available binders": [[349, "available-binders"]], "qat.quops.QuantumChannelChi": [[342, "qat-quops-quantumchannelchi"]], "PyQuil interoperability": [[351, "pyquil-interoperability"]], "Connecting to a QPU": [[351, "connecting-to-a-qpu"]], "qat.quops.QuantumChannelPTM": [[345, "qat-quops-quantumchannelptm"]], "Cirq interoperability": [[352, "cirq-interoperability"]], "qat.quops.QuantumChannelChoi": [[343, "qat-quops-quantumchannelchoi"]], "qat.quops.QuantumChannel": [[341, "qat-quops-quantumchannel"]], "qat.hardware.HardwareModel": [[211, "qat-hardware-hardwaremodel"]], "qat.lang.AQASM.arithmetic.add_const_mod": [[227, "qat-lang-aqasm-arithmetic-add-const-mod"]], "qat.hardware.GatesSpecification": [[210, "qat-hardware-gatesspecification"]], "qat.lang.AQASM.bits.Cbit": [[218, "qat-lang-aqasm-bits-cbit"]], "qat.lang.AQASM.arithmetic": [[226, "qat-lang-aqasm-arithmetic"]], "References": [[226, "references"], [224, "references"], [232, "references"], [236, "references"], [269, "references"]], "qat.lang.AQASM.misc.generate_gate_set": [[221, "qat-lang-aqasm-misc-generate-gate-set"]], "qat.lang.algorithms.amplification_step": [[215, "qat-lang-algorithms-amplification-step"]], "qat.lang.AQASM.gates.Gate": [[220, "qat-lang-aqasm-gates-gate"]], "qat.lang.models.KPTree": [[224, "qat-lang-models-kptree"]], "qat.lang.build_gate": [[217, "qat-lang-build-gate"]], "qat.lang.linking.Linker": [[225, "qat-lang-linking-linker"]], "qat.lang": [[213, "qat-lang"]], "Programming tools": [[213, "programming-tools"]], "Gate structures": [[213, "gate-structures"]], "Quantum types": [[213, "quantum-types"]], "Quantum boolean and expressions": [[213, "quantum-boolean-and-expressions"]], "Quantum integers": [[213, "quantum-integers"], [16, "quantum-integers"]], "Managing registers": [[213, "managing-registers"]], "Gate set management": [[213, "gate-set-management"]], "Linker and low level circuit manipulation": [[213, "linker-and-low-level-circuit-manipulation"]], "Quantum labraries and basic algorithms": [[213, "quantum-labraries-and-basic-algorithms"]], "Arithmetic routines": [[213, "arithmetic-routines"]], "State preparatation and QRAM": [[213, "state-preparatation-and-qram"]], "Algorithms": [[213, "algorithms"]], "qat.lang.AbstractGate": [[214, "qat-lang-abstractgate"]], "qat.lang.AQASM.bits.BoolFormula": [[216, "qat-lang-aqasm-bits-boolformula"]], "qat.lang.AQASM.arithmetic.mult_const": [[230, "qat-lang-aqasm-arithmetic-mult-const"]], "qat.lang.algorithms.amplification.grover_diffusion": [[222, "qat-lang-algorithms-amplification-grover-diffusion"]], "qat.lang.algorithms.amplification.householder": [[223, "qat-lang-algorithms-amplification-householder"]], "qat.lang.AQASM.bits.CRegister": [[219, "qat-lang-aqasm-bits-cregister"]], "qat.lang.AQASM.arithmetic.modular_exp": [[229, "qat-lang-aqasm-arithmetic-modular-exp"]], "qat.hardware.make_depolarizing_hardware_model": [[212, "qat-hardware-make-depolarizing-hardware-model"]], "qat.lang.AQASM.arithmetic.add_mod": [[228, "qat-lang-aqasm-arithmetic-add-mod"]], "qat.lang.AQASM.classarith": [[232, "qat-lang-aqasm-classarith"]], "qat.lang.Program": [[244, "qat-lang-program"]], "qat.lang.AQASM.qbool.QBool": [[247, "qat-lang-aqasm-qbool-qbool"]], "qat.lang.AQASM.qftarith": [[236, "qat-lang-aqasm-qftarith"]], "qat.lang.AQASM.bits.Qbit": [[246, "qat-lang-aqasm-bits-qbit"]], "qat.lang.AQASM.qbool.QClause": [[249, "qat-lang-aqasm-qbool-qclause"]], "qat.lang.algorithms.phase_estimation": [[243, "qat-lang-algorithms-phase-estimation"]], "qat.lang.AQASM.qbool.QBoolArray": [[248, "qat-lang-aqasm-qbool-qboolarray"]], "qat.lang.AQASM.classarith.cuccaro_add": [[235, "qat-lang-aqasm-classarith-cuccaro-add"]], "qat.lang.AQASM.gates.ParamGate": [[242, "qat-lang-aqasm-gates-paramgate"]], "qat.lang.AQASM.qftarith.QFT": [[241, "qat-lang-aqasm-qftarith-qft"]], "qat.lang.AQASM.qint.QArithExp": [[245, "qat-lang-aqasm-qint-qarithexp"]], "qat.lang.AQASM.qint.QCompExp": [[250, "qat-lang-aqasm-qint-qcompexp"]], "qat.lang.AQASM.qftarith.add": [[237, "qat-lang-aqasm-qftarith-add"]], "qat.lang.AQASM.classarith.add": [[233, "qat-lang-aqasm-classarith-add"]], "qat.lang.AQASM.arithmetic.mult_const_mod": [[231, "qat-lang-aqasm-arithmetic-mult-const-mod"]], "qat.lang.AQASM.qftarith.add_const": [[238, "qat-lang-aqasm-qftarith-add-const"]], "qat.lang.AQASM.qftarith.mult_const": [[240, "qat-lang-aqasm-qftarith-mult-const"]], "qat.lang.AQASM.classarith.add_const": [[234, "qat-lang-aqasm-classarith-add-const"]], "qat.lang.AQASM.qftarith.mult": [[239, "qat-lang-aqasm-qftarith-mult"]], "qat.lang.qfunc": [[251, "qat-lang-qfunc"]], "qat.fermion.chemistry.ucc.guess_init_params": [[173, "qat-fermion-chemistry-ucc-guess-init-params"]], "qat.fermion.circuits.make_general_hwe_circ": [[177, "qat-fermion-circuits-make-general-hwe-circ"]], "qat.fermion.circuits.make_ldca_circ": [[179, "qat-fermion-circuits-make-ldca-circ"]], "qat.fermion.hamiltonians.make_embedded_model": [[176, "qat-fermion-hamiltonians-make-embedded-model"]], "qat.fermion.circuits.make_shallow_circ": [[182, "qat-fermion-circuits-make-shallow-circ"]], "qat.fermion.hamiltonians.make_anderson_model": [[174, "qat-fermion-hamiltonians-make-anderson-model"]], "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation": [[187, "qat-fermion-chemistry-pyscf-tools-perform-pyscf-computation"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[170, "qat-fermion-hamiltonians-fermionhamiltonian"]], "qat.fermion.circuits.make_mrep_circ": [[181, "qat-fermion-circuits-make-mrep-circ"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[169, "qat-fermion-hamiltonians-electronicstructurehamiltonian"]], "qat.fermion.chemistry.ucc.select_active_orbitals": [[188, "qat-fermion-chemistry-ucc-select-active-orbitals"]], "qat.fermion.chemistry.ucc.get_hf_ket": [[172, "qat-fermion-chemistry-ucc-get-hf-ket"]], "qat.fermion.circuits.make_compressed_ldca_circ": [[175, "qat-fermion-circuits-make-compressed-ldca-circ"]], "qat.fermion.chemistry.ucc.convert_to_h_integrals": [[168, "qat-fermion-chemistry-ucc-convert-to-h-integrals"]], "qat.fermion.hamiltonians.make_hubbard_model": [[178, "qat-fermion-hamiltonians-make-hubbard-model"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[185, "qat-fermion-chemistry-wrapper-moleculeinfo"]], "qat.fermion.phase_estimation.perform_phase_estimation": [[186, "qat-fermion-phase-estimation-perform-phase-estimation"]], "qat.fermion.trotterisation.make_trotterisation_routine": [[183, "qat-fermion-trotterisation-make-trotterisation-routine"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[184, "qat-fermion-chemistry-wrapper-molecularhamiltonian"]], "qat.fermion.chemistry.ucc.get_cluster_ops": [[171, "qat-fermion-chemistry-ucc-get-cluster-ops"]], "qat.fermion.circuits.make_mr_circ": [[180, "qat-fermion-circuits-make-mr-circ"]], "qat.fermion.transforms.transform_to_bk_basis": [[191, "qat-fermion-transforms-transform-to-bk-basis"]], "qat.fermion.transforms.transform_to_jw_basis": [[192, "qat-fermion-transforms-transform-to-jw-basis"]], "qat.generators.GraphPartitioningGenerator": [[202, "qat-generators-graphpartitioninggenerator"]], "qat.generators.VertexCoverGenerator": [[206, "qat-generators-vertexcovergenerator"]], "qat.fusion.strategies.EagerStrategy": [[196, "qat-fusion-strategies-eagerstrategy"]], "qat.generators.AbstractGenerator": [[199, "qat-generators-abstractgenerator"]], "qat.hardware.DefaultHardwareModel": [[209, "qat-hardware-defaulthardwaremodel"]], "qat.fusion.strategies.AdjacentStrategy": [[195, "qat-fusion-strategies-adjacentstrategy"]], "qat.hardware.DefaultGatesSpecification": [[208, "qat-hardware-defaultgatesspecification"]], "qat.generators.GraphColouringGenerator": [[201, "qat-generators-graphcolouringgenerator"]], "qat.generators.MaxCutGenerator": [[204, "qat-generators-maxcutgenerator"]], "qat.generators.RemoteBatchGenerator": [[205, "qat-generators-remotebatchgenerator"]], "qat.fusion": [[194, "qat-fusion"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[189, "qat-fermion-hamiltonians-spinhamiltonian"]], "qat.fermion.transforms.transform_to_parity_basis": [[193, "qat-fermion-transforms-transform-to-parity-basis"]], "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis": [[190, "qat-fermion-chemistry-ucc-transform-integrals-to-new-basis"]], "qat.generators.KCliqueGenerator": [[203, "qat-generators-kcliquegenerator"]], "qat.hardware": [[207, "qat-hardware"]], "Hardware model and gates specifications": [[207, "hardware-model-and-gates-specifications"]], "Predefined hardware models": [[207, "predefined-hardware-models"]], "qat.generators.CombinatorialOptimizerGenerator": [[200, "qat-generators-combinatorialoptimizergenerator"]], "qat.generators": [[198, "qat-generators"]], "Combinatorial Optimization Generators": [[198, "combinatorial-optimization-generators"]], "Generator Utilities": [[198, "generator-utilities"]], "qat.fusion.strategies.NaiveStrategy": [[197, "qat-fusion-strategies-naivestrategy"]], "Quadratic Unconstrained Binary Optimization (QUBO)": [[24, "quadratic-unconstrained-binary-optimization-qubo"], [364, "quadratic-unconstrained-binary-optimization-qubo"]], "SQA computing": [[34, "sqa-computing"]], "Inner workings": [[34, "inner-workings"]], "Executing / Simulating quantum programs": [[27, "executing-simulating-quantum-programs"]], "Observable Job": [[30, "observable-job"]], "Ising Hamiltonians": [[23, "ising-hamiltonians"]], "Ising Observables": [[23, "ising-observables"]], "Bibliography": [[23, "bibliography"], [362, "bibliography"]], "Quantum Processing Unit (QPU)": [[33, "quantum-processing-unit-qpu"]], "Automated batch generation": [[31, "automated-batch-generation"]], "Creating observables": [[26, "creating-observables"]], "Observables": [[26, "observables"]], "Observables operations": [[26, "observables-operations"]], "Single term observables": [[26, "single-term-observables"]], "Using an observable": [[26, "using-an-observable"]], "Make your own plugin": [[40, "make-your-own-plugin"]], "Method compile": [[40, "method-compile"]], "Method post_process": [[40, "method-post-process"]], "A concrete example": [[40, "a-concrete-example"], [41, "a-concrete-example"]], "Make your own QPU": [[35, "make-your-own-qpu"]], "Method submit_job": [[35, "method-submit-job"]], "Method get_specs": [[35, "method-get-specs"]], "Make you own junction": [[41, "make-you-own-junction"]], "Sample Job": [[29, "sample-job"]], "Result of a quantum program": [[32, "result-of-a-quantum-program"]], "General Combinatorial Problems": [[25, "general-combinatorial-problems"]], "CLinalg: C++ Linear-algebra-based simulator": [[37, "clinalg-c-linear-algebra-based-simulator"], [36, "clinalg-c-linear-algebra-based-simulator"]], "Constructing one or multiple Jobs (using Batch)": [[28, "constructing-one-or-multiple-jobs-using-batch"]], "Extending a QPU (by using Plugins)": [[39, "extending-a-qpu-by-using-plugins"]], "Annealing programming": [[22, "annealing-programming"]], "Analog Jobs": [[21, "analog-jobs"]], "Gate based computing": [[36, "gate-based-computing"]], "QPU Emulators": [[36, "id4"]], "PyLinalg: Python Linear-algebra-based simulator": [[36, "pylinalg-python-linear-algebra-based-simulator"], [38, "pylinalg-python-linear-algebra-based-simulator"]], "qat.opt.mixing_factory.InitialStateBuilder": [[272, "qat-opt-mixing-factory-initialstatebuilder"]], "qat.opt.GraphPartitioning": [[265, "qat-opt-graphpartitioning"]], "qat.opt.mixing_factory.IndependentAQO": [[271, "qat-opt-mixing-factory-independentaqo"]], "qat.lang.QRoutine": [[255, "qat-lang-qroutine"]], "qat.opt.Ising": [[266, "qat-opt-ising"]], "qat.lang.qrout": [[254, "qat-lang-qrout"]], "qat.opt.MixingFactory": [[269, "qat-opt-mixingfactory"]], "qat.opt.circuit_generator.CircuitGenerator": [[261, "qat-opt-circuit-generator-circuitgenerator"]], "qat.opt": [[258, "qat-opt"]], "Generic combinatorial optimization": [[258, "generic-combinatorial-optimization"]], "Quadratic problems: Ising and QUBO": [[258, "quadratic-problems-ising-and-qubo"]], "Classes for the supported NP-Hard problems": [[258, "classes-for-the-supported-np-hard-problems"]], "Generating QAOA Ans\u00e4tze or QA Jobs": [[258, "generating-qaoa-ansatze-or-qa-jobs"]], "qat.vsolve.ansatz.AnsatzFactory": [[259, "qat-vsolve-ansatz-ansatzfactory"]], "qat.opt.CombinatorialProblem": [[263, "qat-opt-combinatorialproblem"]], "qat.opt.GraphColouring": [[264, "qat-opt-graphcolouring"]], "qat.opt.mixing_factory": [[270, "qat-opt-mixing-factory"]], "Creating custom Quantum Annealing Jobs": [[270, "creating-custom-quantum-annealing-jobs"]], "qat.opt.KClique": [[267, "qat-opt-kclique"]], "qat.lang.AQASM.bits.QRegister": [[253, "qat-lang-aqasm-bits-qregister"]], "qat.lang.algorithms.amplification.uniform_distribution": [[257, "qat-lang-algorithms-amplification-uniform-distribution"]], "qat.lang.AQASM.qint.QInt": [[252, "qat-lang-aqasm-qint-qint"]], "qat.opt.BILP": [[260, "qat-opt-bilp"]], "qat.opt.MaxCut": [[268, "qat-opt-maxcut"]], "qat.lang.algorithms.quantum_counting": [[256, "qat-lang-algorithms-quantum-counting"]], "qat.opt.boolexpr.Clause": [[262, "qat-opt-boolexpr-clause"]], "User guide": [[7, "user-guide"]], "Libraries built upon Qaptiva": [[7, "libraries-built-upon-qaptiva"]], "Oracles and quantum types": [[16, "oracles-and-quantum-types"]], "Quantum booleans, quantum conditionals, and quantum oracles": [[16, "quantum-booleans-quantum-conditionals-and-quantum-oracles"]], "Allocation": [[16, "allocation"], [16, "id1"]], "Logical expressions": [[16, "logical-expressions"]], "Evaluating expressions": [[16, "evaluating-expressions"]], "Quantum conditionals and with statements": [[16, "quantum-conditionals-and-with-statements"]], "Building phase oracles": [[16, "building-phase-oracles"]], "Setting a classical value": [[16, "setting-a-classical-value"]], "Arithmetic expressions": [[16, "arithmetic-expressions"]], "Conditionals on quantum integers": [[16, "conditionals-on-quantum-integers"]], "Example: Grover oracle for graph coloring": [[16, "example-grover-oracle-for-graph-coloring"]], "Installing myQLM": [[4, "installing-myqlm"]], "Prerequisites": [[4, "prerequisites"]], "Compatibility Matrix": [[4, "compatibility-matrix"]], "Install": [[4, "id4"]], "Install myQLM package": [[4, "install-myqlm-package"]], "Interoperability": [[4, "interoperability"]], "Writing quantum programs": [[8, "writing-quantum-programs"], [1, "writing-quantum-programs"]], "Gate-based programming": [[9, "gate-based-programming"]], "Getting started": [[0, "id1"]], "Creating and adding quantum gates to a circuit": [[10, "creating-and-adding-quantum-gates-to-a-circuit"]], "Native gates, controls and daggers": [[10, "native-gates-controls-and-daggers"]], "User defined parametrized gates (AbstractGate)": [[10, "user-defined-parametrized-gates-abstractgate"]], "Matrix definition": [[10, "matrix-definition"]], "Subcircuit definition": [[10, "subcircuit-definition"]], "Arity generator": [[10, "arity-generator"]], "Deprecated custom gates": [[10, "deprecated-custom-gates"]], "Building schedules": [[19, "building-schedules"]], "Hamiltonian as a list of coefficients and Observables": [[19, "hamiltonian-as-a-list-of-coefficients-and-observables"]], "Using abstract variables": [[19, "using-abstract-variables"]], "Hamiltonian as one Observable": [[19, "hamiltonian-as-one-observable"]], "Ancillae management and compute scopes": [[15, "ancillae-management-and-compute-scopes"]], "Automated ancillae management": [[15, "automated-ancillae-management"]], "Compute/uncompute scopes": [[15, "compute-uncompute-scopes"]], "Executing quantum programs": [[2, "executing-quantum-programs"]], "Variational algorithms with Qaptiva": [[3, "variational-algorithms-with-qaptiva"]], "Analog programming": [[18, "analog-programming"]], "Background": [[18, "background"]], "Creating analog Jobs": [[18, "creating-analog-jobs"]], "myQLM license": [[5, "myqlm-license"]], "Proprietary part": [[5, "proprietary-part"]], "Open source part": [[5, "open-source-part"]], "Atos Quantum Assembler (AQASM)": [[17, "atos-quantum-assembler-aqasm"]], "The text format": [[17, "the-text-format"]], "Header": [[17, "header"]], "Instructions": [[17, "instructions"]], "List of gates": [[17, "list-of-gates"]], "Compiling .aqasm files": [[17, "compiling-aqasm-files"]], "Compilation time linking": [[17, "compilation-time-linking"]], "Example of a grover algorithm": [[1, "example-of-a-grover-algorithm"]], "The diffusion": [[1, "the-diffusion"]], "The oracle": [[1, "the-oracle"]], "Creating variational circuits": [[11, "creating-variational-circuits"]], "Variational jobs": [[11, "variational-jobs"]], "Binding variables": [[11, "binding-variables"]], "myQLM Installation on MacOS": [[6, "myqlm-installation-on-macos"]], "Quantum routines (and Oracles)": [[13, "quantum-routines-and-oracles"]], "Naming quantum routines": [[14, "naming-quantum-routines"]], "Lifting Python functions into quantum gates": [[14, "lifting-python-functions-into-quantum-gates"]], "Linking at circuit extraction": [[14, "linking-at-circuit-extraction"]], "Manipulating schedules": [[20, "manipulating-schedules"]], "Quantum programs": [[12, "quantum-programs"]], "Allocating qubit and classical registers": [[12, "allocating-qubit-and-classical-registers"]], "Applying quantum gate": [[12, "applying-quantum-gate"]], "Advanced operations": [[12, "advanced-operations"]], "Generating the circuit": [[12, "generating-the-circuit"]], "Exporting the circuit": [[12, "exporting-the-circuit"]], "qat.opt.mixing_factory.SimpleInitialState": [[273, "qat-opt-mixing-factory-simpleinitialstate"]], "qat.opt.results.KCliqueResult": [[277, "qat-opt-results-kcliqueresult"]], "qat.opt.results.GraphPartitioningResult": [[276, "qat-opt-results-graphpartitioningresult"]], "qat.opt.results": [[274, "qat-opt-results"]], "Combinatorial Optimization Generators Results": [[274, "combinatorial-optimization-generators-results"]], "qat.opt.MWIS": [[279, "qat-opt-mwis"]], "qat.opt.QUBO": [[281, "qat-opt-qubo"]], "qat.plugins": [[285, "qat-plugins"]], "Circuit rewriting plugins": [[285, "circuit-rewriting-plugins"]], "Variational optimization plugins": [[285, "variational-optimization-plugins"]], "Plugin for fermionic systems": [[285, "plugin-for-fermionic-systems"]], "Plugin utilities": [[285, "plugin-utilities"]], "qat.plugins.Display": [[290, "qat-plugins-display"]], "qat.plugins.FusionPlugin": [[291, "qat-plugins-fusionplugin"]], "Example": [[291, "example"], [372, "example"]], "qat.opt.NumberPartitioning": [[280, "qat-opt-numberpartitioning"]], "qat.plugins.AbstractPlugin": [[286, "qat-plugins-abstractplugin"]], "qat.plugins.GradientDescentOptimizer": [[292, "qat-plugins-gradientdescentoptimizer"]], "qat.opt.results.CombinatorialResult": [[275, "qat-opt-results-combinatorialresult"]], "qat.opt.boolexpr.Var": [[283, "qat-opt-boolexpr-var"]], "qat.plugins.AdaptVQEPlugin": [[287, "qat-plugins-adaptvqeplugin"]], "qat.plugins.Junction": [[293, "qat-plugins-junction"]], "qat.opt.results.VertexCoverResult": [[278, "qat-opt-results-vertexcoverresult"]], "qat.plugins.CircuitInliner": [[288, "qat-plugins-circuitinliner"]], "qat.opt.schedule_generator.ScheduleGenerator": [[282, "qat-opt-schedule-generator-schedulegenerator"]], "qat.opt.VertexCover": [[284, "qat-opt-vertexcover"]], "qat.plugins.CostFunctionPlugin": [[289, "qat-plugins-costfunctionplugin"]], "Spin and fermionic systems": [[371, "spin-and-fermionic-systems"]], "Migrating code based on deprecated library qat.dqs": [[375, "migrating-code-based-on-deprecated-library-qat-dqs"]], "Max Cut Generator": [[366, "max-cut-generator"]], "Number Partitioning": [[360, "number-partitioning"]], "Graph Partitioning": [[357, "graph-partitioning"]], "Vertex Cover": [[361, "vertex-cover"]], "Graph Partitioning Generator": [[367, "graph-partitioning-generator"]], "Quantum Approximate Optimization Algorithm (QAOA)": [[362, "quantum-approximate-optimization-algorithm-qaoa"]], "myQLM \u2013 Quantum Python Package": [[376, "myqlm-quantum-python-package"]], "KClique": [[358, "kclique"]], "K-Clique Generator": [[368, "k-clique-generator"]], "Quantum application (including Ans\u00e4tze and state preparation)": [[373, "quantum-application-including-ansatze-and-state-preparation"]], "Table of Contents": [[373, "table-of-contents"], [372, "table-of-contents"]], "Variational Quantum Eigensolver (VQE)": [[373, "variational-quantum-eigensolver-vqe"]], "Quantum Chemistry tools for VQE": [[373, "quantum-chemistry-tools-for-vqe"]], "MolecularHamiltonian": [[373, "molecularhamiltonian"]], "MoleculeInfo": [[373, "moleculeinfo"]], "Trotterization tools": [[373, "trotterization-tools"]], "Interoperability with annealing framework": [[377, "interoperability-with-annealing-framework"]], "Vertex Cover Generator": [[369, "vertex-cover-generator"]], "Crossing lattice": [[364, "crossing-lattice"]], "Maximum Weighted Independent Set (MWIS)": [[364, "maximum-weighted-independent-set-mwis"]], "Problem generators": [[365, "problem-generators"]], "NP-hard problems generators": [[365, "np-hard-problems-generators"]], "Creating and manipulating Hamiltonians": [[372, "creating-and-manipulating-hamiltonians"]], "Defining a Hamiltonian": [[372, "defining-a-hamiltonian"]], "Spin Hamiltonians": [[372, "spin-hamiltonians"]], "Fermionic Hamiltonians": [[372, "fermionic-hamiltonians"]], "Fermionic Hamiltonian using one and two-electrons integrals": [[372, "fermionic-hamiltonian-using-one-and-two-electrons-integrals"]], "The get_matrix() method": [[372, "the-get-matrix-method"]], "Fermionic to spin representation": [[372, "fermionic-to-spin-representation"]], "Spin and fermionic Hamiltonian operations": [[372, "spin-and-fermionic-hamiltonian-operations"]], "Some Hamiltonian constructors": [[372, "some-hamiltonian-constructors"]], "Plugins": [[374, "plugins"]], "Adiabatic Quantum Optimization (AQO)": [[363, "adiabatic-quantum-optimization-aqo"]], "Graph Colouring Generator": [[370, "graph-colouring-generator"]], "Max Cut": [[359, "max-cut"]]}, "indexentries": {"module": [[45, "module-qat"], [46, "module-qat.interop"], [47, "module-qat.interop.cirq"], [50, "module-qat.interop.openqasm"], [52, "module-qat.interop.projectq"], [55, "module-qat.interop.pyquil"], [59, "module-qat.interop.qiskit"], [67, "module-qat.pylinalg"], [68, "module-qat.pylinalg.simulator"], [75, "module-qat.comm"], [76, "module-qat.comm.datamodel"], [79, "module-qat.comm.exceptions"], [83, "module-qat.comm.resource"], [88, "module-qat.comm.shared"], [91, "module-qat.core"], [103, "module-qat.core.application"], [106, "module-qat.core.circuit_builder"], [111, "module-qat.core.gate_set"], [115, "module-qat.core.qpu"], [117, "module-qat.core.spins"], [120, "module-qat.core.variables"], [148, "module-qat.devices"], [164, "module-qat.fermion"], [164, "module-qat.fermion.chemistry"], [164, "module-qat.fermion.chemistry.qse"], [164, "module-qat.fermion.chemistry.ucc"], [164, "module-qat.fermion.circuits"], [164, "module-qat.fermion.hamiltonians"], [164, "module-qat.fermion.phase_estimation"], [164, "module-qat.fermion.transforms"], [194, "module-qat.fusion"], [198, "module-qat.generators"], [207, "module-qat.hardware"], [213, "module-qat.lang"], [213, "module-qat.lang.algorithms"], [226, "module-qat.lang.AQASM.arithmetic"], [232, "module-qat.lang.AQASM.classarith"], [236, "module-qat.lang.AQASM.qftarith"], [258, "module-qat.opt"], [270, "module-qat.opt.mixing_factory"], [274, "module-qat.opt.results"], [285, "module-qat.plugins"], [305, "module-qat.qpus"], [314, "module-qat.quops"], [314, "module-qat.quops.metrics"]], "qat": [[45, "module-qat"]], "qat.interop": [[46, "module-qat.interop"]], "qat.interop.cirq": [[47, "module-qat.interop.cirq"]], "cirq_to_qlm() (in module qat.interop.cirq)": [[48, "qat.interop.cirq.cirq_to_qlm"]], "qlm_to_cirq() (in module qat.interop.cirq)": [[49, "qat.interop.cirq.qlm_to_cirq"]], "qat.interop.openqasm": [[50, "module-qat.interop.openqasm"]], "oqasmparser (class in qat.interop.openqasm)": [[51, "qat.interop.openqasm.OqasmParser"]], "compile() (qat.interop.openqasm.oqasmparser method)": [[51, "qat.interop.openqasm.OqasmParser.compile"]], "qat.interop.projectq": [[52, "module-qat.interop.projectq"]], "aqasmengine (class in qat.interop.projectq)": [[53, "qat.interop.projectq.AqasmEngine"]], "projectq_to_qlm() (qat.interop.projectq.aqasmengine method)": [[53, "qat.interop.projectq.AqasmEngine.projectq_to_qlm"]], "aqasmprinter (class in qat.interop.projectq)": [[54, "qat.interop.projectq.AqasmPrinter"]], "qat.interop.pyquil": [[55, "module-qat.interop.pyquil"]], "pyquil_to_qlm() (in module qat.interop.pyquil)": [[56, "qat.interop.pyquil.pyquil_to_qlm"]], "pyquilqpu (class in qat.interop.pyquil)": [[57, "qat.interop.pyquil.PyquilQPU"]], "set_qpu() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.set_qpu"]], "submit() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit"]], "submit_job() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit_job"]], "qlm_to_pyquil() (in module qat.interop.pyquil)": [[58, "qat.interop.pyquil.qlm_to_pyquil"]], "qat.interop.qiskit": [[59, "module-qat.interop.qiskit"]], "asyncbackendtoqpu (class in qat.interop.qiskit)": [[60, "qat.interop.qiskit.AsyncBackendToQPU"]], "retrieve_job() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.retrieve_job"]], "submit() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.submit"]], "backendtoqpu (class in qat.interop.qiskit)": [[61, "qat.interop.qiskit.BackendToQPU"]], "submit() (qat.interop.qiskit.backendtoqpu method)": [[61, "qat.interop.qiskit.BackendToQPU.submit"]], "qiskit_to_qlm() (in module qat.interop.qiskit)": [[62, "qat.interop.qiskit.qiskit_to_qlm"]], "qiskitjob (class in qat.interop.qiskit)": [[63, "qat.interop.qiskit.QiskitJob"]], "cancel() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.cancel"]], "dump() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.dump"]], "job_id() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.job_id"]], "result() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.result"]], "status() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.status"]], "qiskitruntimeqpu (class in qat.interop.qiskit.runtime)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU"]], "submit() (qat.interop.qiskit.runtime.qiskitruntimeqpu method)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU.submit"]], "qlm_to_qiskit() (in module qat.interop.qiskit)": [[65, "qat.interop.qiskit.qlm_to_qiskit"]], "qputobackend (class in qat.interop.qiskit)": [[66, "qat.interop.qiskit.QPUToBackend"]], "set_qpu() (qat.interop.qiskit.qputobackend method)": [[66, "qat.interop.qiskit.QPUToBackend.set_qpu"]], "qat.pylinalg": [[67, "module-qat.pylinalg"]], "qat.pylinalg.simulator": [[68, "module-qat.pylinalg.simulator"]], "mat2nparray() (in module qat.pylinalg.simulator)": [[69, "qat.pylinalg.simulator.mat2nparray"]], "measure() (in module qat.pylinalg.simulator)": [[70, "qat.pylinalg.simulator.measure"]], "project() (in module qat.pylinalg.simulator)": [[71, "qat.pylinalg.simulator.project"]], "raise_break() (in module qat.pylinalg.simulator)": [[72, "qat.pylinalg.simulator.raise_break"]], "reset() (in module qat.pylinalg.simulator)": [[73, "qat.pylinalg.simulator.reset"]], "simulate() (in module qat.pylinalg.simulator)": [[74, "qat.pylinalg.simulator.simulate"]], "qat.comm": [[75, "module-qat.comm"]], "qat.comm.datamodel": [[76, "module-qat.comm.datamodel"]], "qat.comm.datamodel.ttypes.gatedefinition (built-in class)": [[77, "qat.comm.datamodel.ttypes.GateDefinition"]], "op (class in qat.comm.datamodel.ttypes)": [[78, "qat.comm.datamodel.ttypes.Op"]], "qat.comm.exceptions": [[79, "module-qat.comm.exceptions"]], "qat.comm.exceptions.ttypes.errortype (built-in class)": [[80, "qat.comm.exceptions.ttypes.ErrorType"]], "qat.comm.exceptions.ttypes.pluginexception (built-in class)": [[81, "qat.comm.exceptions.ttypes.PluginException"]], "qat.comm.exceptions.ttypes.qpuexception (built-in class)": [[82, "qat.comm.exceptions.ttypes.QPUException"]], "qat.comm.resource": [[83, "module-qat.comm.resource"]], "qat.comm.resource.ttypes.allocationmodel (built-in class)": [[84, "qat.comm.resource.ttypes.AllocationModel"]], "qat.comm.resource.ttypes.device (built-in class)": [[85, "qat.comm.resource.ttypes.Device"]], "nodetype (class in qat.comm.resource.ttypes)": [[86, "qat.comm.resource.ttypes.NodeType"]], "qat.comm.resource.ttypes.resourcemodel (built-in class)": [[87, "qat.comm.resource.ttypes.ResourceModel"]], "qat.comm.shared": [[88, "module-qat.comm.shared"]], "intermediatemeasurement (class in qat.comm.shared.ttypes)": [[89, "qat.comm.shared.ttypes.IntermediateMeasurement"]], "processingtype (class in qat.comm.shared.ttypes)": [[90, "qat.comm.shared.ttypes.ProcessingType"]], "qat.core": [[91, "module-qat.core"]], "aggregate_data() (in module qat.core.wrappers.result)": [[92, "qat.core.wrappers.result.aggregate_data"]], "assert_plugin() (in module qat.core.assertion)": [[93, "qat.core.assertion.assert_plugin"]], "assert_qpu() (in module qat.core.assertion)": [[94, "qat.core.assertion.assert_qpu"]], "batch (class in qat.core)": [[95, "qat.core.Batch"]], "dump() (qat.core.batch method)": [[95, "qat.core.Batch.dump"]], "from_bytes() (qat.core.batch class method)": [[95, "qat.core.Batch.from_bytes"]], "from_thrift() (qat.core.batch class method)": [[95, "qat.core.Batch.from_thrift"]], "get_variables() (qat.core.batch method)": [[95, "qat.core.Batch.get_variables"]], "load() (qat.core.batch static method)": [[95, "qat.core.Batch.load"]], "to_cpp() (qat.core.batch method)": [[95, "qat.core.Batch.to_cpp"]], "to_thrift() (qat.core.batch method)": [[95, "qat.core.Batch.to_thrift"]], "batchresult (class in qat.core)": [[96, "qat.core.BatchResult"]], "append() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.append"]], "dump() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.dump"]], "extend() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.extend"]], "from_thrift() (qat.core.batchresult class method)": [[96, "qat.core.BatchResult.from_thrift"]], "load() (qat.core.batchresult static method)": [[96, "qat.core.BatchResult.load"]], "circuit (class in qat.core)": [[97, "qat.core.Circuit"]], "bind_variable() (qat.core.circuit method)": [[97, "qat.core.Circuit.bind_variable"]], "bind_variables() (qat.core.circuit method)": [[97, "qat.core.Circuit.bind_variables"]], "compile() (qat.core.circuit method)": [[97, "qat.core.Circuit.compile"]], "count() (qat.core.circuit method)": [[97, "qat.core.Circuit.count"]], "dag() (qat.core.circuit method)": [[97, "qat.core.Circuit.dag"]], "depth() (qat.core.circuit method)": [[97, "qat.core.Circuit.depth"]], "display() (qat.core.circuit method)": [[97, "qat.core.Circuit.display"]], "dump() (qat.core.circuit method)": [[97, "qat.core.Circuit.dump"]], "empty() (qat.core.circuit static method)": [[97, "qat.core.Circuit.empty"]], "eval() (qat.core.circuit method)": [[97, "qat.core.Circuit.eval"]], "fill_matrices() (qat.core.circuit method)": [[97, "qat.core.Circuit.fill_matrices"]], "from_bytes() (qat.core.circuit class method)": [[97, "qat.core.Circuit.from_bytes"]], "from_thrift() (qat.core.circuit class method)": [[97, "qat.core.Circuit.from_thrift"]], "gate_set (qat.core.circuit property)": [[97, "qat.core.Circuit.gate_set"]], "get_variables() (qat.core.circuit method)": [[97, "qat.core.Circuit.get_variables"]], "insert_gate() (qat.core.circuit method)": [[97, "qat.core.Circuit.insert_gate"]], "iterate_simple() (qat.core.circuit method)": [[97, "qat.core.Circuit.iterate_simple"]], "load() (qat.core.circuit class method)": [[97, "qat.core.Circuit.load"]], "remove_locks() (qat.core.circuit method)": [[97, "qat.core.Circuit.remove_locks"]], "run() (qat.core.circuit method)": [[97, "qat.core.Circuit.run"]], "shift_qbits() (qat.core.circuit method)": [[97, "qat.core.Circuit.shift_qbits"]], "statistics() (qat.core.circuit method)": [[97, "qat.core.Circuit.statistics"]], "to_job() (qat.core.circuit method)": [[97, "qat.core.Circuit.to_job"]], "display() (in module qat.core.console)": [[98, "qat.core.console.display"]], "evaluate() (in module qat.core.formula_eval)": [[99, "qat.core.formula_eval.evaluate"]], "hardwarespecs (class in qat.core)": [[100, "qat.core.HardwareSpecs"]], "as_graph() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.as_graph"]], "as_quameleon() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.as_quameleon"]], "dump() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.dump"]], "from_thrift() (qat.core.hardwarespecs class method)": [[100, "qat.core.HardwareSpecs.from_thrift"]], "load() (qat.core.hardwarespecs static method)": [[100, "qat.core.HardwareSpecs.load"]], "nbqbits (qat.core.hardwarespecs property)": [[100, "qat.core.HardwareSpecs.nbqbits"]], "job (class in qat.core)": [[101, "qat.core.Job"]], "compile() (qat.core.job method)": [[101, "qat.core.Job.compile"]], "differentiate() (qat.core.job method)": [[101, "qat.core.Job.differentiate"]], "dump() (qat.core.job method)": [[101, "qat.core.Job.dump"]], "eval() (qat.core.job method)": [[101, "qat.core.Job.eval"]], "from_bytes() (qat.core.job class method)": [[101, "qat.core.Job.from_bytes"]], "from_thrift() (qat.core.job class method)": [[101, "qat.core.Job.from_thrift"]], "get_variables() (qat.core.job method)": [[101, "qat.core.Job.get_variables"]], "gradient() (qat.core.job method)": [[101, "qat.core.Job.gradient"]], "load() (qat.core.job class method)": [[101, "qat.core.Job.load"]], "parameter_map (qat.core.job property)": [[101, "qat.core.Job.parameter_map"]], "psi_0 (qat.core.job property)": [[101, "qat.core.Job.psi_0"]], "run() (qat.core.job method)": [[101, "qat.core.Job.run"]], "shift_qbits() (qat.core.job method)": [[101, "qat.core.Job.shift_qbits"]], "threshold (qat.core.job property)": [[101, "qat.core.Job.threshold"]], "to_cpp() (qat.core.job method)": [[101, "qat.core.Job.to_cpp"]], "to_thrift() (qat.core.job method)": [[101, "qat.core.Job.to_thrift"]], "load_state_vector_from_bin() (in module qat.core.util)": [[102, "qat.core.util.load_state_vector_from_bin"]], "qat.core.application": [[103, "module-qat.core.application"]], "application (class in qat.core.application)": [[104, "qat.core.application.Application"]], "execute() (qat.core.application.application method)": [[104, "qat.core.application.Application.execute"]], "serve() (qat.core.application.application method)": [[104, "qat.core.application.Application.serve"]], "remoteapplication (class in qat.core.application)": [[105, "qat.core.application.RemoteApplication"]], "qat.core.circuit_builder": [[106, "module-qat.core.circuit_builder"]], "default_gate_set() (in module qat.core.circuit_builder.matrix_util)": [[107, "qat.core.circuit_builder.matrix_util.default_gate_set"]], "get_param_generator() (in module qat.core.circuit_builder.matrix_util)": [[108, "qat.core.circuit_builder.matrix_util.get_param_generator"]], "get_predef_generator() (in module qat.core.circuit_builder.matrix_util)": [[109, "qat.core.circuit_builder.matrix_util.get_predef_generator"]], "variablenamenotavailable (class in qat.core.circuit_builder.builder)": [[110, "qat.core.circuit_builder.builder.VariableNameNotAvailable"]], "qat.core.gate_set": [[111, "module-qat.core.gate_set"]], "gateset (class in qat.core.gate_set)": [[112, "qat.core.gate_set.GateSet"]], "add_signature() (qat.core.gate_set.gateset method)": [[112, "qat.core.gate_set.GateSet.add_signature"]], "union() (qat.core.gate_set.gateset method)": [[112, "qat.core.gate_set.GateSet.union"]], "gatesignature (class in qat.core.gate_set)": [[113, "qat.core.gate_set.GateSignature"]], "get_circuit() (qat.core.gate_set.gatesignature method)": [[113, "qat.core.gate_set.GateSignature.get_circuit"]], "get_matrix() (qat.core.gate_set.gatesignature method)": [[113, "qat.core.gate_set.GateSignature.get_matrix"]], "set_circuit_generator() (qat.core.gate_set.gatesignature method)": [[113, "qat.core.gate_set.GateSignature.set_circuit_generator"]], "set_matrix_generator() (qat.core.gate_set.gatesignature method)": [[113, "qat.core.gate_set.GateSignature.set_matrix_generator"]], "gatesyntaxredefinition (class in qat.core.gate_set)": [[114, "qat.core.gate_set.GateSyntaxRedefinition"]], "qat.core.qpu": [[115, "module-qat.core.qpu"]], "commonqpu (class in qat.core.qpu)": [[116, "qat.core.qpu.CommonQPU"]], "qat.core.spins": [[117, "module-qat.core.spins"]], "integer_to_spins() (in module qat.core.spins)": [[118, "qat.core.spins.integer_to_spins"]], "spins_to_integer() (in module qat.core.spins)": [[119, "qat.core.spins.spins_to_integer"]], "qat.core.variables": [[120, "module-qat.core.variables"]], "built-in function": [[121, "qat.core.variables.abso"], [122, "qat.core.variables.angle"], [124, "qat.core.variables.atan2"], [125, "qat.core.variables.cos"], [126, "qat.core.variables.exp"], [127, "qat.core.variables.get_item"], [128, "qat.core.variables.heaviside"], [129, "qat.core.variables.imag"], [130, "qat.core.variables.ln"], [131, "qat.core.variables.real"], [132, "qat.core.variables.sin"], [133, "qat.core.variables.sqrt"], [135, "qat.core.variables.vmax"]], "qat.core.variables.abso()": [[121, "qat.core.variables.abso"]], "qat.core.variables.angle()": [[122, "qat.core.variables.angle"]], "arithexpression (class in qat.core.variables)": [[123, "qat.core.variables.ArithExpression"]], "differentiate() (qat.core.variables.arithexpression method)": [[123, "qat.core.variables.ArithExpression.differentiate"]], "from_string() (qat.core.variables.arithexpression static method)": [[123, "qat.core.variables.ArithExpression.from_string"]], "get_variables() (qat.core.variables.arithexpression method)": [[123, "qat.core.variables.ArithExpression.get_variables"]], "pretty_print() (qat.core.variables.arithexpression method)": [[123, "qat.core.variables.ArithExpression.pretty_print"]], "to_thrift() (qat.core.variables.arithexpression method)": [[123, "qat.core.variables.ArithExpression.to_thrift"]], "qat.core.variables.atan2()": [[124, "qat.core.variables.atan2"]], "qat.core.variables.cos()": [[125, "qat.core.variables.cos"]], "qat.core.variables.exp()": [[126, "qat.core.variables.exp"]], "qat.core.variables.get_item()": [[127, "qat.core.variables.get_item"]], "qat.core.variables.heaviside()": [[128, "qat.core.variables.heaviside"]], "qat.core.variables.imag()": [[129, "qat.core.variables.imag"]], "qat.core.variables.ln()": [[130, "qat.core.variables.ln"]], "qat.core.variables.real()": [[131, "qat.core.variables.real"]], "qat.core.variables.sin()": [[132, "qat.core.variables.sin"]], "qat.core.variables.sqrt()": [[133, "qat.core.variables.sqrt"]], "symbol (class in qat.core.variables)": [[134, "qat.core.variables.Symbol"]], "qat.core.variables.vmax()": [[135, "qat.core.variables.vmax"]], "observable (class in qat.core)": [[136, "qat.core.Observable"]], "constant_coeff (qat.core.observable attribute)": [[136, "qat.core.Observable.constant_coeff"]], "dump() (qat.core.observable method)": [[136, "qat.core.Observable.dump"]], "ising (qat.core.observable attribute)": [[136, "qat.core.Observable.ising"]], "load() (qat.core.observable class method)": [[136, "qat.core.Observable.load"]], "nbqbits (qat.core.observable attribute)": [[136, "qat.core.Observable.nbqbits"]], "terms (qat.core.observable attribute)": [[136, "qat.core.Observable.terms"]], "to_matrix() (qat.core.observable method)": [[136, "qat.core.Observable.to_matrix"]], "parameter (class in qat.core)": [[137, "qat.core.Parameter"]], "func (qat.core.parameter property)": [[137, "qat.core.Parameter.func"]], "generate_noise() (qat.core.parameter method)": [[137, "qat.core.Parameter.generate_noise"]], "get_noise() (qat.core.parameter method)": [[137, "qat.core.Parameter.get_noise"]], "psd (qat.core.parameter property)": [[137, "qat.core.Parameter.psd"]], "plot_in_notebook() (in module qat.core.printer)": [[138, "qat.core.printer.plot_in_notebook"]], "result (class in qat.core)": [[139, "qat.core.Result"]], "add_sample() (qat.core.result method)": [[139, "qat.core.Result.add_sample"]], "display() (qat.core.result method)": [[139, "qat.core.Result.display"]], "dump() (qat.core.result method)": [[139, "qat.core.Result.dump"]], "from_bytes() (qat.core.result class method)": [[139, "qat.core.Result.from_bytes"]], "from_thrift() (qat.core.result class method)": [[139, "qat.core.Result.from_thrift"]], "load() (qat.core.result static method)": [[139, "qat.core.Result.load"]], "parameter_map (qat.core.result property)": [[139, "qat.core.Result.parameter_map"]], "plot() (qat.core.result method)": [[139, "qat.core.Result.plot"]], "unpack() (qat.core.result method)": [[139, "qat.core.Result.unpack"]], "value (qat.core.result property)": [[139, "qat.core.Result.value"]], "values (qat.core.result property)": [[139, "qat.core.Result.values"]], "wrap_samples() (qat.core.result method)": [[139, "qat.core.Result.wrap_samples"]], "sample (class in qat.core)": [[140, "qat.core.Sample"]], "amplitude (qat.core.sample property)": [[140, "qat.core.Sample.amplitude"]], "from_bytes() (qat.core.sample class method)": [[140, "qat.core.Sample.from_bytes"]], "from_thrift() (qat.core.sample class method)": [[140, "qat.core.Sample.from_thrift"]], "set_qreg() (qat.core.sample method)": [[140, "qat.core.Sample.set_qreg"]], "state (qat.core.sample property)": [[140, "qat.core.Sample.state"]], "schedule (class in qat.core)": [[141, "qat.core.Schedule"]], "dump() (qat.core.schedule method)": [[141, "qat.core.Schedule.dump"]], "get_variables() (qat.core.schedule method)": [[141, "qat.core.Schedule.get_variables"]], "load() (qat.core.schedule class method)": [[141, "qat.core.Schedule.load"]], "to_job() (qat.core.schedule method)": [[141, "qat.core.Schedule.to_job"]], "state (class in qat.core.wrappers.result)": [[142, "qat.core.wrappers.result.State"]], "bitstring (qat.core.wrappers.result.state property)": [[142, "qat.core.wrappers.result.State.bitstring"]], "int (qat.core.wrappers.result.state property)": [[142, "qat.core.wrappers.result.State.int"]], "lsb_int (qat.core.wrappers.result.state property)": [[142, "qat.core.wrappers.result.State.lsb_int"]], "value (qat.core.wrappers.result.state property)": [[142, "qat.core.wrappers.result.State.value"]], "term (class in qat.core)": [[143, "qat.core.Term"]], "coeff (qat.core.term attribute)": [[143, "qat.core.Term.coeff"]], "op (qat.core.term attribute)": [[143, "qat.core.Term.op"]], "qbits (qat.core.term attribute)": [[143, "qat.core.Term.qbits"]], "topology (class in qat.core)": [[144, "qat.core.Topology"]], "add_edge() (qat.core.topology method)": [[144, "qat.core.Topology.add_edge"]], "dump() (qat.core.topology method)": [[144, "qat.core.Topology.dump"]], "from_bytes() (qat.core.topology class method)": [[144, "qat.core.Topology.from_bytes"]], "from_nx() (qat.core.topology static method)": [[144, "qat.core.Topology.from_nx"]], "from_thrift() (qat.core.topology class method)": [[144, "qat.core.Topology.from_thrift"]], "load() (qat.core.topology static method)": [[144, "qat.core.Topology.load"]], "nbqbits (qat.core.topology property)": [[144, "qat.core.Topology.nbqbits"]], "set_nbqbits() (qat.core.topology method)": [[144, "qat.core.Topology.set_nbqbits"]], "to_nx() (qat.core.topology method)": [[144, "qat.core.Topology.to_nx"]], "topologytype (class in qat.core)": [[145, "qat.core.TopologyType"]], "variable (class in qat.core)": [[146, "qat.core.Variable"]], "differentiate() (qat.core.variable method)": [[146, "qat.core.Variable.differentiate"]], "get_variables() (qat.core.variable method)": [[146, "qat.core.Variable.get_variables"]], "to_thrift() (qat.core.variable method)": [[146, "qat.core.Variable.to_thrift"]], "wavefunction() (in module qat.core.simutil)": [[147, "qat.core.simutil.wavefunction"]], "qat.devices": [[148, "module-qat.devices"]], "alltoall (class in qat.devices)": [[149, "qat.devices.AllToAll"]], "qat.devices.google_sycamore (built-in variable)": [[150, "qat.devices.GOOGLE_SYCAMORE"]], "griddevice (class in qat.devices)": [[151, "qat.devices.GridDevice"]], "qat.devices.ibm_burlington (built-in variable)": [[152, "qat.devices.IBM_BURLINGTON"]], "qat.devices.ibm_johannesburg (built-in variable)": [[153, "qat.devices.IBM_JOHANNESBURG"]], "qat.devices.ibm_melbourne (built-in variable)": [[154, "qat.devices.IBM_MELBOURNE"]], "qat.devices.ibm_rueschlikon (built-in variable)": [[155, "qat.devices.IBM_RUESCHLIKON"]], "qat.devices.ibm_singapore (built-in variable)": [[156, "qat.devices.IBM_SINGAPORE"]], "qat.devices.ibm_tokyo (built-in variable)": [[157, "qat.devices.IBM_TOKYO"]], "qat.devices.ibm_yorktown (built-in variable)": [[158, "qat.devices.IBM_YORKTOWN"]], "linedevice (class in qat.devices)": [[159, "qat.devices.LineDevice"]], "qat.devices.rigetti_agave (built-in variable)": [[160, "qat.devices.RIGETTI_AGAVE"]], "qat.devices.rigetti_aspen (built-in variable)": [[161, "qat.devices.RIGETTI_ASPEN"]], "squaregriddevice (class in qat.devices)": [[162, "qat.devices.SquareGridDevice"]], "qat.devices.zuchongzhi (built-in variable)": [[163, "qat.devices.ZUCHONGZHI"]], "qat.fermion": [[164, "module-qat.fermion"]], "qat.fermion.chemistry": [[164, "module-qat.fermion.chemistry"]], "qat.fermion.chemistry.qse": [[164, "module-qat.fermion.chemistry.qse"]], "qat.fermion.chemistry.ucc": [[164, "module-qat.fermion.chemistry.ucc"]], "qat.fermion.circuits": [[164, "module-qat.fermion.circuits"]], "qat.fermion.hamiltonians": [[164, "module-qat.fermion.hamiltonians"]], "qat.fermion.phase_estimation": [[164, "module-qat.fermion.phase_estimation"]], "qat.fermion.transforms": [[164, "module-qat.fermion.transforms"]], "apply_quantum_subspace_expansion() (in module qat.fermion.chemistry.qse)": [[165, "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion"]], "compute_active_space_integrals() (in module qat.fermion.chemistry.ucc)": [[166, "qat.fermion.chemistry.ucc.compute_active_space_integrals"]], "construct_ucc_ansatz() (in module qat.fermion.chemistry.ucc)": [[167, "qat.fermion.chemistry.ucc.construct_ucc_ansatz"]], "convert_to_h_integrals() (in module qat.fermion.chemistry.ucc)": [[168, "qat.fermion.chemistry.ucc.convert_to_h_integrals"]], "electronicstructurehamiltonian (class in qat.fermion.hamiltonians)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.get_matrix"]], "hpq (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpq"]], "hpqrs (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpqrs"]], "to_fermion() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion"]], "to_spin() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[169, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_spin"]], "fermionhamiltonian (class in qat.fermion.hamiltonians)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.nbqbits"]], "normal_order (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.normal_order"]], "terms (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.terms"]], "to_electronic() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.to_electronic"]], "to_spin() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[170, "qat.fermion.hamiltonians.FermionHamiltonian.to_spin"]], "get_cluster_ops() (in module qat.fermion.chemistry.ucc)": [[171, "qat.fermion.chemistry.ucc.get_cluster_ops"]], "get_hf_ket() (in module qat.fermion.chemistry.ucc)": [[172, "qat.fermion.chemistry.ucc.get_hf_ket"]], "guess_init_params() (in module qat.fermion.chemistry.ucc)": [[173, "qat.fermion.chemistry.ucc.guess_init_params"]], "make_anderson_model() (in module qat.fermion.hamiltonians)": [[174, "qat.fermion.hamiltonians.make_anderson_model"]], "make_compressed_ldca_circ() (in module qat.fermion.circuits)": [[175, "qat.fermion.circuits.make_compressed_ldca_circ"]], "make_embedded_model() (in module qat.fermion.hamiltonians)": [[176, "qat.fermion.hamiltonians.make_embedded_model"]], "make_general_hwe_circ() (in module qat.fermion.circuits)": [[177, "qat.fermion.circuits.make_general_hwe_circ"]], "make_hubbard_model() (in module qat.fermion.hamiltonians)": [[178, "qat.fermion.hamiltonians.make_hubbard_model"]], "make_ldca_circ() (in module qat.fermion.circuits)": [[179, "qat.fermion.circuits.make_ldca_circ"]], "make_mr_circ() (in module qat.fermion.circuits)": [[180, "qat.fermion.circuits.make_mr_circ"]], "make_mrep_circ() (in module qat.fermion.circuits)": [[181, "qat.fermion.circuits.make_mrep_circ"]], "make_shallow_circ() (in module qat.fermion.circuits)": [[182, "qat.fermion.circuits.make_shallow_circ"]], "make_trotterisation_routine() (in module qat.fermion.trotterisation)": [[183, "qat.fermion.trotterisation.make_trotterisation_routine"]], "molecularhamiltonian (class in qat.fermion.chemistry.wrapper)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian"]], "constant_coeff (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.constant_coeff"]], "get_electronic_hamiltonian() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian"]], "nqbits (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.one_body_integrals"]], "select_active_space() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.select_active_space"]], "transform_basis() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.transform_basis"]], "two_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[184, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.two_body_integrals"]], "moleculeinfo (class in qat.fermion.chemistry.wrapper)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo"]], "constant_coeff (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.constant_coeff"]], "hamiltonian (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.hamiltonian"]], "n_electrons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.n_electrons"]], "noons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.noons"]], "nqbits (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.one_body_integrals"]], "orbital_energies (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.orbital_energies"]], "restrict_active_space() (qat.fermion.chemistry.wrapper.moleculeinfo method)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.restrict_active_space"]], "two_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[185, "qat.fermion.chemistry.wrapper.MoleculeInfo.two_body_integrals"]], "perform_phase_estimation (class in qat.fermion.phase_estimation)": [[186, "qat.fermion.phase_estimation.perform_phase_estimation"]], "perform_pyscf_computation() (in module qat.fermion.chemistry.pyscf_tools)": [[187, "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation"]], "select_active_orbitals() (in module qat.fermion.chemistry.ucc)": [[188, "qat.fermion.chemistry.ucc.select_active_orbitals"]], "spinhamiltonian (class in qat.fermion.hamiltonians)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.spinhamiltonian method)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.spinhamiltonian method)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.spinhamiltonian method)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.nbqbits"]], "terms (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[189, "qat.fermion.hamiltonians.SpinHamiltonian.terms"]], "transform_integrals_to_new_basis() (in module qat.fermion.chemistry.ucc)": [[190, "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis"]], "transform_to_bk_basis() (in module qat.fermion.transforms)": [[191, "qat.fermion.transforms.transform_to_bk_basis"]], "transform_to_jw_basis() (in module qat.fermion.transforms)": [[192, "qat.fermion.transforms.transform_to_jw_basis"]], "transform_to_parity_basis() (in module qat.fermion.transforms)": [[193, "qat.fermion.transforms.transform_to_parity_basis"]], "qat.fusion": [[194, "module-qat.fusion"]], "adjacentstrategy (class in qat.fusion.strategies)": [[195, "qat.fusion.strategies.AdjacentStrategy"]], "eagerstrategy (class in qat.fusion.strategies)": [[196, "qat.fusion.strategies.EagerStrategy"]], "naivestrategy (class in qat.fusion.strategies)": [[197, "qat.fusion.strategies.NaiveStrategy"]], "qat.generators": [[198, "module-qat.generators"]], "abstractgenerator (class in qat.generators)": [[199, "qat.generators.AbstractGenerator"]], "generate() (qat.generators.abstractgenerator method)": [[199, "qat.generators.AbstractGenerator.generate"]], "serve() (qat.generators.abstractgenerator method)": [[199, "qat.generators.AbstractGenerator.serve"]], "wrapper_post_process() (qat.generators.abstractgenerator method)": [[199, "qat.generators.AbstractGenerator.wrapper_post_process"]], "combinatorialoptimizergenerator (class in qat.generators)": [[200, "qat.generators.CombinatorialOptimizerGenerator"]], "generate() (qat.generators.combinatorialoptimizergenerator method)": [[200, "qat.generators.CombinatorialOptimizerGenerator.generate"]], "post_process() (qat.generators.combinatorialoptimizergenerator method)": [[200, "qat.generators.CombinatorialOptimizerGenerator.post_process"]], "graphcolouringgenerator (class in qat.generators)": [[201, "qat.generators.GraphColouringGenerator"]], "generate() (qat.generators.graphcolouringgenerator method)": [[201, "qat.generators.GraphColouringGenerator.generate"]], "graphpartitioninggenerator (class in qat.generators)": [[202, "qat.generators.GraphPartitioningGenerator"]], "generate() (qat.generators.graphpartitioninggenerator method)": [[202, "qat.generators.GraphPartitioningGenerator.generate"]], "kcliquegenerator (class in qat.generators)": [[203, "qat.generators.KCliqueGenerator"]], "generate() (qat.generators.kcliquegenerator method)": [[203, "qat.generators.KCliqueGenerator.generate"]], "maxcutgenerator (class in qat.generators)": [[204, "qat.generators.MaxCutGenerator"]], "generate() (qat.generators.maxcutgenerator method)": [[204, "qat.generators.MaxCutGenerator.generate"]], "remotebatchgenerator (class in qat.generators)": [[205, "qat.generators.RemoteBatchGenerator"]], "generate() (qat.generators.remotebatchgenerator method)": [[205, "qat.generators.RemoteBatchGenerator.generate"]], "post_process() (qat.generators.remotebatchgenerator method)": [[205, "qat.generators.RemoteBatchGenerator.post_process"]], "vertexcovergenerator (class in qat.generators)": [[206, "qat.generators.VertexCoverGenerator"]], "generate() (qat.generators.vertexcovergenerator method)": [[206, "qat.generators.VertexCoverGenerator.generate"]], "qat.hardware": [[207, "module-qat.hardware"]], "defaultgatesspecification (class in qat.hardware)": [[208, "qat.hardware.DefaultGatesSpecification"]], "gate_times (qat.hardware.defaultgatesspecification attribute)": [[208, "qat.hardware.DefaultGatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.defaultgatesspecification method)": [[208, "qat.hardware.DefaultGatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.defaultgatesspecification method)": [[208, "qat.hardware.DefaultGatesSpecification.get_quantum_channel"]], "meas (qat.hardware.defaultgatesspecification attribute)": [[208, "qat.hardware.DefaultGatesSpecification.meas"]], "quantum_channels (qat.hardware.defaultgatesspecification attribute)": [[208, "qat.hardware.DefaultGatesSpecification.quantum_channels"]], "state_prep (qat.hardware.defaultgatesspecification attribute)": [[208, "qat.hardware.DefaultGatesSpecification.state_prep"]], "defaulthardwaremodel (class in qat.hardware)": [[209, "qat.hardware.DefaultHardwareModel"]], "cleanup_jump_operators() (qat.hardware.defaulthardwaremodel method)": [[209, "qat.hardware.DefaultHardwareModel.cleanup_jump_operators"]], "gate_noise (qat.hardware.defaulthardwaremodel attribute)": [[209, "qat.hardware.DefaultHardwareModel.gate_noise"]], "gates_specification (qat.hardware.defaulthardwaremodel attribute)": [[209, "qat.hardware.DefaultHardwareModel.gates_specification"]], "idle_noise (qat.hardware.defaulthardwaremodel attribute)": [[209, "qat.hardware.DefaultHardwareModel.idle_noise"]], "jump_operators (qat.hardware.defaulthardwaremodel attribute)": [[209, "qat.hardware.DefaultHardwareModel.jump_operators"]], "params_specification (qat.hardware.defaulthardwaremodel attribute)": [[209, "qat.hardware.DefaultHardwareModel.params_specification"]], "shift_jump_operators() (qat.hardware.defaulthardwaremodel method)": [[209, "qat.hardware.DefaultHardwareModel.shift_jump_operators"]], "gatesspecification (class in qat.hardware)": [[210, "qat.hardware.GatesSpecification"]], "gate_times (qat.hardware.gatesspecification attribute)": [[210, "qat.hardware.GatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.gatesspecification method)": [[210, "qat.hardware.GatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.gatesspecification method)": [[210, "qat.hardware.GatesSpecification.get_quantum_channel"]], "meas (qat.hardware.gatesspecification attribute)": [[210, "qat.hardware.GatesSpecification.meas"]], "quantum_channels (qat.hardware.gatesspecification attribute)": [[210, "qat.hardware.GatesSpecification.quantum_channels"]], "state_prep (qat.hardware.gatesspecification attribute)": [[210, "qat.hardware.GatesSpecification.state_prep"]], "hardwaremodel (class in qat.hardware)": [[211, "qat.hardware.HardwareModel"]], "cleanup_jump_operators() (qat.hardware.hardwaremodel method)": [[211, "qat.hardware.HardwareModel.cleanup_jump_operators"]], "gate_noise (qat.hardware.hardwaremodel attribute)": [[211, "qat.hardware.HardwareModel.gate_noise"]], "gates_specification (qat.hardware.hardwaremodel attribute)": [[211, "qat.hardware.HardwareModel.gates_specification"]], "idle_noise (qat.hardware.hardwaremodel attribute)": [[211, "qat.hardware.HardwareModel.idle_noise"]], "jump_operators (qat.hardware.hardwaremodel attribute)": [[211, "qat.hardware.HardwareModel.jump_operators"]], "params_specification (qat.hardware.hardwaremodel attribute)": [[211, "qat.hardware.HardwareModel.params_specification"]], "shift_jump_operators() (qat.hardware.hardwaremodel method)": [[211, "qat.hardware.HardwareModel.shift_jump_operators"]], "make_depolarizing_hardware_model() (in module qat.hardware)": [[212, "qat.hardware.make_depolarizing_hardware_model"]], "qat.lang": [[213, "module-qat.lang"]], "qat.lang.algorithms": [[213, "module-qat.lang.algorithms"]], "abstractgate (class in qat.lang)": [[214, "qat.lang.AbstractGate"]], "set_dag() (qat.lang.abstractgate method)": [[214, "qat.lang.AbstractGate.set_dag"]], "amplification_step() (in module qat.lang.algorithms)": [[215, "qat.lang.algorithms.amplification_step"]], "boolformula (class in qat.lang.aqasm.bits)": [[216, "qat.lang.AQASM.bits.BoolFormula"]], "build_gate() (in module qat.lang)": [[217, "qat.lang.build_gate"]], "cbit (class in qat.lang.aqasm.bits)": [[218, "qat.lang.AQASM.bits.Cbit"]], "cregister (class in qat.lang.aqasm.bits)": [[219, "qat.lang.AQASM.bits.CRegister"]], "gate (class in qat.lang.aqasm.gates)": [[220, "qat.lang.AQASM.gates.Gate"]], "generate_gate_set() (in module qat.lang.aqasm.misc)": [[221, "qat.lang.AQASM.misc.generate_gate_set"]], "grover_diffusion() (in module qat.lang.algorithms.amplification)": [[222, "qat.lang.algorithms.amplification.grover_diffusion"]], "householder() (in module qat.lang.algorithms.amplification)": [[223, "qat.lang.algorithms.amplification.householder"]], "kptree (class in qat.lang.models)": [[224, "qat.lang.models.KPTree"]], "get_routine() (qat.lang.models.kptree method)": [[224, "qat.lang.models.KPTree.get_routine"]], "linker (class in qat.lang.linking)": [[225, "qat.lang.linking.Linker"]], "add_signature() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.add_signature"]], "clear_gate_set() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.clear_gate_set"]], "compile() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.compile"]], "link() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.link"]], "link_gates() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.link_gates"]], "link_matrices() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.link_matrices"]], "set_gate_set() (qat.lang.linking.linker method)": [[225, "qat.lang.linking.Linker.set_gate_set"]], "qat.lang.aqasm.arithmetic": [[226, "module-qat.lang.AQASM.arithmetic"]], "add_const_mod() (in module qat.lang.aqasm.arithmetic)": [[227, "qat.lang.AQASM.arithmetic.add_const_mod"]], "add_mod() (in module qat.lang.aqasm.arithmetic)": [[228, "qat.lang.AQASM.arithmetic.add_mod"]], "modular_exp() (in module qat.lang.aqasm.arithmetic)": [[229, "qat.lang.AQASM.arithmetic.modular_exp"]], "mult_const() (in module qat.lang.aqasm.arithmetic)": [[230, "qat.lang.AQASM.arithmetic.mult_const"]], "mult_const_mod() (in module qat.lang.aqasm.arithmetic)": [[231, "qat.lang.AQASM.arithmetic.mult_const_mod"]], "qat.lang.aqasm.classarith": [[232, "module-qat.lang.AQASM.classarith"]], "add() (in module qat.lang.aqasm.classarith)": [[233, "qat.lang.AQASM.classarith.add"]], "add_const() (in module qat.lang.aqasm.classarith)": [[234, "qat.lang.AQASM.classarith.add_const"]], "cuccaro_add() (in module qat.lang.aqasm.classarith)": [[235, "qat.lang.AQASM.classarith.cuccaro_add"]], "qat.lang.aqasm.qftarith": [[236, "module-qat.lang.AQASM.qftarith"]], "add() (in module qat.lang.aqasm.qftarith)": [[237, "qat.lang.AQASM.qftarith.add"]], "add_const() (in module qat.lang.aqasm.qftarith)": [[238, "qat.lang.AQASM.qftarith.add_const"]], "mult() (in module qat.lang.aqasm.qftarith)": [[239, "qat.lang.AQASM.qftarith.mult"]], "mult_const() (in module qat.lang.aqasm.qftarith)": [[240, "qat.lang.AQASM.qftarith.mult_const"]], "qft() (in module qat.lang.aqasm.qftarith)": [[241, "qat.lang.AQASM.qftarith.QFT"]], "paramgate (class in qat.lang.aqasm.gates)": [[242, "qat.lang.AQASM.gates.ParamGate"]], "bind_variables() (qat.lang.aqasm.gates.paramgate method)": [[242, "qat.lang.AQASM.gates.ParamGate.bind_variables"]], "dag() (qat.lang.aqasm.gates.paramgate method)": [[242, "qat.lang.AQASM.gates.ParamGate.dag"]], "display() (qat.lang.aqasm.gates.paramgate method)": [[242, "qat.lang.AQASM.gates.ParamGate.display"]], "get_variables() (qat.lang.aqasm.gates.paramgate method)": [[242, "qat.lang.AQASM.gates.ParamGate.get_variables"]], "phase_estimation() (in module qat.lang.algorithms)": [[243, "qat.lang.algorithms.phase_estimation"]], "program (class in qat.lang)": [[244, "qat.lang.Program"]], "apply() (qat.lang.program method)": [[244, "qat.lang.Program.apply"]], "calloc() (qat.lang.program method)": [[244, "qat.lang.Program.calloc"]], "cbreak() (qat.lang.program method)": [[244, "qat.lang.Program.cbreak"]], "cc_apply() (qat.lang.program method)": [[244, "qat.lang.Program.cc_apply"]], "comment() (qat.lang.program method)": [[244, "qat.lang.Program.comment"]], "conjugate() (qat.lang.program method)": [[244, "qat.lang.Program.conjugate"]], "display() (qat.lang.program method)": [[244, "qat.lang.Program.display"]], "export() (qat.lang.program method)": [[244, "qat.lang.Program.export"]], "free_ancillae() (qat.lang.program method)": [[244, "qat.lang.Program.free_ancillae"]], "get_free_ancillae() (qat.lang.program method)": [[244, "qat.lang.Program.get_free_ancillae"]], "logic() (qat.lang.program method)": [[244, "qat.lang.Program.logic"]], "measure() (qat.lang.program method)": [[244, "qat.lang.Program.measure"]], "new_var() (qat.lang.program method)": [[244, "qat.lang.Program.new_var"]], "qalloc() (qat.lang.program method)": [[244, "qat.lang.Program.qalloc"]], "reset() (qat.lang.program method)": [[244, "qat.lang.Program.reset"]], "run() (qat.lang.program method)": [[244, "qat.lang.Program.run"]], "to_circ() (qat.lang.program method)": [[244, "qat.lang.Program.to_circ"]], "qarithexp (class in qat.lang.aqasm.qint)": [[245, "qat.lang.AQASM.qint.QArithExp"]], "evaluate() (qat.lang.aqasm.qint.qarithexp method)": [[245, "qat.lang.AQASM.qint.QArithExp.evaluate"]], "qbit (class in qat.lang.aqasm.bits)": [[246, "qat.lang.AQASM.bits.Qbit"]], "qbool (class in qat.lang.aqasm.qbool)": [[247, "qat.lang.AQASM.qbool.QBool"]], "cast() (qat.lang.aqasm.qbool.qbool method)": [[247, "qat.lang.AQASM.qbool.QBool.cast"]], "cast_to() (qat.lang.aqasm.qbool.qbool method)": [[247, "qat.lang.AQASM.qbool.QBool.cast_to"]], "evaluate() (qat.lang.aqasm.qbool.qbool method)": [[247, "qat.lang.AQASM.qbool.QBool.evaluate"]], "phase() (qat.lang.aqasm.qbool.qbool method)": [[247, "qat.lang.AQASM.qbool.QBool.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qbool method)": [[247, "qat.lang.AQASM.qbool.QBool.qbits_list"]], "qboolarray (class in qat.lang.aqasm.qbool)": [[248, "qat.lang.AQASM.qbool.QBoolArray"]], "cast() (qat.lang.aqasm.qbool.qboolarray method)": [[248, "qat.lang.AQASM.qbool.QBoolArray.cast"]], "evaluate() (qat.lang.aqasm.qbool.qboolarray method)": [[248, "qat.lang.AQASM.qbool.QBoolArray.evaluate"]], "qbits_list() (qat.lang.aqasm.qbool.qboolarray method)": [[248, "qat.lang.AQASM.qbool.QBoolArray.qbits_list"]], "qclause (class in qat.lang.aqasm.qbool)": [[249, "qat.lang.AQASM.qbool.QClause"]], "evaluate() (qat.lang.aqasm.qbool.qclause method)": [[249, "qat.lang.AQASM.qbool.QClause.evaluate"]], "phase() (qat.lang.aqasm.qbool.qclause method)": [[249, "qat.lang.AQASM.qbool.QClause.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qclause method)": [[249, "qat.lang.AQASM.qbool.QClause.qbits_list"]], "qcompexp (class in qat.lang.aqasm.qint)": [[250, "qat.lang.AQASM.qint.QCompExp"]], "evaluate() (qat.lang.aqasm.qint.qcompexp method)": [[250, "qat.lang.AQASM.qint.QCompExp.evaluate"]], "phase() (qat.lang.aqasm.qint.qcompexp method)": [[250, "qat.lang.AQASM.qint.QCompExp.phase"]], "qbits_list() (qat.lang.aqasm.qint.qcompexp method)": [[250, "qat.lang.AQASM.qint.QCompExp.qbits_list"]], "qfunc() (in module qat.lang)": [[251, "qat.lang.qfunc"]], "qint (class in qat.lang.aqasm.qint)": [[252, "qat.lang.AQASM.qint.QInt"]], "cast() (qat.lang.aqasm.qint.qint method)": [[252, "qat.lang.AQASM.qint.QInt.cast"]], "evaluate() (qat.lang.aqasm.qint.qint method)": [[252, "qat.lang.AQASM.qint.QInt.evaluate"]], "qbits_list() (qat.lang.aqasm.qint.qint method)": [[252, "qat.lang.AQASM.qint.QInt.qbits_list"]], "set_value() (qat.lang.aqasm.qint.qint method)": [[252, "qat.lang.AQASM.qint.QInt.set_value"]], "qregister (class in qat.lang.aqasm.bits)": [[253, "qat.lang.AQASM.bits.QRegister"]], "qrout() (in module qat.lang)": [[254, "qat.lang.qrout"]], "qroutine (class in qat.lang)": [[255, "qat.lang.QRoutine"]], "apply() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.apply"]], "compute() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.compute"]], "free_ancillae() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.free_ancillae"]], "get_free_ancillae() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.get_free_ancillae"]], "new_wires() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.new_wires"]], "set_ancillae() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.set_ancillae"]], "uncompute() (qat.lang.qroutine method)": [[255, "qat.lang.QRoutine.uncompute"]], "quantum_counting() (in module qat.lang.algorithms)": [[256, "qat.lang.algorithms.quantum_counting"]], "uniform_distribution() (in module qat.lang.algorithms.amplification)": [[257, "qat.lang.algorithms.amplification.uniform_distribution"]], "qat.opt": [[258, "module-qat.opt"]], "ansatzfactory (class in qat.vsolve.ansatz)": [[259, "qat.vsolve.ansatz.AnsatzFactory"]], "qaoa_circuit() (qat.vsolve.ansatz.ansatzfactory static method)": [[259, "qat.vsolve.ansatz.AnsatzFactory.qaoa_circuit"]], "bilp (class in qat.opt)": [[260, "qat.opt.BILP"]], "get_best_parameters() (qat.opt.bilp method)": [[260, "qat.opt.BILP.get_best_parameters"]], "produce_q_and_offset() (in module qat.opt.binary_linear_integer_programming)": [[260, "qat.opt.binary_linear_integer_programming.produce_q_and_offset"]], "circuitgenerator (class in qat.opt.circuit_generator)": [[261, "qat.opt.circuit_generator.CircuitGenerator"]], "get_observable() (qat.opt.circuit_generator.circuitgenerator method)": [[261, "qat.opt.circuit_generator.CircuitGenerator.get_observable"]], "qaoa_job() (qat.opt.circuit_generator.circuitgenerator method)": [[261, "qat.opt.circuit_generator.CircuitGenerator.qaoa_job"]], "clause (class in qat.opt.boolexpr)": [[262, "qat.opt.boolexpr.Clause"]], "and_clause() (qat.opt.boolexpr.clause static method)": [[262, "qat.opt.boolexpr.Clause.and_clause"]], "evaluate() (qat.opt.boolexpr.clause method)": [[262, "qat.opt.boolexpr.Clause.evaluate"]], "get_terms_obs() (qat.opt.boolexpr.clause method)": [[262, "qat.opt.boolexpr.Clause.get_terms_obs"]], "get_variables() (qat.opt.boolexpr.clause method)": [[262, "qat.opt.boolexpr.Clause.get_variables"]], "neg_clause() (qat.opt.boolexpr.clause static method)": [[262, "qat.opt.boolexpr.Clause.neg_clause"]], "or_clause() (qat.opt.boolexpr.clause static method)": [[262, "qat.opt.boolexpr.Clause.or_clause"]], "xor_clause() (qat.opt.boolexpr.clause static method)": [[262, "qat.opt.boolexpr.Clause.xor_clause"]], "combinatorialproblem (class in qat.opt)": [[263, "qat.opt.CombinatorialProblem"]], "add_clause() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.add_clause"]], "aqo_job() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.aqo_job"]], "decode_rydberg() (qat.opt.combinatorialproblem class method)": [[263, "qat.opt.CombinatorialProblem.decode_rydberg"]], "decode_rydberg_meta_data() (qat.opt.combinatorialproblem static method)": [[263, "qat.opt.CombinatorialProblem.decode_rydberg_meta_data"]], "get_observable() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.get_observable"]], "new_var() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.new_var"]], "new_vars() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.new_vars"]], "qaoa_job() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.qaoa_job"]], "ryd_job() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.ryd_job"]], "sqa_job() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.sqa_job"]], "to_bqm() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.to_bqm"]], "to_ising() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.to_ising"]], "to_job() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.to_job"]], "to_qubo() (qat.opt.combinatorialproblem method)": [[263, "qat.opt.CombinatorialProblem.to_qubo"]], "graphcolouring (class in qat.opt)": [[264, "qat.opt.GraphColouring"]], "get_best_parameters() (qat.opt.graphcolouring method)": [[264, "qat.opt.GraphColouring.get_best_parameters"]], "parse_result() (qat.opt.graphcolouring method)": [[264, "qat.opt.GraphColouring.parse_result"]], "produce_q_and_offset() (in module qat.opt.graph_colouring)": [[264, "qat.opt.graph_colouring.produce_q_and_offset"]], "graphpartitioning (class in qat.opt)": [[265, "qat.opt.GraphPartitioning"]], "get_best_parameters() (qat.opt.graphpartitioning method)": [[265, "qat.opt.GraphPartitioning.get_best_parameters"]], "parse_result() (qat.opt.graphpartitioning method)": [[265, "qat.opt.GraphPartitioning.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.graph_partitioning)": [[265, "qat.opt.graph_partitioning.produce_j_h_and_offset"]], "ising (class in qat.opt)": [[266, "qat.opt.Ising"]], "aqo_job() (qat.opt.ising method)": [[266, "qat.opt.Ising.aqo_job"]], "decode_rydberg() (qat.opt.ising class method)": [[266, "qat.opt.Ising.decode_rydberg"]], "decode_rydberg_meta_data() (qat.opt.ising static method)": [[266, "qat.opt.Ising.decode_rydberg_meta_data"]], "dump() (qat.opt.ising method)": [[266, "qat.opt.Ising.dump"]], "from_thrift() (qat.opt.ising class method)": [[266, "qat.opt.Ising.from_thrift"]], "get_best_parameters() (qat.opt.ising method)": [[266, "qat.opt.Ising.get_best_parameters"]], "get_j_h_and_offset() (qat.opt.ising method)": [[266, "qat.opt.Ising.get_j_h_and_offset"]], "get_observable() (qat.opt.ising method)": [[266, "qat.opt.Ising.get_observable"]], "j_coupling_matrix (qat.opt.ising property)": [[266, "qat.opt.Ising.j_coupling_matrix"]], "load() (qat.opt.ising class method)": [[266, "qat.opt.Ising.load"]], "magnetic_field_h (qat.opt.ising property)": [[266, "qat.opt.Ising.magnetic_field_h"]], "qaoa_job() (qat.opt.ising method)": [[266, "qat.opt.Ising.qaoa_job"]], "ryd_job() (qat.opt.ising method)": [[266, "qat.opt.Ising.ryd_job"]], "sqa_job() (qat.opt.ising method)": [[266, "qat.opt.Ising.sqa_job"]], "to_bqm() (qat.opt.ising method)": [[266, "qat.opt.Ising.to_bqm"]], "to_combinatorial_problem() (qat.opt.ising method)": [[266, "qat.opt.Ising.to_combinatorial_problem"]], "to_job() (qat.opt.ising method)": [[266, "qat.opt.Ising.to_job"]], "to_qubo() (qat.opt.ising method)": [[266, "qat.opt.Ising.to_qubo"]], "kclique (class in qat.opt)": [[267, "qat.opt.KClique"]], "get_best_parameters() (qat.opt.kclique method)": [[267, "qat.opt.KClique.get_best_parameters"]], "parse_result() (qat.opt.kclique method)": [[267, "qat.opt.KClique.parse_result"]], "produce_q_and_offset() (in module qat.opt.k_clique)": [[267, "qat.opt.k_clique.produce_q_and_offset"]], "maxcut (class in qat.opt)": [[268, "qat.opt.MaxCut"]], "get_best_parameters() (qat.opt.maxcut method)": [[268, "qat.opt.MaxCut.get_best_parameters"]], "parse_result() (qat.opt.maxcut method)": [[268, "qat.opt.MaxCut.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.max_cut)": [[268, "qat.opt.max_cut.produce_j_h_and_offset"]], "mixingfactory (class in qat.opt)": [[269, "qat.opt.MixingFactory"]], "bit_flip() (qat.opt.mixingfactory static method)": [[269, "qat.opt.MixingFactory.bit_flip"]], "bit_move() (qat.opt.mixingfactory static method)": [[269, "qat.opt.MixingFactory.bit_move"]], "qat.opt.mixing_factory": [[270, "module-qat.opt.mixing_factory"]], "independentaqo (class in qat.opt.mixing_factory)": [[271, "qat.opt.mixing_factory.IndependentAQO"]], "inject_initial_state() (qat.opt.mixing_factory.independentaqo method)": [[271, "qat.opt.mixing_factory.IndependentAQO.inject_initial_state"]], "initialstatebuilder (class in qat.opt.mixing_factory)": [[272, "qat.opt.mixing_factory.InitialStateBuilder"]], "inject_initial_state() (qat.opt.mixing_factory.initialstatebuilder method)": [[272, "qat.opt.mixing_factory.InitialStateBuilder.inject_initial_state"]], "simpleinitialstate (class in qat.opt.mixing_factory)": [[273, "qat.opt.mixing_factory.SimpleInitialState"]], "inject_initial_state() (qat.opt.mixing_factory.simpleinitialstate method)": [[273, "qat.opt.mixing_factory.SimpleInitialState.inject_initial_state"]], "qat.opt.results": [[274, "module-qat.opt.results"]], "combinatorialresult (class in qat.opt.results)": [[275, "qat.opt.results.CombinatorialResult"]], "graphpartitioningresult (class in qat.opt.results)": [[276, "qat.opt.results.GraphPartitioningResult"]], "display() (qat.opt.results.graphpartitioningresult method)": [[276, "qat.opt.results.GraphPartitioningResult.display"]], "kcliqueresult (class in qat.opt.results)": [[277, "qat.opt.results.KCliqueResult"]], "clique (qat.opt.results.kcliqueresult property)": [[277, "qat.opt.results.KCliqueResult.clique"]], "display() (qat.opt.results.kcliqueresult method)": [[277, "qat.opt.results.KCliqueResult.display"]], "vertexcoverresult (class in qat.opt.results)": [[278, "qat.opt.results.VertexCoverResult"]], "cover (qat.opt.results.vertexcoverresult property)": [[278, "qat.opt.results.VertexCoverResult.cover"]], "display() (qat.opt.results.vertexcoverresult method)": [[278, "qat.opt.results.VertexCoverResult.display"]], "mwis (class in qat.opt)": [[279, "qat.opt.MWIS"]], "aqo_job() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.aqo_job"]], "decode_rydberg() (qat.opt.mwis class method)": [[279, "qat.opt.MWIS.decode_rydberg"]], "decode_rydberg_meta_data() (qat.opt.mwis static method)": [[279, "qat.opt.MWIS.decode_rydberg_meta_data"]], "dump() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.dump"]], "from_thrift() (qat.opt.mwis class method)": [[279, "qat.opt.MWIS.from_thrift"]], "get_best_parameters() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.get_best_parameters"]], "get_j_h_and_offset() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.get_j_h_and_offset"]], "get_observable() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.get_observable"]], "graph (qat.opt.mwis attribute)": [[279, "qat.opt.MWIS.graph"]], "j_coupling_matrix (qat.opt.mwis property)": [[279, "qat.opt.MWIS.j_coupling_matrix"]], "load() (qat.opt.mwis class method)": [[279, "qat.opt.MWIS.load"]], "magnetic_field_h (qat.opt.mwis property)": [[279, "qat.opt.MWIS.magnetic_field_h"]], "qaoa_job() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.qaoa_job"]], "ryd_job() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.ryd_job"]], "sqa_job() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.sqa_job"]], "to_bqm() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.to_bqm"]], "to_combinatorial_problem() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.to_combinatorial_problem"]], "to_job() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.to_job"]], "to_qubo() (qat.opt.mwis method)": [[279, "qat.opt.MWIS.to_qubo"]], "numberpartitioning (class in qat.opt)": [[280, "qat.opt.NumberPartitioning"]], "get_best_parameters() (qat.opt.numberpartitioning method)": [[280, "qat.opt.NumberPartitioning.get_best_parameters"]], "produce_j_h_and_offset() (in module qat.opt.number_partitioning)": [[280, "qat.opt.number_partitioning.produce_j_h_and_offset"]], "qubo (class in qat.opt)": [[281, "qat.opt.QUBO"]], "aqo_job() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.aqo_job"]], "decode_rydberg() (qat.opt.qubo class method)": [[281, "qat.opt.QUBO.decode_rydberg"]], "decode_rydberg_meta_data() (qat.opt.qubo static method)": [[281, "qat.opt.QUBO.decode_rydberg_meta_data"]], "get_best_parameters() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.get_best_parameters"]], "get_observable() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.get_observable"]], "get_q_and_offset() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.get_q_and_offset"]], "q_matrix (qat.opt.qubo property)": [[281, "qat.opt.QUBO.q_matrix"]], "qaoa_job() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.qaoa_job"]], "ryd_job() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.ryd_job"]], "sqa_job() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.sqa_job"]], "to_bqm() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.to_bqm"]], "to_combinatorial_problem() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.to_combinatorial_problem"]], "to_ising() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.to_ising"]], "to_job() (qat.opt.qubo method)": [[281, "qat.opt.QUBO.to_job"]], "schedulegenerator (class in qat.opt.schedule_generator)": [[282, "qat.opt.schedule_generator.ScheduleGenerator"]], "aqo_job() (qat.opt.schedule_generator.schedulegenerator method)": [[282, "qat.opt.schedule_generator.ScheduleGenerator.aqo_job"]], "get_observable() (qat.opt.schedule_generator.schedulegenerator method)": [[282, "qat.opt.schedule_generator.ScheduleGenerator.get_observable"]], "var (class in qat.opt.boolexpr)": [[283, "qat.opt.boolexpr.Var"]], "evaluate() (qat.opt.boolexpr.var method)": [[283, "qat.opt.boolexpr.Var.evaluate"]], "get_terms_obs() (qat.opt.boolexpr.var method)": [[283, "qat.opt.boolexpr.Var.get_terms_obs"]], "get_variables() (qat.opt.boolexpr.var method)": [[283, "qat.opt.boolexpr.Var.get_variables"]], "index (qat.opt.boolexpr.var attribute)": [[283, "qat.opt.boolexpr.Var.index"]], "vertexcover (class in qat.opt)": [[284, "qat.opt.VertexCover"]], "get_best_parameters() (qat.opt.vertexcover method)": [[284, "qat.opt.VertexCover.get_best_parameters"]], "parse_result() (qat.opt.vertexcover method)": [[284, "qat.opt.VertexCover.parse_result"]], "produce_q_and_offset() (in module qat.opt.vertex_cover)": [[284, "qat.opt.vertex_cover.produce_q_and_offset"]], "qat.plugins": [[285, "module-qat.plugins"]], "abstractplugin (class in qat.plugins)": [[286, "qat.plugins.AbstractPlugin"]], "compile() (qat.plugins.abstractplugin method)": [[286, "qat.plugins.AbstractPlugin.compile"]], "do_post_processing() (qat.plugins.abstractplugin method)": [[286, "qat.plugins.AbstractPlugin.do_post_processing"]], "post_process() (qat.plugins.abstractplugin method)": [[286, "qat.plugins.AbstractPlugin.post_process"]], "serve() (qat.plugins.abstractplugin method)": [[286, "qat.plugins.AbstractPlugin.serve"]], "adaptvqeplugin (class in qat.plugins)": [[287, "qat.plugins.AdaptVQEPlugin"]], "compile() (qat.plugins.adaptvqeplugin method)": [[287, "qat.plugins.AdaptVQEPlugin.compile"]], "circuitinliner (class in qat.plugins)": [[288, "qat.plugins.CircuitInliner"]], "compile() (qat.plugins.circuitinliner method)": [[288, "qat.plugins.CircuitInliner.compile"]], "costfunctionplugin (class in qat.plugins)": [[289, "qat.plugins.CostFunctionPlugin"]], "compile() (qat.plugins.costfunctionplugin method)": [[289, "qat.plugins.CostFunctionPlugin.compile"]], "display (class in qat.plugins)": [[290, "qat.plugins.Display"]], "compile() (qat.plugins.display method)": [[290, "qat.plugins.Display.compile"]], "fusionplugin (class in qat.plugins)": [[291, "qat.plugins.FusionPlugin"]], "compile() (qat.plugins.fusionplugin method)": [[291, "qat.plugins.FusionPlugin.compile"]], "gradientdescentoptimizer (class in qat.plugins)": [[292, "qat.plugins.GradientDescentOptimizer"]], "compile() (qat.plugins.gradientdescentoptimizer method)": [[292, "qat.plugins.GradientDescentOptimizer.compile"]], "junction (class in qat.plugins)": [[293, "qat.plugins.Junction"]], "execute() (qat.plugins.junction method)": [[293, "qat.plugins.Junction.execute"]], "run() (qat.plugins.junction method)": [[293, "qat.plugins.Junction.run"]], "multiplelaunchesanalyzer (class in qat.plugins)": [[294, "qat.plugins.MultipleLaunchesAnalyzer"]], "compile() (qat.plugins.multiplelaunchesanalyzer method)": [[294, "qat.plugins.MultipleLaunchesAnalyzer.compile"]], "observablesplitter (class in qat.plugins)": [[295, "qat.plugins.ObservableSplitter"]], "compile() (qat.plugins.observablesplitter method)": [[295, "qat.plugins.ObservableSplitter.compile"]], "optimizer (class in qat.plugins)": [[296, "qat.plugins.Optimizer"]], "evaluate() (qat.plugins.optimizer method)": [[296, "qat.plugins.Optimizer.evaluate"]], "optimize() (qat.plugins.optimizer method)": [[296, "qat.plugins.Optimizer.optimize"]], "psominimizeplugin (class in qat.plugins)": [[297, "qat.plugins.PSOMinimizePlugin"]], "compile() (qat.plugins.psominimizeplugin method)": [[297, "qat.plugins.PSOMinimizePlugin.compile"]], "quameleonplugin (class in qat.plugins)": [[298, "qat.plugins.QuameleonPlugin"]], "compile() (qat.plugins.quameleonplugin method)": [[298, "qat.plugins.QuameleonPlugin.compile"]], "remoteplugin (class in qat.plugins)": [[299, "qat.plugins.RemotePlugin"]], "compile() (qat.plugins.remoteplugin method)": [[299, "qat.plugins.RemotePlugin.compile"]], "scipyminimizeplugin (class in qat.plugins)": [[300, "qat.plugins.ScipyMinimizePlugin"]], "compile() (qat.plugins.scipyminimizeplugin method)": [[300, "qat.plugins.ScipyMinimizePlugin.compile"]], "set_options() (qat.plugins.scipyminimizeplugin method)": [[300, "qat.plugins.ScipyMinimizePlugin.set_options"]], "seqoptim (class in qat.plugins)": [[301, "qat.plugins.SeqOptim"]], "compile() (qat.plugins.seqoptim method)": [[301, "qat.plugins.SeqOptim.compile"]], "spsaminimizeplugin (class in qat.plugins)": [[302, "qat.plugins.SPSAMinimizePlugin"]], "compile() (qat.plugins.spsaminimizeplugin method)": [[302, "qat.plugins.SPSAMinimizePlugin.compile"]], "transformobservable (class in qat.plugins)": [[303, "qat.plugins.TransformObservable"]], "compile() (qat.plugins.transformobservable method)": [[303, "qat.plugins.TransformObservable.compile"]], "zeronoiseextrapolator (class in qat.plugins)": [[304, "qat.plugins.ZeroNoiseExtrapolator"]], "compile() (qat.plugins.zeronoiseextrapolator method)": [[304, "qat.plugins.ZeroNoiseExtrapolator.compile"]], "qat.qpus": [[305, "module-qat.qpus"]], "clinalg (class in qat.qpus)": [[306, "qat.qpus.CLinalg"]], "statevectorcpudouble (class in qat.clinalg.wrapper)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble"]], "apply_1qbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_1qbit_ctrl_gate"]], "apply_1qbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_1qbit_gate"]], "apply_2qbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_2qbit_ctrl_gate"]], "apply_2qbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_2qbit_gate"]], "apply_ccnot() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CCNOT"]], "apply_cnot() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CNOT"]], "apply_csign() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_CSIGN"]], "apply_h() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_H"]], "apply_iswap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_ISWAP"]], "apply_ph() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_PH"]], "apply_rx() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RX"]], "apply_ry() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RY"]], "apply_rz() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_RZ"]], "apply_s() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_S"]], "apply_sqrtswap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_SQRTSWAP"]], "apply_swap() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_SWAP"]], "apply_t() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_T"]], "apply_x() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_X"]], "apply_y() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_Y"]], "apply_z() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_Z"]], "apply_nqbit_ctrl_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_nqbit_ctrl_gate"]], "apply_nqbit_gate() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.apply_nqbit_gate"]], "array (qat.clinalg.wrapper.statevectorcpudouble property)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.array"]], "array_readonly (qat.clinalg.wrapper.statevectorcpudouble property)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.array_readonly"]], "expectation_value() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.expectation_value"]], "get_distribution() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.get_distribution"]], "get_mapped_distribution() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.get_mapped_distribution"]], "get_mapped_statevector() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.get_mapped_statevector"]], "get_permuted_statevector() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.get_permuted_statevector"]], "measure() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.measure"]], "print() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.print"]], "probability() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.probability"]], "project() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.project"]], "project_then_reset() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.project_then_reset"]], "sample() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.sample"]], "sample_subset() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.sample_subset"]], "set_num_threads() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.set_num_threads"]], "simulate_circuit() (qat.clinalg.wrapper.statevectorcpudouble method)": [[306, "qat.clinalg.wrapper.StateVectorCPUDouble.simulate_circuit"]], "submit() (qat.qpus.clinalg method)": [[306, "qat.qpus.CLinalg.submit"]], "pylinalg (class in qat.qpus)": [[307, "qat.qpus.PyLinalg"]], "serve() (qat.qpus.pylinalg method)": [[307, "qat.qpus.PyLinalg.serve"]], "submit() (qat.qpus.pylinalg method)": [[307, "qat.qpus.PyLinalg.submit"]], "submit_job() (qat.qpus.pylinalg method)": [[307, "qat.qpus.PyLinalg.submit_job"]], "simulatedannealing (class in qat.qpus)": [[308, "qat.qpus.SimulatedAnnealing"]], "extract_j_and_h_from_obs() (in module qat.simulated_annealing.service)": [[308, "qat.simulated_annealing.service.extract_j_and_h_from_obs"]], "submit_job() (qat.qpus.simulatedannealing method)": [[308, "qat.qpus.SimulatedAnnealing.submit_job"]], "classicalqpu (class in qat.qpus)": [[309, "qat.qpus.ClassicalQPU"]], "get_current_qpu() (in module qat.qpus)": [[310, "qat.qpus.get_current_qpu"]], "get_default_qpu() (in module qat.qpus)": [[311, "qat.qpus.get_default_qpu"]], "qpuhandler (class in qat.qpus)": [[312, "qat.qpus.QPUHandler"]], "apply_resource_consumption_limits() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.apply_resource_consumption_limits"]], "estimate_resources_for_batch() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.estimate_resources_for_batch"]], "get_specs() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.get_specs"]], "serve() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.serve"]], "submit() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.submit"]], "submit_job() (qat.qpus.qpuhandler method)": [[312, "qat.qpus.QPUHandler.submit_job"]], "remoteqpu (class in qat.qpus)": [[313, "qat.qpus.RemoteQPU"]], "qat.quops": [[314, "module-qat.quops"]], "qat.quops.metrics": [[314, "module-qat.quops.metrics"]], "are_equal_up_to_phase() (in module qat.quops.math_util)": [[315, "qat.quops.math_util.are_equal_up_to_phase"]], "channelrepresentations (class in qat.quops)": [[316, "qat.quops.ChannelRepresentations"]], "convert_density_mat_to_pauli_vec() (in module qat.quops.math_util)": [[317, "qat.quops.math_util.convert_density_mat_to_pauli_vec"]], "convert_pauli_vec_to_density_mat() (in module qat.quops.math_util)": [[318, "qat.quops.math_util.convert_pauli_vec_to_density_mat"]], "get_average_process_fidelity() (in module qat.quops.metrics)": [[319, "qat.quops.metrics.get_average_process_fidelity"]], "get_diamond_norm() (in module qat.quops.metrics)": [[320, "qat.quops.metrics.get_diamond_norm"]], "get_entanglement_process_fidelity() (in module qat.quops.metrics)": [[321, "qat.quops.metrics.get_entanglement_process_fidelity"]], "get_process_distance() (in module qat.quops.metrics)": [[322, "qat.quops.metrics.get_process_distance"]], "get_state_fidelity() (in module qat.quops.metrics)": [[323, "qat.quops.metrics.get_state_fidelity"]], "get_trace_distance() (in module qat.quops.metrics)": [[324, "qat.quops.metrics.get_trace_distance"]], "is_completely_positive() (in module qat.quops)": [[325, "qat.quops.is_completely_positive"]], "is_trace_preserving() (in module qat.quops)": [[326, "qat.quops.is_trace_preserving"]], "is_trace_reducing() (in module qat.quops)": [[327, "qat.quops.is_trace_reducing"]], "is_unital() (in module qat.quops)": [[328, "qat.quops.is_unital"]], "make_avg_fid_equiv_depol_channel() (in module qat.quops)": [[329, "qat.quops.make_avg_fid_equiv_depol_channel"]], "make_depolarizing_channel() (in module qat.quops)": [[330, "qat.quops.make_depolarizing_channel"]], "make_generalized_amplitude_damping() (in module qat.quops)": [[331, "qat.quops.make_generalized_amplitude_damping"]], "make_pauli_matrix_basis() (in module qat.quops.math_util)": [[332, "qat.quops.math_util.make_pauli_matrix_basis"]], "make_standard_matrix_basis() (in module qat.quops.math_util)": [[333, "qat.quops.math_util.make_standard_matrix_basis"]], "make_standard_vector_basis() (in module qat.quops.math_util)": [[334, "qat.quops.math_util.make_standard_vector_basis"]], "multikron() (in module qat.quops.math_util)": [[335, "qat.quops.math_util.multikron"]], "parametricamplitudedamping (class in qat.quops)": [[336, "qat.quops.ParametricAmplitudeDamping"]], "t_1 (qat.quops.parametricamplitudedamping attribute)": [[336, "qat.quops.ParametricAmplitudeDamping.T_1"]], "name (qat.quops.parametricamplitudedamping attribute)": [[336, "qat.quops.ParametricAmplitudeDamping.name"]], "prob() (qat.quops.parametricamplitudedamping method)": [[336, "qat.quops.ParametricAmplitudeDamping.prob"]], "parametricgatenoise (class in qat.quops)": [[337, "qat.quops.ParametricGateNoise"]], "parametricpuredephasing (class in qat.quops)": [[338, "qat.quops.ParametricPureDephasing"]], "t_phi (qat.quops.parametricpuredephasing attribute)": [[338, "qat.quops.ParametricPureDephasing.T_phi"]], "name (qat.quops.parametricpuredephasing attribute)": [[338, "qat.quops.ParametricPureDephasing.name"]], "prob() (qat.quops.parametricpuredephasing method)": [[338, "qat.quops.ParametricPureDephasing.prob"]], "ptilde() (qat.quops.parametricpuredephasing method)": [[338, "qat.quops.ParametricPureDephasing.ptilde"]], "parametricquantumchannel (class in qat.quops)": [[339, "qat.quops.ParametricQuantumChannel"]], "partial_trace() (in module qat.quops.math_util)": [[340, "qat.quops.math_util.partial_trace"]], "quantumchannel (class in qat.quops)": [[341, "qat.quops.QuantumChannel"]], "quantumchannelchi (class in qat.quops)": [[342, "qat.quops.QuantumChannelChi"]], "apply_to() (qat.quops.quantumchannelchi method)": [[342, "qat.quops.QuantumChannelChi.apply_to"]], "arity (qat.quops.quantumchannelchi attribute)": [[342, "qat.quops.QuantumChannelChi.arity"]], "matrix (qat.quops.quantumchannelchi attribute)": [[342, "qat.quops.QuantumChannelChi.matrix"]], "matrix_basis (qat.quops.quantumchannelchi attribute)": [[342, "qat.quops.QuantumChannelChi.matrix_basis"]], "name (qat.quops.quantumchannelchi attribute)": [[342, "qat.quops.QuantumChannelChi.name"]], "to_kraus() (qat.quops.quantumchannelchi method)": [[342, "qat.quops.QuantumChannelChi.to_kraus"]], "quantumchannelchoi (class in qat.quops)": [[343, "qat.quops.QuantumChannelChoi"]], "arity (qat.quops.quantumchannelchoi attribute)": [[343, "qat.quops.QuantumChannelChoi.arity"]], "matrix (qat.quops.quantumchannelchoi attribute)": [[343, "qat.quops.QuantumChannelChoi.matrix"]], "name (qat.quops.quantumchannelchoi attribute)": [[343, "qat.quops.QuantumChannelChoi.name"]], "to_kraus() (qat.quops.quantumchannelchoi method)": [[343, "qat.quops.QuantumChannelChoi.to_kraus"]], "to_ptm() (qat.quops.quantumchannelchoi method)": [[343, "qat.quops.QuantumChannelChoi.to_ptm"]], "quantumchannelkraus (class in qat.quops)": [[344, "qat.quops.QuantumChannelKraus"]], "apply_to() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.apply_to"]], "apply_to_vector() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.apply_to_vector"]], "kraus_operators (qat.quops.quantumchannelkraus attribute)": [[344, "qat.quops.QuantumChannelKraus.kraus_operators"]], "kraus_rank() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.kraus_rank"]], "name (qat.quops.quantumchannelkraus attribute)": [[344, "qat.quops.QuantumChannelKraus.name"]], "to_chi() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.to_chi"]], "to_choi() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.to_choi"]], "to_ptm() (qat.quops.quantumchannelkraus method)": [[344, "qat.quops.QuantumChannelKraus.to_ptm"]], "quantumchannelptm (class in qat.quops)": [[345, "qat.quops.QuantumChannelPTM"]], "apply_to() (qat.quops.quantumchannelptm method)": [[345, "qat.quops.QuantumChannelPTM.apply_to"]], "arity (qat.quops.quantumchannelptm attribute)": [[345, "qat.quops.QuantumChannelPTM.arity"]], "matrix (qat.quops.quantumchannelptm property)": [[345, "qat.quops.QuantumChannelPTM.matrix"]], "name (qat.quops.quantumchannelptm attribute)": [[345, "qat.quops.QuantumChannelPTM.name"]], "ptm (qat.quops.quantumchannelptm property)": [[345, "qat.quops.QuantumChannelPTM.ptm"]], "tensor (qat.quops.quantumchannelptm property)": [[345, "qat.quops.QuantumChannelPTM.tensor"]], "to_choi() (qat.quops.quantumchannelptm method)": [[345, "qat.quops.QuantumChannelPTM.to_choi"]], "to_kraus() (qat.quops.quantumchannelptm method)": [[345, "qat.quops.QuantumChannelPTM.to_kraus"]]}})